
USB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08007a84  08007a84  00017a84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007b14  08007b14  00020160  2**0
                  CONTENTS
  4 .ARM          00000008  08007b14  08007b14  00017b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007b1c  08007b1c  00020160  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007b1c  08007b1c  00017b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007b20  08007b20  00017b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000160  20000000  08007b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020160  2**0
                  CONTENTS
 10 .bss          00001cac  20000160  20000160  00020160  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001e0c  20001e0c  00020160  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e0dd  00000000  00000000  00020190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029a0  00000000  00000000  0002e26d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b58  00000000  00000000  00030c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a10  00000000  00000000  00031768  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022f3c  00000000  00000000  00032178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f5f7  00000000  00000000  000550b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c433c  00000000  00000000  000646ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001289e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000030b8  00000000  00000000  00128a38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000160 	.word	0x20000160
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007a6c 	.word	0x08007a6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000164 	.word	0x20000164
 80001cc:	08007a6c 	.word	0x08007a6c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b086      	sub	sp, #24
 8000588:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800058a:	f000 fa13 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800058e:	f000 f881 	bl	8000694 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000592:	f000 f8ed 	bl	8000770 <MX_GPIO_Init>
  MX_USB_DEVICE_Init();
 8000596:	f006 f885 	bl	80066a4 <MX_USB_DEVICE_Init>
  
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t newLine = '\n';
 800059a:	230a      	movs	r3, #10
 800059c:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
	  if (strlen((char*)buffer) > 0)
 800059e:	4b38      	ldr	r3, [pc, #224]	; (8000680 <main+0xfc>)
 80005a0:	781b      	ldrb	r3, [r3, #0]
 80005a2:	2b00      	cmp	r3, #0
 80005a4:	d0fb      	beq.n	800059e <main+0x1a>
	  {
		  for (int i = 0; i < strlen((char*)buffer); i++)
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
 80005aa:	e053      	b.n	8000654 <main+0xd0>
		  {
			  sentByte = buffer[i];
 80005ac:	4a34      	ldr	r2, [pc, #208]	; (8000680 <main+0xfc>)
 80005ae:	697b      	ldr	r3, [r7, #20]
 80005b0:	4413      	add	r3, r2
 80005b2:	781a      	ldrb	r2, [r3, #0]
 80005b4:	4b33      	ldr	r3, [pc, #204]	; (8000684 <main+0x100>)
 80005b6:	701a      	strb	r2, [r3, #0]
			  //Send every bit of the byte separately
			  for (int j = 0; j < 8; j++)
 80005b8:	2300      	movs	r3, #0
 80005ba:	613b      	str	r3, [r7, #16]
 80005bc:	e037      	b.n	800062e <main+0xaa>
			  {
			      HAL_GPIO_WritePin(GPIOD,output_Pin, ((sentByte) & (1 << j)) == 0 ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80005be:	4b31      	ldr	r3, [pc, #196]	; (8000684 <main+0x100>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	461a      	mov	r2, r3
 80005c4:	693b      	ldr	r3, [r7, #16]
 80005c6:	fa42 f303 	asr.w	r3, r2, r3
 80005ca:	f003 0301 	and.w	r3, r3, #1
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	bf14      	ite	ne
 80005d2:	2301      	movne	r3, #1
 80005d4:	2300      	moveq	r3, #0
 80005d6:	b2db      	uxtb	r3, r3
 80005d8:	461a      	mov	r2, r3
 80005da:	2102      	movs	r1, #2
 80005dc:	482a      	ldr	r0, [pc, #168]	; (8000688 <main+0x104>)
 80005de:	f000 fd45 	bl	800106c <HAL_GPIO_WritePin>
			      HAL_Delay(250);
 80005e2:	20fa      	movs	r0, #250	; 0xfa
 80005e4:	f000 fa58 	bl	8000a98 <HAL_Delay>
			     value = HAL_GPIO_ReadPin(GPIOD,input_Pin);
 80005e8:	2120      	movs	r1, #32
 80005ea:	4827      	ldr	r0, [pc, #156]	; (8000688 <main+0x104>)
 80005ec:	f000 fd26 	bl	800103c <HAL_GPIO_ReadPin>
 80005f0:	4603      	mov	r3, r0
 80005f2:	461a      	mov	r2, r3
 80005f4:	4b25      	ldr	r3, [pc, #148]	; (800068c <main+0x108>)
 80005f6:	601a      	str	r2, [r3, #0]
			     char out[10] = { 0 };
 80005f8:	2300      	movs	r3, #0
 80005fa:	603b      	str	r3, [r7, #0]
 80005fc:	1d3b      	adds	r3, r7, #4
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	809a      	strh	r2, [r3, #4]
			     snprintf(out, 9, "%d\n", value);
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <main+0x108>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4638      	mov	r0, r7
 800060a:	4a21      	ldr	r2, [pc, #132]	; (8000690 <main+0x10c>)
 800060c:	2109      	movs	r1, #9
 800060e:	f006 fdab 	bl	8007168 <sniprintf>

			     CDC_Transmit_FS((uint8_t*)out, strlen(out));
 8000612:	463b      	mov	r3, r7
 8000614:	4618      	mov	r0, r3
 8000616:	f7ff fddb 	bl	80001d0 <strlen>
 800061a:	4603      	mov	r3, r0
 800061c:	b29a      	uxth	r2, r3
 800061e:	463b      	mov	r3, r7
 8000620:	4611      	mov	r1, r2
 8000622:	4618      	mov	r0, r3
 8000624:	f006 f912 	bl	800684c <CDC_Transmit_FS>
			  for (int j = 0; j < 8; j++)
 8000628:	693b      	ldr	r3, [r7, #16]
 800062a:	3301      	adds	r3, #1
 800062c:	613b      	str	r3, [r7, #16]
 800062e:	693b      	ldr	r3, [r7, #16]
 8000630:	2b07      	cmp	r3, #7
 8000632:	ddc4      	ble.n	80005be <main+0x3a>
			  }
			  CDC_Transmit_FS(buffer + i, 1);
 8000634:	697b      	ldr	r3, [r7, #20]
 8000636:	4a12      	ldr	r2, [pc, #72]	; (8000680 <main+0xfc>)
 8000638:	4413      	add	r3, r2
 800063a:	2101      	movs	r1, #1
 800063c:	4618      	mov	r0, r3
 800063e:	f006 f905 	bl	800684c <CDC_Transmit_FS>
			  CDC_Transmit_FS(&newLine, 1);
 8000642:	f107 030b 	add.w	r3, r7, #11
 8000646:	2101      	movs	r1, #1
 8000648:	4618      	mov	r0, r3
 800064a:	f006 f8ff 	bl	800684c <CDC_Transmit_FS>
		  for (int i = 0; i < strlen((char*)buffer); i++)
 800064e:	697b      	ldr	r3, [r7, #20]
 8000650:	3301      	adds	r3, #1
 8000652:	617b      	str	r3, [r7, #20]
 8000654:	480a      	ldr	r0, [pc, #40]	; (8000680 <main+0xfc>)
 8000656:	f7ff fdbb 	bl	80001d0 <strlen>
 800065a:	4602      	mov	r2, r0
 800065c:	697b      	ldr	r3, [r7, #20]
 800065e:	429a      	cmp	r2, r3
 8000660:	d8a4      	bhi.n	80005ac <main+0x28>
		  }

		  for (int i = 0; i < BUFFER_SIZE; i++)
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
 8000666:	e007      	b.n	8000678 <main+0xf4>
		  {
		  	  buffer[i] = 0;
 8000668:	4a05      	ldr	r2, [pc, #20]	; (8000680 <main+0xfc>)
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	4413      	add	r3, r2
 800066e:	2200      	movs	r2, #0
 8000670:	701a      	strb	r2, [r3, #0]
		  for (int i = 0; i < BUFFER_SIZE; i++)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	3301      	adds	r3, #1
 8000676:	60fb      	str	r3, [r7, #12]
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	2b63      	cmp	r3, #99	; 0x63
 800067c:	ddf4      	ble.n	8000668 <main+0xe4>
	  if (strlen((char*)buffer) > 0)
 800067e:	e78e      	b.n	800059e <main+0x1a>
 8000680:	2000017c 	.word	0x2000017c
 8000684:	200001e0 	.word	0x200001e0
 8000688:	40020c00 	.word	0x40020c00
 800068c:	200001e4 	.word	0x200001e4
 8000690:	08007a84 	.word	0x08007a84

08000694 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b094      	sub	sp, #80	; 0x50
 8000698:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800069a:	f107 0320 	add.w	r3, r7, #32
 800069e:	2230      	movs	r2, #48	; 0x30
 80006a0:	2100      	movs	r1, #0
 80006a2:	4618      	mov	r0, r3
 80006a4:	f006 fd58 	bl	8007158 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2200      	movs	r2, #0
 80006ae:	601a      	str	r2, [r3, #0]
 80006b0:	605a      	str	r2, [r3, #4]
 80006b2:	609a      	str	r2, [r3, #8]
 80006b4:	60da      	str	r2, [r3, #12]
 80006b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006b8:	2300      	movs	r3, #0
 80006ba:	60bb      	str	r3, [r7, #8]
 80006bc:	4b2a      	ldr	r3, [pc, #168]	; (8000768 <SystemClock_Config+0xd4>)
 80006be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c0:	4a29      	ldr	r2, [pc, #164]	; (8000768 <SystemClock_Config+0xd4>)
 80006c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006c6:	6413      	str	r3, [r2, #64]	; 0x40
 80006c8:	4b27      	ldr	r3, [pc, #156]	; (8000768 <SystemClock_Config+0xd4>)
 80006ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006d0:	60bb      	str	r3, [r7, #8]
 80006d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006d4:	2300      	movs	r3, #0
 80006d6:	607b      	str	r3, [r7, #4]
 80006d8:	4b24      	ldr	r3, [pc, #144]	; (800076c <SystemClock_Config+0xd8>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	4a23      	ldr	r2, [pc, #140]	; (800076c <SystemClock_Config+0xd8>)
 80006de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006e2:	6013      	str	r3, [r2, #0]
 80006e4:	4b21      	ldr	r3, [pc, #132]	; (800076c <SystemClock_Config+0xd8>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006ec:	607b      	str	r3, [r7, #4]
 80006ee:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 80006f0:	2303      	movs	r3, #3
 80006f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006f4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006fa:	2301      	movs	r3, #1
 80006fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006fe:	2310      	movs	r3, #16
 8000700:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000702:	2302      	movs	r3, #2
 8000704:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000706:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800070a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800070c:	2308      	movs	r3, #8
 800070e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000710:	2390      	movs	r3, #144	; 0x90
 8000712:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000714:	2304      	movs	r3, #4
 8000716:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000718:	2303      	movs	r3, #3
 800071a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800071c:	f107 0320 	add.w	r3, r7, #32
 8000720:	4618      	mov	r0, r3
 8000722:	f001 ff39 	bl	8002598 <HAL_RCC_OscConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 800072c:	f000 f86e 	bl	800080c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000730:	230f      	movs	r3, #15
 8000732:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000734:	2300      	movs	r3, #0
 8000736:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000738:	2300      	movs	r3, #0
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800073c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000740:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000742:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000746:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000748:	f107 030c 	add.w	r3, r7, #12
 800074c:	2100      	movs	r1, #0
 800074e:	4618      	mov	r0, r3
 8000750:	f002 f99a 	bl	8002a88 <HAL_RCC_ClockConfig>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800075a:	f000 f857 	bl	800080c <Error_Handler>
  }
}
 800075e:	bf00      	nop
 8000760:	3750      	adds	r7, #80	; 0x50
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40023800 	.word	0x40023800
 800076c:	40007000 	.word	0x40007000

08000770 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	b088      	sub	sp, #32
 8000774:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000776:	f107 030c 	add.w	r3, r7, #12
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]
 800077e:	605a      	str	r2, [r3, #4]
 8000780:	609a      	str	r2, [r3, #8]
 8000782:	60da      	str	r2, [r3, #12]
 8000784:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000786:	2300      	movs	r3, #0
 8000788:	60bb      	str	r3, [r7, #8]
 800078a:	4b1e      	ldr	r3, [pc, #120]	; (8000804 <MX_GPIO_Init+0x94>)
 800078c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078e:	4a1d      	ldr	r2, [pc, #116]	; (8000804 <MX_GPIO_Init+0x94>)
 8000790:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000794:	6313      	str	r3, [r2, #48]	; 0x30
 8000796:	4b1b      	ldr	r3, [pc, #108]	; (8000804 <MX_GPIO_Init+0x94>)
 8000798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800079e:	60bb      	str	r3, [r7, #8]
 80007a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007a2:	2300      	movs	r3, #0
 80007a4:	607b      	str	r3, [r7, #4]
 80007a6:	4b17      	ldr	r3, [pc, #92]	; (8000804 <MX_GPIO_Init+0x94>)
 80007a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007aa:	4a16      	ldr	r2, [pc, #88]	; (8000804 <MX_GPIO_Init+0x94>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6313      	str	r3, [r2, #48]	; 0x30
 80007b2:	4b14      	ldr	r3, [pc, #80]	; (8000804 <MX_GPIO_Init+0x94>)
 80007b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(output_GPIO_Port, output_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	2102      	movs	r1, #2
 80007c2:	4811      	ldr	r0, [pc, #68]	; (8000808 <MX_GPIO_Init+0x98>)
 80007c4:	f000 fc52 	bl	800106c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : output_Pin */
  GPIO_InitStruct.Pin = output_Pin;
 80007c8:	2302      	movs	r3, #2
 80007ca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007cc:	2301      	movs	r3, #1
 80007ce:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d0:	2300      	movs	r3, #0
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d4:	2300      	movs	r3, #0
 80007d6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(output_GPIO_Port, &GPIO_InitStruct);
 80007d8:	f107 030c 	add.w	r3, r7, #12
 80007dc:	4619      	mov	r1, r3
 80007de:	480a      	ldr	r0, [pc, #40]	; (8000808 <MX_GPIO_Init+0x98>)
 80007e0:	f000 fa90 	bl	8000d04 <HAL_GPIO_Init>

  /*Configure GPIO pin : input_Pin */
  GPIO_InitStruct.Pin = input_Pin;
 80007e4:	2320      	movs	r3, #32
 80007e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e8:	2300      	movs	r3, #0
 80007ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ec:	2300      	movs	r3, #0
 80007ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(input_GPIO_Port, &GPIO_InitStruct);
 80007f0:	f107 030c 	add.w	r3, r7, #12
 80007f4:	4619      	mov	r1, r3
 80007f6:	4804      	ldr	r0, [pc, #16]	; (8000808 <MX_GPIO_Init+0x98>)
 80007f8:	f000 fa84 	bl	8000d04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80007fc:	bf00      	nop
 80007fe:	3720      	adds	r7, #32
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000

0800080c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800080c:	b480      	push	{r7}
 800080e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000810:	b672      	cpsid	i
}
 8000812:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000814:	e7fe      	b.n	8000814 <Error_Handler+0x8>
	...

08000818 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000818:	b580      	push	{r7, lr}
 800081a:	b082      	sub	sp, #8
 800081c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	607b      	str	r3, [r7, #4]
 8000822:	4b10      	ldr	r3, [pc, #64]	; (8000864 <HAL_MspInit+0x4c>)
 8000824:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000826:	4a0f      	ldr	r2, [pc, #60]	; (8000864 <HAL_MspInit+0x4c>)
 8000828:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800082c:	6453      	str	r3, [r2, #68]	; 0x44
 800082e:	4b0d      	ldr	r3, [pc, #52]	; (8000864 <HAL_MspInit+0x4c>)
 8000830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000832:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000836:	607b      	str	r3, [r7, #4]
 8000838:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800083a:	2300      	movs	r3, #0
 800083c:	603b      	str	r3, [r7, #0]
 800083e:	4b09      	ldr	r3, [pc, #36]	; (8000864 <HAL_MspInit+0x4c>)
 8000840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000842:	4a08      	ldr	r2, [pc, #32]	; (8000864 <HAL_MspInit+0x4c>)
 8000844:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000848:	6413      	str	r3, [r2, #64]	; 0x40
 800084a:	4b06      	ldr	r3, [pc, #24]	; (8000864 <HAL_MspInit+0x4c>)
 800084c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800084e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000852:	603b      	str	r3, [r7, #0]
 8000854:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000856:	2007      	movs	r0, #7
 8000858:	f000 fa12 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800085c:	bf00      	nop
 800085e:	3708      	adds	r7, #8
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800

08000868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800086c:	e7fe      	b.n	800086c <NMI_Handler+0x4>

0800086e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800086e:	b480      	push	{r7}
 8000870:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000872:	e7fe      	b.n	8000872 <HardFault_Handler+0x4>

08000874 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <MemManage_Handler+0x4>

0800087a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <BusFault_Handler+0x4>

08000880 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <UsageFault_Handler+0x4>

08000886 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800088a:	bf00      	nop
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr

08000894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000894:	b480      	push	{r7}
 8000896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000898:	bf00      	nop
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr

080008a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008a2:	b480      	push	{r7}
 80008a4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008a6:	bf00      	nop
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008b4:	f000 f8d0 	bl	8000a58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80008b8:	bf00      	nop
 80008ba:	bd80      	pop	{r7, pc}

080008bc <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80008c0:	4802      	ldr	r0, [pc, #8]	; (80008cc <OTG_FS_IRQHandler+0x10>)
 80008c2:	f000 fd3c 	bl	800133e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80008c6:	bf00      	nop
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200016d0 	.word	0x200016d0

080008d0 <_sbrk>:
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	4a14      	ldr	r2, [pc, #80]	; (800092c <_sbrk+0x5c>)
 80008da:	4b15      	ldr	r3, [pc, #84]	; (8000930 <_sbrk+0x60>)
 80008dc:	1ad3      	subs	r3, r2, r3
 80008de:	617b      	str	r3, [r7, #20]
 80008e0:	697b      	ldr	r3, [r7, #20]
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	4b13      	ldr	r3, [pc, #76]	; (8000934 <_sbrk+0x64>)
 80008e6:	681b      	ldr	r3, [r3, #0]
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d102      	bne.n	80008f2 <_sbrk+0x22>
 80008ec:	4b11      	ldr	r3, [pc, #68]	; (8000934 <_sbrk+0x64>)
 80008ee:	4a12      	ldr	r2, [pc, #72]	; (8000938 <_sbrk+0x68>)
 80008f0:	601a      	str	r2, [r3, #0]
 80008f2:	4b10      	ldr	r3, [pc, #64]	; (8000934 <_sbrk+0x64>)
 80008f4:	681a      	ldr	r2, [r3, #0]
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	4413      	add	r3, r2
 80008fa:	693a      	ldr	r2, [r7, #16]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d207      	bcs.n	8000910 <_sbrk+0x40>
 8000900:	f006 fc00 	bl	8007104 <__errno>
 8000904:	4603      	mov	r3, r0
 8000906:	220c      	movs	r2, #12
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800090e:	e009      	b.n	8000924 <_sbrk+0x54>
 8000910:	4b08      	ldr	r3, [pc, #32]	; (8000934 <_sbrk+0x64>)
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <_sbrk+0x64>)
 8000918:	681a      	ldr	r2, [r3, #0]
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	4413      	add	r3, r2
 800091e:	4a05      	ldr	r2, [pc, #20]	; (8000934 <_sbrk+0x64>)
 8000920:	6013      	str	r3, [r2, #0]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4618      	mov	r0, r3
 8000926:	3718      	adds	r7, #24
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20020000 	.word	0x20020000
 8000930:	00000400 	.word	0x00000400
 8000934:	200001e8 	.word	0x200001e8
 8000938:	20001e10 	.word	0x20001e10

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <Reset_Handler>:
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopFillZerobss+0x12>
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopFillZerobss+0x16>)
 8000966:	490e      	ldr	r1, [pc, #56]	; (80009a0 <LoopFillZerobss+0x1a>)
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1e>)
 800096a:	2300      	movs	r3, #0
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:
 800096e:	58d4      	ldr	r4, [r2, r3]
 8000970:	50c4      	str	r4, [r0, r3]
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:
 8000974:	18c4      	adds	r4, r0, r3
 8000976:	428c      	cmp	r4, r1
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopFillZerobss+0x22>)
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <LoopFillZerobss+0x26>)
 800097e:	2300      	movs	r3, #0
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:
 8000982:	6013      	str	r3, [r2, #0]
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:
 8000986:	42a2      	cmp	r2, r4
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>
 800098a:	f7ff ffd7 	bl	800093c <SystemInit>
 800098e:	f006 fbbf 	bl	8007110 <__libc_init_array>
 8000992:	f7ff fdf7 	bl	8000584 <main>
 8000996:	4770      	bx	lr
 8000998:	20020000 	.word	0x20020000
 800099c:	20000000 	.word	0x20000000
 80009a0:	20000160 	.word	0x20000160
 80009a4:	08007b24 	.word	0x08007b24
 80009a8:	20000160 	.word	0x20000160
 80009ac:	20001e0c 	.word	0x20001e0c

080009b0 <ADC_IRQHandler>:
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <HAL_Init+0x40>)
 80009be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_Init+0x40>)
 80009ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x40>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f94f 	bl	8000c80 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	2000      	movs	r0, #0
 80009e4:	f000 f808 	bl	80009f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff ff16 	bl	8000818 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023c00 	.word	0x40023c00

080009f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b082      	sub	sp, #8
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000a00:	4b12      	ldr	r3, [pc, #72]	; (8000a4c <HAL_InitTick+0x54>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b12      	ldr	r3, [pc, #72]	; (8000a50 <HAL_InitTick+0x58>)
 8000a06:	781b      	ldrb	r3, [r3, #0]
 8000a08:	4619      	mov	r1, r3
 8000a0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a16:	4618      	mov	r0, r3
 8000a18:	f000 f967 	bl	8000cea <HAL_SYSTICK_Config>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000a22:	2301      	movs	r3, #1
 8000a24:	e00e      	b.n	8000a44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	2b0f      	cmp	r3, #15
 8000a2a:	d80a      	bhi.n	8000a42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	6879      	ldr	r1, [r7, #4]
 8000a30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a34:	f000 f92f 	bl	8000c96 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000a38:	4a06      	ldr	r2, [pc, #24]	; (8000a54 <HAL_InitTick+0x5c>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	e000      	b.n	8000a44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000a42:	2301      	movs	r3, #1
}
 8000a44:	4618      	mov	r0, r3
 8000a46:	3708      	adds	r7, #8
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	bd80      	pop	{r7, pc}
 8000a4c:	20000000 	.word	0x20000000
 8000a50:	20000008 	.word	0x20000008
 8000a54:	20000004 	.word	0x20000004

08000a58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <HAL_IncTick+0x20>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	461a      	mov	r2, r3
 8000a62:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <HAL_IncTick+0x24>)
 8000a64:	681b      	ldr	r3, [r3, #0]
 8000a66:	4413      	add	r3, r2
 8000a68:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <HAL_IncTick+0x24>)
 8000a6a:	6013      	str	r3, [r2, #0]
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	20000008 	.word	0x20000008
 8000a7c:	200001ec 	.word	0x200001ec

08000a80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return uwTick;
 8000a84:	4b03      	ldr	r3, [pc, #12]	; (8000a94 <HAL_GetTick+0x14>)
 8000a86:	681b      	ldr	r3, [r3, #0]
}
 8000a88:	4618      	mov	r0, r3
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
 8000a92:	bf00      	nop
 8000a94:	200001ec 	.word	0x200001ec

08000a98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b084      	sub	sp, #16
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000aa0:	f7ff ffee 	bl	8000a80 <HAL_GetTick>
 8000aa4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000aa6:	687b      	ldr	r3, [r7, #4]
 8000aa8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aaa:	68fb      	ldr	r3, [r7, #12]
 8000aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ab0:	d005      	beq.n	8000abe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ab2:	4b0a      	ldr	r3, [pc, #40]	; (8000adc <HAL_Delay+0x44>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	461a      	mov	r2, r3
 8000ab8:	68fb      	ldr	r3, [r7, #12]
 8000aba:	4413      	add	r3, r2
 8000abc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000abe:	bf00      	nop
 8000ac0:	f7ff ffde 	bl	8000a80 <HAL_GetTick>
 8000ac4:	4602      	mov	r2, r0
 8000ac6:	68bb      	ldr	r3, [r7, #8]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	68fa      	ldr	r2, [r7, #12]
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d8f7      	bhi.n	8000ac0 <HAL_Delay+0x28>
  {
  }
}
 8000ad0:	bf00      	nop
 8000ad2:	bf00      	nop
 8000ad4:	3710      	adds	r7, #16
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000008 	.word	0x20000008

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <__NVIC_EnableIRQ+0x38>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr
	...

08000c3c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b082      	sub	sp, #8
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c4c:	d301      	bcc.n	8000c52 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2301      	movs	r3, #1
 8000c50:	e00f      	b.n	8000c72 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c52:	4a0a      	ldr	r2, [pc, #40]	; (8000c7c <SysTick_Config+0x40>)
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	3b01      	subs	r3, #1
 8000c58:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c5a:	210f      	movs	r1, #15
 8000c5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c60:	f7ff ff8e 	bl	8000b80 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c64:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <SysTick_Config+0x40>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c6a:	4b04      	ldr	r3, [pc, #16]	; (8000c7c <SysTick_Config+0x40>)
 8000c6c:	2207      	movs	r2, #7
 8000c6e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c70:	2300      	movs	r3, #0
}
 8000c72:	4618      	mov	r0, r3
 8000c74:	3708      	adds	r7, #8
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	e000e010 	.word	0xe000e010

08000c80 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c88:	6878      	ldr	r0, [r7, #4]
 8000c8a:	f7ff ff29 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c8e:	bf00      	nop
 8000c90:	3708      	adds	r7, #8
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b086      	sub	sp, #24
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	60b9      	str	r1, [r7, #8]
 8000ca0:	607a      	str	r2, [r7, #4]
 8000ca2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ca4:	2300      	movs	r3, #0
 8000ca6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ca8:	f7ff ff3e 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000cac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cae:	687a      	ldr	r2, [r7, #4]
 8000cb0:	68b9      	ldr	r1, [r7, #8]
 8000cb2:	6978      	ldr	r0, [r7, #20]
 8000cb4:	f7ff ff8e 	bl	8000bd4 <NVIC_EncodePriority>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cbe:	4611      	mov	r1, r2
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	f7ff ff5d 	bl	8000b80 <__NVIC_SetPriority>
}
 8000cc6:	bf00      	nop
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b082      	sub	sp, #8
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff ff31 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000ce2:	bf00      	nop
 8000ce4:	3708      	adds	r7, #8
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	bd80      	pop	{r7, pc}

08000cea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000cea:	b580      	push	{r7, lr}
 8000cec:	b082      	sub	sp, #8
 8000cee:	af00      	add	r7, sp, #0
 8000cf0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000cf2:	6878      	ldr	r0, [r7, #4]
 8000cf4:	f7ff ffa2 	bl	8000c3c <SysTick_Config>
 8000cf8:	4603      	mov	r3, r0
}
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	3708      	adds	r7, #8
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	bd80      	pop	{r7, pc}
	...

08000d04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b089      	sub	sp, #36	; 0x24
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d12:	2300      	movs	r3, #0
 8000d14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d16:	2300      	movs	r3, #0
 8000d18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	61fb      	str	r3, [r7, #28]
 8000d1e:	e16b      	b.n	8000ff8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000d20:	2201      	movs	r2, #1
 8000d22:	69fb      	ldr	r3, [r7, #28]
 8000d24:	fa02 f303 	lsl.w	r3, r2, r3
 8000d28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000d2a:	683b      	ldr	r3, [r7, #0]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	697a      	ldr	r2, [r7, #20]
 8000d30:	4013      	ands	r3, r2
 8000d32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000d34:	693a      	ldr	r2, [r7, #16]
 8000d36:	697b      	ldr	r3, [r7, #20]
 8000d38:	429a      	cmp	r2, r3
 8000d3a:	f040 815a 	bne.w	8000ff2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	685b      	ldr	r3, [r3, #4]
 8000d42:	f003 0303 	and.w	r3, r3, #3
 8000d46:	2b01      	cmp	r3, #1
 8000d48:	d005      	beq.n	8000d56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	685b      	ldr	r3, [r3, #4]
 8000d4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000d52:	2b02      	cmp	r3, #2
 8000d54:	d130      	bne.n	8000db8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000d5c:	69fb      	ldr	r3, [r7, #28]
 8000d5e:	005b      	lsls	r3, r3, #1
 8000d60:	2203      	movs	r2, #3
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	43db      	mvns	r3, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4013      	ands	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000d6e:	683b      	ldr	r3, [r7, #0]
 8000d70:	68da      	ldr	r2, [r3, #12]
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	fa02 f303 	lsl.w	r3, r2, r3
 8000d7a:	69ba      	ldr	r2, [r7, #24]
 8000d7c:	4313      	orrs	r3, r2
 8000d7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	69ba      	ldr	r2, [r7, #24]
 8000d84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	685b      	ldr	r3, [r3, #4]
 8000d8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000d8c:	2201      	movs	r2, #1
 8000d8e:	69fb      	ldr	r3, [r7, #28]
 8000d90:	fa02 f303 	lsl.w	r3, r2, r3
 8000d94:	43db      	mvns	r3, r3
 8000d96:	69ba      	ldr	r2, [r7, #24]
 8000d98:	4013      	ands	r3, r2
 8000d9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000d9c:	683b      	ldr	r3, [r7, #0]
 8000d9e:	685b      	ldr	r3, [r3, #4]
 8000da0:	091b      	lsrs	r3, r3, #4
 8000da2:	f003 0201 	and.w	r2, r3, #1
 8000da6:	69fb      	ldr	r3, [r7, #28]
 8000da8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dac:	69ba      	ldr	r2, [r7, #24]
 8000dae:	4313      	orrs	r3, r2
 8000db0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	69ba      	ldr	r2, [r7, #24]
 8000db6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000db8:	683b      	ldr	r3, [r7, #0]
 8000dba:	685b      	ldr	r3, [r3, #4]
 8000dbc:	f003 0303 	and.w	r3, r3, #3
 8000dc0:	2b03      	cmp	r3, #3
 8000dc2:	d017      	beq.n	8000df4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	68db      	ldr	r3, [r3, #12]
 8000dc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	005b      	lsls	r3, r3, #1
 8000dce:	2203      	movs	r2, #3
 8000dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd4:	43db      	mvns	r3, r3
 8000dd6:	69ba      	ldr	r2, [r7, #24]
 8000dd8:	4013      	ands	r3, r2
 8000dda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000ddc:	683b      	ldr	r3, [r7, #0]
 8000dde:	689a      	ldr	r2, [r3, #8]
 8000de0:	69fb      	ldr	r3, [r7, #28]
 8000de2:	005b      	lsls	r3, r3, #1
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	69ba      	ldr	r2, [r7, #24]
 8000dea:	4313      	orrs	r3, r2
 8000dec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000df4:	683b      	ldr	r3, [r7, #0]
 8000df6:	685b      	ldr	r3, [r3, #4]
 8000df8:	f003 0303 	and.w	r3, r3, #3
 8000dfc:	2b02      	cmp	r3, #2
 8000dfe:	d123      	bne.n	8000e48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e00:	69fb      	ldr	r3, [r7, #28]
 8000e02:	08da      	lsrs	r2, r3, #3
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	3208      	adds	r2, #8
 8000e08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e0e:	69fb      	ldr	r3, [r7, #28]
 8000e10:	f003 0307 	and.w	r3, r3, #7
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	220f      	movs	r2, #15
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	691a      	ldr	r2, [r3, #16]
 8000e28:	69fb      	ldr	r3, [r7, #28]
 8000e2a:	f003 0307 	and.w	r3, r3, #7
 8000e2e:	009b      	lsls	r3, r3, #2
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	08da      	lsrs	r2, r3, #3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	3208      	adds	r2, #8
 8000e42:	69b9      	ldr	r1, [r7, #24]
 8000e44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	005b      	lsls	r3, r3, #1
 8000e52:	2203      	movs	r2, #3
 8000e54:	fa02 f303 	lsl.w	r3, r2, r3
 8000e58:	43db      	mvns	r3, r3
 8000e5a:	69ba      	ldr	r2, [r7, #24]
 8000e5c:	4013      	ands	r3, r2
 8000e5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0203 	and.w	r2, r3, #3
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	f000 80b4 	beq.w	8000ff2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60fb      	str	r3, [r7, #12]
 8000e8e:	4b60      	ldr	r3, [pc, #384]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e92:	4a5f      	ldr	r2, [pc, #380]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e98:	6453      	str	r3, [r2, #68]	; 0x44
 8000e9a:	4b5d      	ldr	r3, [pc, #372]	; (8001010 <HAL_GPIO_Init+0x30c>)
 8000e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000ea6:	4a5b      	ldr	r2, [pc, #364]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000ea8:	69fb      	ldr	r3, [r7, #28]
 8000eaa:	089b      	lsrs	r3, r3, #2
 8000eac:	3302      	adds	r3, #2
 8000eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	f003 0303 	and.w	r3, r3, #3
 8000eba:	009b      	lsls	r3, r3, #2
 8000ebc:	220f      	movs	r2, #15
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	43db      	mvns	r3, r3
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4a52      	ldr	r2, [pc, #328]	; (8001018 <HAL_GPIO_Init+0x314>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d02b      	beq.n	8000f2a <HAL_GPIO_Init+0x226>
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	4a51      	ldr	r2, [pc, #324]	; (800101c <HAL_GPIO_Init+0x318>)
 8000ed6:	4293      	cmp	r3, r2
 8000ed8:	d025      	beq.n	8000f26 <HAL_GPIO_Init+0x222>
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	4a50      	ldr	r2, [pc, #320]	; (8001020 <HAL_GPIO_Init+0x31c>)
 8000ede:	4293      	cmp	r3, r2
 8000ee0:	d01f      	beq.n	8000f22 <HAL_GPIO_Init+0x21e>
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	4a4f      	ldr	r2, [pc, #316]	; (8001024 <HAL_GPIO_Init+0x320>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d019      	beq.n	8000f1e <HAL_GPIO_Init+0x21a>
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	4a4e      	ldr	r2, [pc, #312]	; (8001028 <HAL_GPIO_Init+0x324>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d013      	beq.n	8000f1a <HAL_GPIO_Init+0x216>
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	4a4d      	ldr	r2, [pc, #308]	; (800102c <HAL_GPIO_Init+0x328>)
 8000ef6:	4293      	cmp	r3, r2
 8000ef8:	d00d      	beq.n	8000f16 <HAL_GPIO_Init+0x212>
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	4a4c      	ldr	r2, [pc, #304]	; (8001030 <HAL_GPIO_Init+0x32c>)
 8000efe:	4293      	cmp	r3, r2
 8000f00:	d007      	beq.n	8000f12 <HAL_GPIO_Init+0x20e>
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	4a4b      	ldr	r2, [pc, #300]	; (8001034 <HAL_GPIO_Init+0x330>)
 8000f06:	4293      	cmp	r3, r2
 8000f08:	d101      	bne.n	8000f0e <HAL_GPIO_Init+0x20a>
 8000f0a:	2307      	movs	r3, #7
 8000f0c:	e00e      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f0e:	2308      	movs	r3, #8
 8000f10:	e00c      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f12:	2306      	movs	r3, #6
 8000f14:	e00a      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f16:	2305      	movs	r3, #5
 8000f18:	e008      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1a:	2304      	movs	r3, #4
 8000f1c:	e006      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f1e:	2303      	movs	r3, #3
 8000f20:	e004      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f22:	2302      	movs	r3, #2
 8000f24:	e002      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f26:	2301      	movs	r3, #1
 8000f28:	e000      	b.n	8000f2c <HAL_GPIO_Init+0x228>
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	69fa      	ldr	r2, [r7, #28]
 8000f2e:	f002 0203 	and.w	r2, r2, #3
 8000f32:	0092      	lsls	r2, r2, #2
 8000f34:	4093      	lsls	r3, r2
 8000f36:	69ba      	ldr	r2, [r7, #24]
 8000f38:	4313      	orrs	r3, r2
 8000f3a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000f3c:	4935      	ldr	r1, [pc, #212]	; (8001014 <HAL_GPIO_Init+0x310>)
 8000f3e:	69fb      	ldr	r3, [r7, #28]
 8000f40:	089b      	lsrs	r3, r3, #2
 8000f42:	3302      	adds	r3, #2
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000f4a:	4b3b      	ldr	r3, [pc, #236]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f4c:	689b      	ldr	r3, [r3, #8]
 8000f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f50:	693b      	ldr	r3, [r7, #16]
 8000f52:	43db      	mvns	r3, r3
 8000f54:	69ba      	ldr	r2, [r7, #24]
 8000f56:	4013      	ands	r3, r2
 8000f58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d003      	beq.n	8000f6e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	693b      	ldr	r3, [r7, #16]
 8000f6a:	4313      	orrs	r3, r2
 8000f6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000f6e:	4a32      	ldr	r2, [pc, #200]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f70:	69bb      	ldr	r3, [r7, #24]
 8000f72:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000f74:	4b30      	ldr	r3, [pc, #192]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f76:	68db      	ldr	r3, [r3, #12]
 8000f78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000f7a:	693b      	ldr	r3, [r7, #16]
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d003      	beq.n	8000f98 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	693b      	ldr	r3, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000f98:	4a27      	ldr	r2, [pc, #156]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000f9a:	69bb      	ldr	r3, [r7, #24]
 8000f9c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000f9e:	4b26      	ldr	r3, [pc, #152]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	69ba      	ldr	r2, [r7, #24]
 8000faa:	4013      	ands	r3, r2
 8000fac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d003      	beq.n	8000fc2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000fc2:	4a1d      	ldr	r2, [pc, #116]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000fc8:	4b1b      	ldr	r3, [pc, #108]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	43db      	mvns	r3, r3
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	4313      	orrs	r3, r2
 8000fea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000fec:	4a12      	ldr	r2, [pc, #72]	; (8001038 <HAL_GPIO_Init+0x334>)
 8000fee:	69bb      	ldr	r3, [r7, #24]
 8000ff0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	3301      	adds	r3, #1
 8000ff6:	61fb      	str	r3, [r7, #28]
 8000ff8:	69fb      	ldr	r3, [r7, #28]
 8000ffa:	2b0f      	cmp	r3, #15
 8000ffc:	f67f ae90 	bls.w	8000d20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001000:	bf00      	nop
 8001002:	bf00      	nop
 8001004:	3724      	adds	r7, #36	; 0x24
 8001006:	46bd      	mov	sp, r7
 8001008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100c:	4770      	bx	lr
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800
 8001014:	40013800 	.word	0x40013800
 8001018:	40020000 	.word	0x40020000
 800101c:	40020400 	.word	0x40020400
 8001020:	40020800 	.word	0x40020800
 8001024:	40020c00 	.word	0x40020c00
 8001028:	40021000 	.word	0x40021000
 800102c:	40021400 	.word	0x40021400
 8001030:	40021800 	.word	0x40021800
 8001034:	40021c00 	.word	0x40021c00
 8001038:	40013c00 	.word	0x40013c00

0800103c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800103c:	b480      	push	{r7}
 800103e:	b085      	sub	sp, #20
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	460b      	mov	r3, r1
 8001046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	691a      	ldr	r2, [r3, #16]
 800104c:	887b      	ldrh	r3, [r7, #2]
 800104e:	4013      	ands	r3, r2
 8001050:	2b00      	cmp	r3, #0
 8001052:	d002      	beq.n	800105a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001054:	2301      	movs	r3, #1
 8001056:	73fb      	strb	r3, [r7, #15]
 8001058:	e001      	b.n	800105e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800105e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001060:	4618      	mov	r0, r3
 8001062:	3714      	adds	r7, #20
 8001064:	46bd      	mov	sp, r7
 8001066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106a:	4770      	bx	lr

0800106c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	460b      	mov	r3, r1
 8001076:	807b      	strh	r3, [r7, #2]
 8001078:	4613      	mov	r3, r2
 800107a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800107c:	787b      	ldrb	r3, [r7, #1]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d003      	beq.n	800108a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001082:	887a      	ldrh	r2, [r7, #2]
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001088:	e003      	b.n	8001092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800108a:	887b      	ldrh	r3, [r7, #2]
 800108c:	041a      	lsls	r2, r3, #16
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	619a      	str	r2, [r3, #24]
}
 8001092:	bf00      	nop
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr

0800109e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800109e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010a0:	b08f      	sub	sp, #60	; 0x3c
 80010a2:	af0a      	add	r7, sp, #40	; 0x28
 80010a4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d101      	bne.n	80010b0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80010ac:	2301      	movs	r3, #1
 80010ae:	e10f      	b.n	80012d0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80010bc:	b2db      	uxtb	r3, r3
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d106      	bne.n	80010d0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2200      	movs	r2, #0
 80010c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f005 fd06 	bl	8006adc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2203      	movs	r2, #3
 80010d4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80010dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d102      	bne.n	80010ea <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	4618      	mov	r0, r3
 80010f0:	f001 ffd7 	bl	80030a2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	603b      	str	r3, [r7, #0]
 80010fa:	687e      	ldr	r6, [r7, #4]
 80010fc:	466d      	mov	r5, sp
 80010fe:	f106 0410 	add.w	r4, r6, #16
 8001102:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001104:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001106:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001108:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800110a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800110e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001112:	1d33      	adds	r3, r6, #4
 8001114:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001116:	6838      	ldr	r0, [r7, #0]
 8001118:	f001 feae 	bl	8002e78 <USB_CoreInit>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d005      	beq.n	800112e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	2202      	movs	r2, #2
 8001126:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800112a:	2301      	movs	r3, #1
 800112c:	e0d0      	b.n	80012d0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	2100      	movs	r1, #0
 8001134:	4618      	mov	r0, r3
 8001136:	f001 ffc5 	bl	80030c4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e04a      	b.n	80011d6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001140:	7bfa      	ldrb	r2, [r7, #15]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	4613      	mov	r3, r2
 8001146:	00db      	lsls	r3, r3, #3
 8001148:	4413      	add	r3, r2
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	440b      	add	r3, r1
 800114e:	333d      	adds	r3, #61	; 0x3d
 8001150:	2201      	movs	r2, #1
 8001152:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001154:	7bfa      	ldrb	r2, [r7, #15]
 8001156:	6879      	ldr	r1, [r7, #4]
 8001158:	4613      	mov	r3, r2
 800115a:	00db      	lsls	r3, r3, #3
 800115c:	4413      	add	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	440b      	add	r3, r1
 8001162:	333c      	adds	r3, #60	; 0x3c
 8001164:	7bfa      	ldrb	r2, [r7, #15]
 8001166:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001168:	7bfa      	ldrb	r2, [r7, #15]
 800116a:	7bfb      	ldrb	r3, [r7, #15]
 800116c:	b298      	uxth	r0, r3
 800116e:	6879      	ldr	r1, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	4413      	add	r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3344      	adds	r3, #68	; 0x44
 800117c:	4602      	mov	r2, r0
 800117e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001180:	7bfa      	ldrb	r2, [r7, #15]
 8001182:	6879      	ldr	r1, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	4413      	add	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	3340      	adds	r3, #64	; 0x40
 8001190:	2200      	movs	r2, #0
 8001192:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001194:	7bfa      	ldrb	r2, [r7, #15]
 8001196:	6879      	ldr	r1, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	4413      	add	r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3348      	adds	r3, #72	; 0x48
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80011a8:	7bfa      	ldrb	r2, [r7, #15]
 80011aa:	6879      	ldr	r1, [r7, #4]
 80011ac:	4613      	mov	r3, r2
 80011ae:	00db      	lsls	r3, r3, #3
 80011b0:	4413      	add	r3, r2
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	440b      	add	r3, r1
 80011b6:	334c      	adds	r3, #76	; 0x4c
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80011bc:	7bfa      	ldrb	r2, [r7, #15]
 80011be:	6879      	ldr	r1, [r7, #4]
 80011c0:	4613      	mov	r3, r2
 80011c2:	00db      	lsls	r3, r3, #3
 80011c4:	4413      	add	r3, r2
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	440b      	add	r3, r1
 80011ca:	3354      	adds	r3, #84	; 0x54
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011d0:	7bfb      	ldrb	r3, [r7, #15]
 80011d2:	3301      	adds	r3, #1
 80011d4:	73fb      	strb	r3, [r7, #15]
 80011d6:	7bfa      	ldrb	r2, [r7, #15]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	685b      	ldr	r3, [r3, #4]
 80011dc:	429a      	cmp	r2, r3
 80011de:	d3af      	bcc.n	8001140 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80011e0:	2300      	movs	r3, #0
 80011e2:	73fb      	strb	r3, [r7, #15]
 80011e4:	e044      	b.n	8001270 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80011e6:	7bfa      	ldrb	r2, [r7, #15]
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80011fc:	7bfa      	ldrb	r2, [r7, #15]
 80011fe:	6879      	ldr	r1, [r7, #4]
 8001200:	4613      	mov	r3, r2
 8001202:	00db      	lsls	r3, r3, #3
 8001204:	4413      	add	r3, r2
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	440b      	add	r3, r1
 800120a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800120e:	7bfa      	ldrb	r2, [r7, #15]
 8001210:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001212:	7bfa      	ldrb	r2, [r7, #15]
 8001214:	6879      	ldr	r1, [r7, #4]
 8001216:	4613      	mov	r3, r2
 8001218:	00db      	lsls	r3, r3, #3
 800121a:	4413      	add	r3, r2
 800121c:	009b      	lsls	r3, r3, #2
 800121e:	440b      	add	r3, r1
 8001220:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001224:	2200      	movs	r2, #0
 8001226:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001228:	7bfa      	ldrb	r2, [r7, #15]
 800122a:	6879      	ldr	r1, [r7, #4]
 800122c:	4613      	mov	r3, r2
 800122e:	00db      	lsls	r3, r3, #3
 8001230:	4413      	add	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	440b      	add	r3, r1
 8001236:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800123a:	2200      	movs	r2, #0
 800123c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800123e:	7bfa      	ldrb	r2, [r7, #15]
 8001240:	6879      	ldr	r1, [r7, #4]
 8001242:	4613      	mov	r3, r2
 8001244:	00db      	lsls	r3, r3, #3
 8001246:	4413      	add	r3, r2
 8001248:	009b      	lsls	r3, r3, #2
 800124a:	440b      	add	r3, r1
 800124c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	4613      	mov	r3, r2
 800125a:	00db      	lsls	r3, r3, #3
 800125c:	4413      	add	r3, r2
 800125e:	009b      	lsls	r3, r3, #2
 8001260:	440b      	add	r3, r1
 8001262:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	3301      	adds	r3, #1
 800126e:	73fb      	strb	r3, [r7, #15]
 8001270:	7bfa      	ldrb	r2, [r7, #15]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	685b      	ldr	r3, [r3, #4]
 8001276:	429a      	cmp	r2, r3
 8001278:	d3b5      	bcc.n	80011e6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	687e      	ldr	r6, [r7, #4]
 8001282:	466d      	mov	r5, sp
 8001284:	f106 0410 	add.w	r4, r6, #16
 8001288:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800128c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800128e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001290:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001294:	e885 0003 	stmia.w	r5, {r0, r1}
 8001298:	1d33      	adds	r3, r6, #4
 800129a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f001 ff5d 	bl	800315c <USB_DevInit>
 80012a2:	4603      	mov	r3, r0
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d005      	beq.n	80012b4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	2202      	movs	r2, #2
 80012ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	e00d      	b.n	80012d0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	2200      	movs	r2, #0
 80012b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f003 f8ac 	bl	8004426 <USB_DevDisconnect>

  return HAL_OK;
 80012ce:	2300      	movs	r3, #0
}
 80012d0:	4618      	mov	r0, r3
 80012d2:	3714      	adds	r7, #20
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080012d8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b084      	sub	sp, #16
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80012ec:	2b01      	cmp	r3, #1
 80012ee:	d101      	bne.n	80012f4 <HAL_PCD_Start+0x1c>
 80012f0:	2302      	movs	r3, #2
 80012f2:	e020      	b.n	8001336 <HAL_PCD_Start+0x5e>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2201      	movs	r2, #1
 80012f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001300:	2b01      	cmp	r3, #1
 8001302:	d109      	bne.n	8001318 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001308:	2b01      	cmp	r3, #1
 800130a:	d005      	beq.n	8001318 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001310:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	4618      	mov	r0, r3
 800131e:	f001 feaf 	bl	8003080 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4618      	mov	r0, r3
 8001328:	f003 f85c 	bl	80043e4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	2200      	movs	r2, #0
 8001330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001334:	2300      	movs	r3, #0
}
 8001336:	4618      	mov	r0, r3
 8001338:	3710      	adds	r7, #16
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}

0800133e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800133e:	b590      	push	{r4, r7, lr}
 8001340:	b08d      	sub	sp, #52	; 0x34
 8001342:	af00      	add	r7, sp, #0
 8001344:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800134c:	6a3b      	ldr	r3, [r7, #32]
 800134e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f003 f91a 	bl	800458e <USB_GetMode>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	f040 848a 	bne.w	8001c76 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f003 f87e 	bl	8004468 <USB_ReadInterrupts>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	f000 8480 	beq.w	8001c74 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4618      	mov	r0, r3
 800138e:	f003 f86b 	bl	8004468 <USB_ReadInterrupts>
 8001392:	4603      	mov	r3, r0
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	2b02      	cmp	r3, #2
 800139a:	d107      	bne.n	80013ac <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	695a      	ldr	r2, [r3, #20]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f002 0202 	and.w	r2, r2, #2
 80013aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4618      	mov	r0, r3
 80013b2:	f003 f859 	bl	8004468 <USB_ReadInterrupts>
 80013b6:	4603      	mov	r3, r0
 80013b8:	f003 0310 	and.w	r3, r3, #16
 80013bc:	2b10      	cmp	r3, #16
 80013be:	d161      	bne.n	8001484 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	699a      	ldr	r2, [r3, #24]
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f022 0210 	bic.w	r2, r2, #16
 80013ce:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 80013d0:	6a3b      	ldr	r3, [r7, #32]
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 80013d6:	69bb      	ldr	r3, [r7, #24]
 80013d8:	f003 020f 	and.w	r2, r3, #15
 80013dc:	4613      	mov	r3, r2
 80013de:	00db      	lsls	r3, r3, #3
 80013e0:	4413      	add	r3, r2
 80013e2:	009b      	lsls	r3, r3, #2
 80013e4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80013e8:	687a      	ldr	r2, [r7, #4]
 80013ea:	4413      	add	r3, r2
 80013ec:	3304      	adds	r3, #4
 80013ee:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 80013f0:	69bb      	ldr	r3, [r7, #24]
 80013f2:	0c5b      	lsrs	r3, r3, #17
 80013f4:	f003 030f 	and.w	r3, r3, #15
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d124      	bne.n	8001446 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 80013fc:	69ba      	ldr	r2, [r7, #24]
 80013fe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001402:	4013      	ands	r3, r2
 8001404:	2b00      	cmp	r3, #0
 8001406:	d035      	beq.n	8001474 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001408:	697b      	ldr	r3, [r7, #20]
 800140a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800140c:	69bb      	ldr	r3, [r7, #24]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001412:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001416:	b29b      	uxth	r3, r3
 8001418:	461a      	mov	r2, r3
 800141a:	6a38      	ldr	r0, [r7, #32]
 800141c:	f002 fe90 	bl	8004140 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	691a      	ldr	r2, [r3, #16]
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	091b      	lsrs	r3, r3, #4
 8001428:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800142c:	441a      	add	r2, r3
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001432:	697b      	ldr	r3, [r7, #20]
 8001434:	6a1a      	ldr	r2, [r3, #32]
 8001436:	69bb      	ldr	r3, [r7, #24]
 8001438:	091b      	lsrs	r3, r3, #4
 800143a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800143e:	441a      	add	r2, r3
 8001440:	697b      	ldr	r3, [r7, #20]
 8001442:	621a      	str	r2, [r3, #32]
 8001444:	e016      	b.n	8001474 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	0c5b      	lsrs	r3, r3, #17
 800144a:	f003 030f 	and.w	r3, r3, #15
 800144e:	2b06      	cmp	r3, #6
 8001450:	d110      	bne.n	8001474 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001458:	2208      	movs	r2, #8
 800145a:	4619      	mov	r1, r3
 800145c:	6a38      	ldr	r0, [r7, #32]
 800145e:	f002 fe6f 	bl	8004140 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	6a1a      	ldr	r2, [r3, #32]
 8001466:	69bb      	ldr	r3, [r7, #24]
 8001468:	091b      	lsrs	r3, r3, #4
 800146a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800146e:	441a      	add	r2, r3
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	699a      	ldr	r2, [r3, #24]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f042 0210 	orr.w	r2, r2, #16
 8001482:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4618      	mov	r0, r3
 800148a:	f002 ffed 	bl	8004468 <USB_ReadInterrupts>
 800148e:	4603      	mov	r3, r0
 8001490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001494:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001498:	f040 80a7 	bne.w	80015ea <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800149c:	2300      	movs	r3, #0
 800149e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f002 fff2 	bl	800448e <USB_ReadDevAllOutEpInterrupt>
 80014aa:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80014ac:	e099      	b.n	80015e2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80014ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014b0:	f003 0301 	and.w	r3, r3, #1
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	f000 808e 	beq.w	80015d6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80014c0:	b2d2      	uxtb	r2, r2
 80014c2:	4611      	mov	r1, r2
 80014c4:	4618      	mov	r0, r3
 80014c6:	f003 f816 	bl	80044f6 <USB_ReadDevOutEPInterrupt>
 80014ca:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	f003 0301 	and.w	r3, r3, #1
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d00c      	beq.n	80014f0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 80014d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014d8:	015a      	lsls	r2, r3, #5
 80014da:	69fb      	ldr	r3, [r7, #28]
 80014dc:	4413      	add	r3, r2
 80014de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80014e2:	461a      	mov	r2, r3
 80014e4:	2301      	movs	r3, #1
 80014e6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 80014e8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80014ea:	6878      	ldr	r0, [r7, #4]
 80014ec:	f000 fec2 	bl	8002274 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	f003 0308 	and.w	r3, r3, #8
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d00c      	beq.n	8001514 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 80014fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014fc:	015a      	lsls	r2, r3, #5
 80014fe:	69fb      	ldr	r3, [r7, #28]
 8001500:	4413      	add	r3, r2
 8001502:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001506:	461a      	mov	r2, r3
 8001508:	2308      	movs	r3, #8
 800150a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800150c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800150e:	6878      	ldr	r0, [r7, #4]
 8001510:	f000 ff98 	bl	8002444 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	f003 0310 	and.w	r3, r3, #16
 800151a:	2b00      	cmp	r3, #0
 800151c:	d008      	beq.n	8001530 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800151e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001520:	015a      	lsls	r2, r3, #5
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	4413      	add	r3, r2
 8001526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800152a:	461a      	mov	r2, r3
 800152c:	2310      	movs	r3, #16
 800152e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	f003 0302 	and.w	r3, r3, #2
 8001536:	2b00      	cmp	r3, #0
 8001538:	d030      	beq.n	800159c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	695b      	ldr	r3, [r3, #20]
 800153e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001542:	2b80      	cmp	r3, #128	; 0x80
 8001544:	d109      	bne.n	800155a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	69fa      	ldr	r2, [r7, #28]
 8001550:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001554:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001558:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800155a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800155c:	4613      	mov	r3, r2
 800155e:	00db      	lsls	r3, r3, #3
 8001560:	4413      	add	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	4413      	add	r3, r2
 800156c:	3304      	adds	r3, #4
 800156e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	78db      	ldrb	r3, [r3, #3]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d108      	bne.n	800158a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001578:	697b      	ldr	r3, [r7, #20]
 800157a:	2200      	movs	r2, #0
 800157c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	b2db      	uxtb	r3, r3
 8001582:	4619      	mov	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f005 fbaf 	bl	8006ce8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800158a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800158c:	015a      	lsls	r2, r3, #5
 800158e:	69fb      	ldr	r3, [r7, #28]
 8001590:	4413      	add	r3, r2
 8001592:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001596:	461a      	mov	r2, r3
 8001598:	2302      	movs	r3, #2
 800159a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	f003 0320 	and.w	r3, r3, #32
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d008      	beq.n	80015b8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80015a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015a8:	015a      	lsls	r2, r3, #5
 80015aa:	69fb      	ldr	r3, [r7, #28]
 80015ac:	4413      	add	r3, r2
 80015ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015b2:	461a      	mov	r2, r3
 80015b4:	2320      	movs	r3, #32
 80015b6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d009      	beq.n	80015d6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80015c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c4:	015a      	lsls	r2, r3, #5
 80015c6:	69fb      	ldr	r3, [r7, #28]
 80015c8:	4413      	add	r3, r2
 80015ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80015ce:	461a      	mov	r2, r3
 80015d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015d4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	3301      	adds	r3, #1
 80015da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80015dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015de:	085b      	lsrs	r3, r3, #1
 80015e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80015e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	f47f af62 	bne.w	80014ae <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f002 ff3a 	bl	8004468 <USB_ReadInterrupts>
 80015f4:	4603      	mov	r3, r0
 80015f6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015fa:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80015fe:	f040 80db 	bne.w	80017b8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	4618      	mov	r0, r3
 8001608:	f002 ff5b 	bl	80044c2 <USB_ReadDevAllInEpInterrupt>
 800160c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001612:	e0cd      	b.n	80017b0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001616:	f003 0301 	and.w	r3, r3, #1
 800161a:	2b00      	cmp	r3, #0
 800161c:	f000 80c2 	beq.w	80017a4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	4611      	mov	r1, r2
 800162a:	4618      	mov	r0, r3
 800162c:	f002 ff81 	bl	8004532 <USB_ReadDevInEPInterrupt>
 8001630:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	f003 0301 	and.w	r3, r3, #1
 8001638:	2b00      	cmp	r3, #0
 800163a:	d057      	beq.n	80016ec <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800163c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800163e:	f003 030f 	and.w	r3, r3, #15
 8001642:	2201      	movs	r2, #1
 8001644:	fa02 f303 	lsl.w	r3, r2, r3
 8001648:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001650:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	43db      	mvns	r3, r3
 8001656:	69f9      	ldr	r1, [r7, #28]
 8001658:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800165c:	4013      	ands	r3, r2
 800165e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	015a      	lsls	r2, r3, #5
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	4413      	add	r3, r2
 8001668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800166c:	461a      	mov	r2, r3
 800166e:	2301      	movs	r3, #1
 8001670:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	691b      	ldr	r3, [r3, #16]
 8001676:	2b01      	cmp	r3, #1
 8001678:	d132      	bne.n	80016e0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800167a:	6879      	ldr	r1, [r7, #4]
 800167c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800167e:	4613      	mov	r3, r2
 8001680:	00db      	lsls	r3, r3, #3
 8001682:	4413      	add	r3, r2
 8001684:	009b      	lsls	r3, r3, #2
 8001686:	440b      	add	r3, r1
 8001688:	334c      	adds	r3, #76	; 0x4c
 800168a:	6819      	ldr	r1, [r3, #0]
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001690:	4613      	mov	r3, r2
 8001692:	00db      	lsls	r3, r3, #3
 8001694:	4413      	add	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4403      	add	r3, r0
 800169a:	3348      	adds	r3, #72	; 0x48
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4419      	add	r1, r3
 80016a0:	6878      	ldr	r0, [r7, #4]
 80016a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016a4:	4613      	mov	r3, r2
 80016a6:	00db      	lsls	r3, r3, #3
 80016a8:	4413      	add	r3, r2
 80016aa:	009b      	lsls	r3, r3, #2
 80016ac:	4403      	add	r3, r0
 80016ae:	334c      	adds	r3, #76	; 0x4c
 80016b0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80016b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d113      	bne.n	80016e0 <HAL_PCD_IRQHandler+0x3a2>
 80016b8:	6879      	ldr	r1, [r7, #4]
 80016ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80016bc:	4613      	mov	r3, r2
 80016be:	00db      	lsls	r3, r3, #3
 80016c0:	4413      	add	r3, r2
 80016c2:	009b      	lsls	r3, r3, #2
 80016c4:	440b      	add	r3, r1
 80016c6:	3354      	adds	r3, #84	; 0x54
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d108      	bne.n	80016e0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6818      	ldr	r0, [r3, #0]
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80016d8:	461a      	mov	r2, r3
 80016da:	2101      	movs	r1, #1
 80016dc:	f002 ff88 	bl	80045f0 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80016e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e2:	b2db      	uxtb	r3, r3
 80016e4:	4619      	mov	r1, r3
 80016e6:	6878      	ldr	r0, [r7, #4]
 80016e8:	f005 fa79 	bl	8006bde <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80016ec:	693b      	ldr	r3, [r7, #16]
 80016ee:	f003 0308 	and.w	r3, r3, #8
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d008      	beq.n	8001708 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80016f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f8:	015a      	lsls	r2, r3, #5
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	4413      	add	r3, r2
 80016fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001702:	461a      	mov	r2, r3
 8001704:	2308      	movs	r3, #8
 8001706:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	f003 0310 	and.w	r3, r3, #16
 800170e:	2b00      	cmp	r3, #0
 8001710:	d008      	beq.n	8001724 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001714:	015a      	lsls	r2, r3, #5
 8001716:	69fb      	ldr	r3, [r7, #28]
 8001718:	4413      	add	r3, r2
 800171a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800171e:	461a      	mov	r2, r3
 8001720:	2310      	movs	r3, #16
 8001722:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001724:	693b      	ldr	r3, [r7, #16]
 8001726:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800172a:	2b00      	cmp	r3, #0
 800172c:	d008      	beq.n	8001740 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800172e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001730:	015a      	lsls	r2, r3, #5
 8001732:	69fb      	ldr	r3, [r7, #28]
 8001734:	4413      	add	r3, r2
 8001736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800173a:	461a      	mov	r2, r3
 800173c:	2340      	movs	r3, #64	; 0x40
 800173e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	d023      	beq.n	8001792 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800174a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800174c:	6a38      	ldr	r0, [r7, #32]
 800174e:	f001 fe69 	bl	8003424 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001752:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001754:	4613      	mov	r3, r2
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4413      	add	r3, r2
 800175a:	009b      	lsls	r3, r3, #2
 800175c:	3338      	adds	r3, #56	; 0x38
 800175e:	687a      	ldr	r2, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	3304      	adds	r3, #4
 8001764:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001766:	697b      	ldr	r3, [r7, #20]
 8001768:	78db      	ldrb	r3, [r3, #3]
 800176a:	2b01      	cmp	r3, #1
 800176c:	d108      	bne.n	8001780 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2200      	movs	r2, #0
 8001772:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001774:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001776:	b2db      	uxtb	r3, r3
 8001778:	4619      	mov	r1, r3
 800177a:	6878      	ldr	r0, [r7, #4]
 800177c:	f005 fac6 	bl	8006d0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001782:	015a      	lsls	r2, r3, #5
 8001784:	69fb      	ldr	r3, [r7, #28]
 8001786:	4413      	add	r3, r2
 8001788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800178c:	461a      	mov	r2, r3
 800178e:	2302      	movs	r3, #2
 8001790:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001798:	2b00      	cmp	r3, #0
 800179a:	d003      	beq.n	80017a4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800179c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800179e:	6878      	ldr	r0, [r7, #4]
 80017a0:	f000 fcdb 	bl	800215a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80017a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017a6:	3301      	adds	r3, #1
 80017a8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80017aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80017b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	f47f af2e 	bne.w	8001614 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	4618      	mov	r0, r3
 80017be:	f002 fe53 	bl	8004468 <USB_ReadInterrupts>
 80017c2:	4603      	mov	r3, r0
 80017c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80017c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80017cc:	d122      	bne.n	8001814 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017d4:	685b      	ldr	r3, [r3, #4]
 80017d6:	69fa      	ldr	r2, [r7, #28]
 80017d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80017dc:	f023 0301 	bic.w	r3, r3, #1
 80017e0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d108      	bne.n	80017fe <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80017f4:	2100      	movs	r1, #0
 80017f6:	6878      	ldr	r0, [r7, #4]
 80017f8:	f000 fec2 	bl	8002580 <HAL_PCDEx_LPM_Callback>
 80017fc:	e002      	b.n	8001804 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f005 fa64 	bl	8006ccc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	695a      	ldr	r2, [r3, #20]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001812:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f002 fe25 	bl	8004468 <USB_ReadInterrupts>
 800181e:	4603      	mov	r3, r0
 8001820:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001824:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001828:	d112      	bne.n	8001850 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800182a:	69fb      	ldr	r3, [r7, #28]
 800182c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001830:	689b      	ldr	r3, [r3, #8]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b01      	cmp	r3, #1
 8001838:	d102      	bne.n	8001840 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f005 fa20 	bl	8006c80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	695a      	ldr	r2, [r3, #20]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800184e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	4618      	mov	r0, r3
 8001856:	f002 fe07 	bl	8004468 <USB_ReadInterrupts>
 800185a:	4603      	mov	r3, r0
 800185c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001860:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001864:	f040 80b7 	bne.w	80019d6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001868:	69fb      	ldr	r3, [r7, #28]
 800186a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	69fa      	ldr	r2, [r7, #28]
 8001872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001876:	f023 0301 	bic.w	r3, r3, #1
 800187a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	2110      	movs	r1, #16
 8001882:	4618      	mov	r0, r3
 8001884:	f001 fdce 	bl	8003424 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001888:	2300      	movs	r3, #0
 800188a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800188c:	e046      	b.n	800191c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800188e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001890:	015a      	lsls	r2, r3, #5
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	4413      	add	r3, r2
 8001896:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800189a:	461a      	mov	r2, r3
 800189c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018a0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80018a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018a4:	015a      	lsls	r2, r3, #5
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	4413      	add	r3, r2
 80018aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018b2:	0151      	lsls	r1, r2, #5
 80018b4:	69fa      	ldr	r2, [r7, #28]
 80018b6:	440a      	add	r2, r1
 80018b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80018bc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018c0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80018c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018c4:	015a      	lsls	r2, r3, #5
 80018c6:	69fb      	ldr	r3, [r7, #28]
 80018c8:	4413      	add	r3, r2
 80018ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018ce:	461a      	mov	r2, r3
 80018d0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80018d4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80018d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018d8:	015a      	lsls	r2, r3, #5
 80018da:	69fb      	ldr	r3, [r7, #28]
 80018dc:	4413      	add	r3, r2
 80018de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80018e6:	0151      	lsls	r1, r2, #5
 80018e8:	69fa      	ldr	r2, [r7, #28]
 80018ea:	440a      	add	r2, r1
 80018ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80018f0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80018f4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80018f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80018f8:	015a      	lsls	r2, r3, #5
 80018fa:	69fb      	ldr	r3, [r7, #28]
 80018fc:	4413      	add	r3, r2
 80018fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001906:	0151      	lsls	r1, r2, #5
 8001908:	69fa      	ldr	r2, [r7, #28]
 800190a:	440a      	add	r2, r1
 800190c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8001910:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001914:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001918:	3301      	adds	r3, #1
 800191a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001922:	429a      	cmp	r2, r3
 8001924:	d3b3      	bcc.n	800188e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001926:	69fb      	ldr	r3, [r7, #28]
 8001928:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800192c:	69db      	ldr	r3, [r3, #28]
 800192e:	69fa      	ldr	r2, [r7, #28]
 8001930:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001934:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8001938:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193e:	2b00      	cmp	r3, #0
 8001940:	d016      	beq.n	8001970 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001948:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800194c:	69fa      	ldr	r2, [r7, #28]
 800194e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001952:	f043 030b 	orr.w	r3, r3, #11
 8001956:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001962:	69fa      	ldr	r2, [r7, #28]
 8001964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001968:	f043 030b 	orr.w	r3, r3, #11
 800196c:	6453      	str	r3, [r2, #68]	; 0x44
 800196e:	e015      	b.n	800199c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001976:	695b      	ldr	r3, [r3, #20]
 8001978:	69fa      	ldr	r2, [r7, #28]
 800197a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800197e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001982:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8001986:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001988:	69fb      	ldr	r3, [r7, #28]
 800198a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800198e:	691b      	ldr	r3, [r3, #16]
 8001990:	69fa      	ldr	r2, [r7, #28]
 8001992:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001996:	f043 030b 	orr.w	r3, r3, #11
 800199a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	69fa      	ldr	r2, [r7, #28]
 80019a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80019aa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80019ae:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6818      	ldr	r0, [r3, #0]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	691b      	ldr	r3, [r3, #16]
 80019b8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80019c0:	461a      	mov	r2, r3
 80019c2:	f002 fe15 	bl	80045f0 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80019d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	4618      	mov	r0, r3
 80019dc:	f002 fd44 	bl	8004468 <USB_ReadInterrupts>
 80019e0:	4603      	mov	r3, r0
 80019e2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80019e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80019ea:	d124      	bne.n	8001a36 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	4618      	mov	r0, r3
 80019f2:	f002 fdda 	bl	80045aa <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4618      	mov	r0, r3
 80019fc:	f001 fd8f 	bl	800351e <USB_GetDevSpeed>
 8001a00:	4603      	mov	r3, r0
 8001a02:	461a      	mov	r2, r3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681c      	ldr	r4, [r3, #0]
 8001a0c:	f001 fa28 	bl	8002e60 <HAL_RCC_GetHCLKFreq>
 8001a10:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001a16:	b2db      	uxtb	r3, r3
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4620      	mov	r0, r4
 8001a1c:	f001 fa8e 	bl	8002f3c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001a20:	6878      	ldr	r0, [r7, #4]
 8001a22:	f005 f904 	bl	8006c2e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	695a      	ldr	r2, [r3, #20]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8001a34:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f002 fd14 	bl	8004468 <USB_ReadInterrupts>
 8001a40:	4603      	mov	r3, r0
 8001a42:	f003 0308 	and.w	r3, r3, #8
 8001a46:	2b08      	cmp	r3, #8
 8001a48:	d10a      	bne.n	8001a60 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001a4a:	6878      	ldr	r0, [r7, #4]
 8001a4c:	f005 f8e1 	bl	8006c12 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	695a      	ldr	r2, [r3, #20]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f002 0208 	and.w	r2, r2, #8
 8001a5e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4618      	mov	r0, r3
 8001a66:	f002 fcff 	bl	8004468 <USB_ReadInterrupts>
 8001a6a:	4603      	mov	r3, r0
 8001a6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a70:	2b80      	cmp	r3, #128	; 0x80
 8001a72:	d122      	bne.n	8001aba <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001a74:	6a3b      	ldr	r3, [r7, #32]
 8001a76:	699b      	ldr	r3, [r3, #24]
 8001a78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a7c:	6a3b      	ldr	r3, [r7, #32]
 8001a7e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001a80:	2301      	movs	r3, #1
 8001a82:	627b      	str	r3, [r7, #36]	; 0x24
 8001a84:	e014      	b.n	8001ab0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001a86:	6879      	ldr	r1, [r7, #4]
 8001a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001a8a:	4613      	mov	r3, r2
 8001a8c:	00db      	lsls	r3, r3, #3
 8001a8e:	4413      	add	r3, r2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	440b      	add	r3, r1
 8001a94:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d105      	bne.n	8001aaa <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8001a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa0:	b2db      	uxtb	r3, r3
 8001aa2:	4619      	mov	r1, r3
 8001aa4:	6878      	ldr	r0, [r7, #4]
 8001aa6:	f000 fb27 	bl	80020f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aac:	3301      	adds	r3, #1
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ab6:	429a      	cmp	r2, r3
 8001ab8:	d3e5      	bcc.n	8001a86 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f002 fcd2 	bl	8004468 <USB_ReadInterrupts>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001aca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001ace:	d13b      	bne.n	8001b48 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad4:	e02b      	b.n	8001b2e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8001ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad8:	015a      	lsls	r2, r3, #5
 8001ada:	69fb      	ldr	r3, [r7, #28]
 8001adc:	4413      	add	r3, r2
 8001ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001ae6:	6879      	ldr	r1, [r7, #4]
 8001ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aea:	4613      	mov	r3, r2
 8001aec:	00db      	lsls	r3, r3, #3
 8001aee:	4413      	add	r3, r2
 8001af0:	009b      	lsls	r3, r3, #2
 8001af2:	440b      	add	r3, r1
 8001af4:	3340      	adds	r3, #64	; 0x40
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	2b01      	cmp	r3, #1
 8001afa:	d115      	bne.n	8001b28 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8001afc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	da12      	bge.n	8001b28 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b06:	4613      	mov	r3, r2
 8001b08:	00db      	lsls	r3, r3, #3
 8001b0a:	4413      	add	r3, r2
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	440b      	add	r3, r1
 8001b10:	333f      	adds	r3, #63	; 0x3f
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8001b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8001b1e:	b2db      	uxtb	r3, r3
 8001b20:	4619      	mov	r1, r3
 8001b22:	6878      	ldr	r0, [r7, #4]
 8001b24:	f000 fae8 	bl	80020f8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	627b      	str	r3, [r7, #36]	; 0x24
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d3ce      	bcc.n	8001ad6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	695a      	ldr	r2, [r3, #20]
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8001b46:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f002 fc8b 	bl	8004468 <USB_ReadInterrupts>
 8001b52:	4603      	mov	r3, r0
 8001b54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b58:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b5c:	d155      	bne.n	8001c0a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001b5e:	2301      	movs	r3, #1
 8001b60:	627b      	str	r3, [r7, #36]	; 0x24
 8001b62:	e045      	b.n	8001bf0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8001b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b66:	015a      	lsls	r2, r3, #5
 8001b68:	69fb      	ldr	r3, [r7, #28]
 8001b6a:	4413      	add	r3, r2
 8001b6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b74:	6879      	ldr	r1, [r7, #4]
 8001b76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b78:	4613      	mov	r3, r2
 8001b7a:	00db      	lsls	r3, r3, #3
 8001b7c:	4413      	add	r3, r2
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001b86:	781b      	ldrb	r3, [r3, #0]
 8001b88:	2b01      	cmp	r3, #1
 8001b8a:	d12e      	bne.n	8001bea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001b8c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	da2b      	bge.n	8001bea <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8001b92:	69bb      	ldr	r3, [r7, #24]
 8001b94:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8001b9e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d121      	bne.n	8001bea <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8001ba6:	6879      	ldr	r1, [r7, #4]
 8001ba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8001bb8:	2201      	movs	r2, #1
 8001bba:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8001bbc:	6a3b      	ldr	r3, [r7, #32]
 8001bbe:	699b      	ldr	r3, [r3, #24]
 8001bc0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001bc4:	6a3b      	ldr	r3, [r7, #32]
 8001bc6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8001bc8:	6a3b      	ldr	r3, [r7, #32]
 8001bca:	695b      	ldr	r3, [r3, #20]
 8001bcc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d10a      	bne.n	8001bea <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	69fa      	ldr	r2, [r7, #28]
 8001bde:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001be2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001be6:	6053      	str	r3, [r2, #4]
            break;
 8001be8:	e007      	b.n	8001bfa <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bec:	3301      	adds	r3, #1
 8001bee:	627b      	str	r3, [r7, #36]	; 0x24
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	d3b4      	bcc.n	8001b64 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	695a      	ldr	r2, [r3, #20]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8001c08:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f002 fc2a 	bl	8004468 <USB_ReadInterrupts>
 8001c14:	4603      	mov	r3, r0
 8001c16:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8001c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c1e:	d10a      	bne.n	8001c36 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f005 f885 	bl	8006d30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	695a      	ldr	r2, [r3, #20]
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8001c34:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4618      	mov	r0, r3
 8001c3c:	f002 fc14 	bl	8004468 <USB_ReadInterrupts>
 8001c40:	4603      	mov	r3, r0
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b04      	cmp	r3, #4
 8001c48:	d115      	bne.n	8001c76 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8001c52:	69bb      	ldr	r3, [r7, #24]
 8001c54:	f003 0304 	and.w	r3, r3, #4
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d002      	beq.n	8001c62 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8001c5c:	6878      	ldr	r0, [r7, #4]
 8001c5e:	f005 f875 	bl	8006d4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	6859      	ldr	r1, [r3, #4]
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	605a      	str	r2, [r3, #4]
 8001c72:	e000      	b.n	8001c76 <HAL_PCD_IRQHandler+0x938>
      return;
 8001c74:	bf00      	nop
    }
  }
}
 8001c76:	3734      	adds	r7, #52	; 0x34
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd90      	pop	{r4, r7, pc}

08001c7c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	460b      	mov	r3, r1
 8001c86:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d101      	bne.n	8001c96 <HAL_PCD_SetAddress+0x1a>
 8001c92:	2302      	movs	r3, #2
 8001c94:	e013      	b.n	8001cbe <HAL_PCD_SetAddress+0x42>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	2201      	movs	r2, #1
 8001c9a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	78fa      	ldrb	r2, [r7, #3]
 8001ca2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	78fa      	ldrb	r2, [r7, #3]
 8001cac:	4611      	mov	r1, r2
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f002 fb72 	bl	8004398 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cbc:	2300      	movs	r3, #0
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	3708      	adds	r7, #8
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bd80      	pop	{r7, pc}

08001cc6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8001cc6:	b580      	push	{r7, lr}
 8001cc8:	b084      	sub	sp, #16
 8001cca:	af00      	add	r7, sp, #0
 8001ccc:	6078      	str	r0, [r7, #4]
 8001cce:	4608      	mov	r0, r1
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	70fb      	strb	r3, [r7, #3]
 8001cd8:	460b      	mov	r3, r1
 8001cda:	803b      	strh	r3, [r7, #0]
 8001cdc:	4613      	mov	r3, r2
 8001cde:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001ce4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	da0f      	bge.n	8001d0c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001cec:	78fb      	ldrb	r3, [r7, #3]
 8001cee:	f003 020f 	and.w	r2, r3, #15
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	00db      	lsls	r3, r3, #3
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	3338      	adds	r3, #56	; 0x38
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	4413      	add	r3, r2
 8001d00:	3304      	adds	r3, #4
 8001d02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	2201      	movs	r2, #1
 8001d08:	705a      	strb	r2, [r3, #1]
 8001d0a:	e00f      	b.n	8001d2c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001d0c:	78fb      	ldrb	r3, [r7, #3]
 8001d0e:	f003 020f 	and.w	r2, r3, #15
 8001d12:	4613      	mov	r3, r2
 8001d14:	00db      	lsls	r3, r3, #3
 8001d16:	4413      	add	r3, r2
 8001d18:	009b      	lsls	r3, r3, #2
 8001d1a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001d1e:	687a      	ldr	r2, [r7, #4]
 8001d20:	4413      	add	r3, r2
 8001d22:	3304      	adds	r3, #4
 8001d24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	f003 030f 	and.w	r3, r3, #15
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8001d38:	883a      	ldrh	r2, [r7, #0]
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	78ba      	ldrb	r2, [r7, #2]
 8001d42:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	785b      	ldrb	r3, [r3, #1]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d004      	beq.n	8001d56 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	781b      	ldrb	r3, [r3, #0]
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8001d56:	78bb      	ldrb	r3, [r7, #2]
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d102      	bne.n	8001d62 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d101      	bne.n	8001d70 <HAL_PCD_EP_Open+0xaa>
 8001d6c:	2302      	movs	r3, #2
 8001d6e:	e00e      	b.n	8001d8e <HAL_PCD_EP_Open+0xc8>
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2201      	movs	r2, #1
 8001d74:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	68f9      	ldr	r1, [r7, #12]
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f001 fbf2 	bl	8003568 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2200      	movs	r2, #0
 8001d88:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8001d8c:	7afb      	ldrb	r3, [r7, #11]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3710      	adds	r7, #16
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}

08001d96 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001d96:	b580      	push	{r7, lr}
 8001d98:	b084      	sub	sp, #16
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	460b      	mov	r3, r1
 8001da0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8001da2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	da0f      	bge.n	8001dca <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001daa:	78fb      	ldrb	r3, [r7, #3]
 8001dac:	f003 020f 	and.w	r2, r3, #15
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	3338      	adds	r3, #56	; 0x38
 8001dba:	687a      	ldr	r2, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	2201      	movs	r2, #1
 8001dc6:	705a      	strb	r2, [r3, #1]
 8001dc8:	e00f      	b.n	8001dea <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001dca:	78fb      	ldrb	r3, [r7, #3]
 8001dcc:	f003 020f 	and.w	r2, r3, #15
 8001dd0:	4613      	mov	r3, r2
 8001dd2:	00db      	lsls	r3, r3, #3
 8001dd4:	4413      	add	r3, r2
 8001dd6:	009b      	lsls	r3, r3, #2
 8001dd8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001ddc:	687a      	ldr	r2, [r7, #4]
 8001dde:	4413      	add	r3, r2
 8001de0:	3304      	adds	r3, #4
 8001de2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	2200      	movs	r2, #0
 8001de8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8001dea:	78fb      	ldrb	r3, [r7, #3]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_PCD_EP_Close+0x6e>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e00e      	b.n	8001e22 <HAL_PCD_EP_Close+0x8c>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2201      	movs	r2, #1
 8001e08:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	68f9      	ldr	r1, [r7, #12]
 8001e12:	4618      	mov	r0, r3
 8001e14:	f001 fc30 	bl	8003678 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	3710      	adds	r7, #16
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}

08001e2a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001e2a:	b580      	push	{r7, lr}
 8001e2c:	b086      	sub	sp, #24
 8001e2e:	af00      	add	r7, sp, #0
 8001e30:	60f8      	str	r0, [r7, #12]
 8001e32:	607a      	str	r2, [r7, #4]
 8001e34:	603b      	str	r3, [r7, #0]
 8001e36:	460b      	mov	r3, r1
 8001e38:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8001e3a:	7afb      	ldrb	r3, [r7, #11]
 8001e3c:	f003 020f 	and.w	r2, r3, #15
 8001e40:	4613      	mov	r3, r2
 8001e42:	00db      	lsls	r3, r3, #3
 8001e44:	4413      	add	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001e4c:	68fa      	ldr	r2, [r7, #12]
 8001e4e:	4413      	add	r3, r2
 8001e50:	3304      	adds	r3, #4
 8001e52:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001e54:	697b      	ldr	r3, [r7, #20]
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001e5a:	697b      	ldr	r3, [r7, #20]
 8001e5c:	683a      	ldr	r2, [r7, #0]
 8001e5e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8001e66:	697b      	ldr	r3, [r7, #20]
 8001e68:	2200      	movs	r2, #0
 8001e6a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001e6c:	7afb      	ldrb	r3, [r7, #11]
 8001e6e:	f003 030f 	and.w	r3, r3, #15
 8001e72:	b2da      	uxtb	r2, r3
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	2b01      	cmp	r3, #1
 8001e7e:	d102      	bne.n	8001e86 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001e80:	687a      	ldr	r2, [r7, #4]
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001e86:	7afb      	ldrb	r3, [r7, #11]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d109      	bne.n	8001ea4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6818      	ldr	r0, [r3, #0]
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	691b      	ldr	r3, [r3, #16]
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	6979      	ldr	r1, [r7, #20]
 8001e9e:	f001 ff0f 	bl	8003cc0 <USB_EP0StartXfer>
 8001ea2:	e008      	b.n	8001eb6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6818      	ldr	r0, [r3, #0]
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	691b      	ldr	r3, [r3, #16]
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	461a      	mov	r2, r3
 8001eb0:	6979      	ldr	r1, [r7, #20]
 8001eb2:	f001 fcbd 	bl	8003830 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001eb6:	2300      	movs	r3, #0
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}

08001ec0 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	460b      	mov	r3, r1
 8001eca:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8001ecc:	78fb      	ldrb	r3, [r7, #3]
 8001ece:	f003 020f 	and.w	r2, r3, #15
 8001ed2:	6879      	ldr	r1, [r7, #4]
 8001ed4:	4613      	mov	r3, r2
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4413      	add	r3, r2
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	440b      	add	r3, r1
 8001ede:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8001ee2:	681b      	ldr	r3, [r3, #0]
}
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	370c      	adds	r7, #12
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr

08001ef0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	607a      	str	r2, [r7, #4]
 8001efa:	603b      	str	r3, [r7, #0]
 8001efc:	460b      	mov	r3, r1
 8001efe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001f00:	7afb      	ldrb	r3, [r7, #11]
 8001f02:	f003 020f 	and.w	r2, r3, #15
 8001f06:	4613      	mov	r3, r2
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	3338      	adds	r3, #56	; 0x38
 8001f10:	68fa      	ldr	r2, [r7, #12]
 8001f12:	4413      	add	r3, r2
 8001f14:	3304      	adds	r3, #4
 8001f16:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	683a      	ldr	r2, [r7, #0]
 8001f22:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	2200      	movs	r2, #0
 8001f28:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001f30:	7afb      	ldrb	r3, [r7, #11]
 8001f32:	f003 030f 	and.w	r3, r3, #15
 8001f36:	b2da      	uxtb	r2, r3
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	691b      	ldr	r3, [r3, #16]
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d102      	bne.n	8001f4a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8001f44:	687a      	ldr	r2, [r7, #4]
 8001f46:	697b      	ldr	r3, [r7, #20]
 8001f48:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8001f4a:	7afb      	ldrb	r3, [r7, #11]
 8001f4c:	f003 030f 	and.w	r3, r3, #15
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6818      	ldr	r0, [r3, #0]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	461a      	mov	r2, r3
 8001f60:	6979      	ldr	r1, [r7, #20]
 8001f62:	f001 fead 	bl	8003cc0 <USB_EP0StartXfer>
 8001f66:	e008      	b.n	8001f7a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	6818      	ldr	r0, [r3, #0]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	691b      	ldr	r3, [r3, #16]
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	461a      	mov	r2, r3
 8001f74:	6979      	ldr	r1, [r7, #20]
 8001f76:	f001 fc5b 	bl	8003830 <USB_EPStartXfer>
  }

  return HAL_OK;
 8001f7a:	2300      	movs	r3, #0
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b084      	sub	sp, #16
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8001f90:	78fb      	ldrb	r3, [r7, #3]
 8001f92:	f003 020f 	and.w	r2, r3, #15
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	d901      	bls.n	8001fa2 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e050      	b.n	8002044 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8001fa2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	da0f      	bge.n	8001fca <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8001faa:	78fb      	ldrb	r3, [r7, #3]
 8001fac:	f003 020f 	and.w	r2, r3, #15
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	4413      	add	r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	3338      	adds	r3, #56	; 0x38
 8001fba:	687a      	ldr	r2, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	3304      	adds	r3, #4
 8001fc0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	705a      	strb	r2, [r3, #1]
 8001fc8:	e00d      	b.n	8001fe6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001fca:	78fa      	ldrb	r2, [r7, #3]
 8001fcc:	4613      	mov	r3, r2
 8001fce:	00db      	lsls	r3, r3, #3
 8001fd0:	4413      	add	r3, r2
 8001fd2:	009b      	lsls	r3, r3, #2
 8001fd4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	4413      	add	r3, r2
 8001fdc:	3304      	adds	r3, #4
 8001fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8001fe0:	68fb      	ldr	r3, [r7, #12]
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8001fec:	78fb      	ldrb	r3, [r7, #3]
 8001fee:	f003 030f 	and.w	r3, r3, #15
 8001ff2:	b2da      	uxtb	r2, r3
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d101      	bne.n	8002006 <HAL_PCD_EP_SetStall+0x82>
 8002002:	2302      	movs	r3, #2
 8002004:	e01e      	b.n	8002044 <HAL_PCD_EP_SetStall+0xc0>
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	2201      	movs	r2, #1
 800200a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	68f9      	ldr	r1, [r7, #12]
 8002014:	4618      	mov	r0, r3
 8002016:	f002 f8eb 	bl	80041f0 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800201a:	78fb      	ldrb	r3, [r7, #3]
 800201c:	f003 030f 	and.w	r3, r3, #15
 8002020:	2b00      	cmp	r3, #0
 8002022:	d10a      	bne.n	800203a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6818      	ldr	r0, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	691b      	ldr	r3, [r3, #16]
 800202c:	b2d9      	uxtb	r1, r3
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002034:	461a      	mov	r2, r3
 8002036:	f002 fadb 	bl	80045f0 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002042:	2300      	movs	r3, #0
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}

0800204c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b084      	sub	sp, #16
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
 8002054:	460b      	mov	r3, r1
 8002056:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002058:	78fb      	ldrb	r3, [r7, #3]
 800205a:	f003 020f 	and.w	r2, r3, #15
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	429a      	cmp	r2, r3
 8002064:	d901      	bls.n	800206a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002066:	2301      	movs	r3, #1
 8002068:	e042      	b.n	80020f0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800206a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800206e:	2b00      	cmp	r3, #0
 8002070:	da0f      	bge.n	8002092 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	f003 020f 	and.w	r2, r3, #15
 8002078:	4613      	mov	r3, r2
 800207a:	00db      	lsls	r3, r3, #3
 800207c:	4413      	add	r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	3338      	adds	r3, #56	; 0x38
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	4413      	add	r3, r2
 8002086:	3304      	adds	r3, #4
 8002088:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	2201      	movs	r2, #1
 800208e:	705a      	strb	r2, [r3, #1]
 8002090:	e00f      	b.n	80020b2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002092:	78fb      	ldrb	r3, [r7, #3]
 8002094:	f003 020f 	and.w	r2, r3, #15
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	4413      	add	r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80020a4:	687a      	ldr	r2, [r7, #4]
 80020a6:	4413      	add	r3, r2
 80020a8:	3304      	adds	r3, #4
 80020aa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	2200      	movs	r2, #0
 80020b0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	2200      	movs	r2, #0
 80020b6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80020b8:	78fb      	ldrb	r3, [r7, #3]
 80020ba:	f003 030f 	and.w	r3, r3, #15
 80020be:	b2da      	uxtb	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_PCD_EP_ClrStall+0x86>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e00e      	b.n	80020f0 <HAL_PCD_EP_ClrStall+0xa4>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	68f9      	ldr	r1, [r7, #12]
 80020e0:	4618      	mov	r0, r3
 80020e2:	f002 f8f3 	bl	80042cc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2200      	movs	r2, #0
 80020ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}

080020f8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
 8002100:	460b      	mov	r3, r1
 8002102:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002104:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002108:	2b00      	cmp	r3, #0
 800210a:	da0c      	bge.n	8002126 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800210c:	78fb      	ldrb	r3, [r7, #3]
 800210e:	f003 020f 	and.w	r2, r3, #15
 8002112:	4613      	mov	r3, r2
 8002114:	00db      	lsls	r3, r3, #3
 8002116:	4413      	add	r3, r2
 8002118:	009b      	lsls	r3, r3, #2
 800211a:	3338      	adds	r3, #56	; 0x38
 800211c:	687a      	ldr	r2, [r7, #4]
 800211e:	4413      	add	r3, r2
 8002120:	3304      	adds	r3, #4
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e00c      	b.n	8002140 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002126:	78fb      	ldrb	r3, [r7, #3]
 8002128:	f003 020f 	and.w	r2, r3, #15
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	009b      	lsls	r3, r3, #2
 8002134:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002138:	687a      	ldr	r2, [r7, #4]
 800213a:	4413      	add	r3, r2
 800213c:	3304      	adds	r3, #4
 800213e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	68f9      	ldr	r1, [r7, #12]
 8002146:	4618      	mov	r0, r3
 8002148:	f001 ff12 	bl	8003f70 <USB_EPStopXfer>
 800214c:	4603      	mov	r3, r0
 800214e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002150:	7afb      	ldrb	r3, [r7, #11]
}
 8002152:	4618      	mov	r0, r3
 8002154:	3710      	adds	r7, #16
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}

0800215a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800215a:	b580      	push	{r7, lr}
 800215c:	b08a      	sub	sp, #40	; 0x28
 800215e:	af02      	add	r7, sp, #8
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800216e:	683a      	ldr	r2, [r7, #0]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	3338      	adds	r3, #56	; 0x38
 800217a:	687a      	ldr	r2, [r7, #4]
 800217c:	4413      	add	r3, r2
 800217e:	3304      	adds	r3, #4
 8002180:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6a1a      	ldr	r2, [r3, #32]
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	429a      	cmp	r2, r3
 800218c:	d901      	bls.n	8002192 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e06c      	b.n	800226c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	699a      	ldr	r2, [r3, #24]
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	6a1b      	ldr	r3, [r3, #32]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	68db      	ldr	r3, [r3, #12]
 80021a2:	69fa      	ldr	r2, [r7, #28]
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d902      	bls.n	80021ae <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	3303      	adds	r3, #3
 80021b2:	089b      	lsrs	r3, r3, #2
 80021b4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80021b6:	e02b      	b.n	8002210 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	699a      	ldr	r2, [r3, #24]
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	6a1b      	ldr	r3, [r3, #32]
 80021c0:	1ad3      	subs	r3, r2, r3
 80021c2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	68db      	ldr	r3, [r3, #12]
 80021c8:	69fa      	ldr	r2, [r7, #28]
 80021ca:	429a      	cmp	r2, r3
 80021cc:	d902      	bls.n	80021d4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	3303      	adds	r3, #3
 80021d8:	089b      	lsrs	r3, r3, #2
 80021da:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	6919      	ldr	r1, [r3, #16]
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	b2da      	uxtb	r2, r3
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80021ec:	b2db      	uxtb	r3, r3
 80021ee:	9300      	str	r3, [sp, #0]
 80021f0:	4603      	mov	r3, r0
 80021f2:	6978      	ldr	r0, [r7, #20]
 80021f4:	f001 ff66 	bl	80040c4 <USB_WritePacket>

    ep->xfer_buff  += len;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	691a      	ldr	r2, [r3, #16]
 80021fc:	69fb      	ldr	r3, [r7, #28]
 80021fe:	441a      	add	r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6a1a      	ldr	r2, [r3, #32]
 8002208:	69fb      	ldr	r3, [r7, #28]
 800220a:	441a      	add	r2, r3
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	015a      	lsls	r2, r3, #5
 8002214:	693b      	ldr	r3, [r7, #16]
 8002216:	4413      	add	r3, r2
 8002218:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	b29b      	uxth	r3, r3
 8002220:	69ba      	ldr	r2, [r7, #24]
 8002222:	429a      	cmp	r2, r3
 8002224:	d809      	bhi.n	800223a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a1a      	ldr	r2, [r3, #32]
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800222e:	429a      	cmp	r2, r3
 8002230:	d203      	bcs.n	800223a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	699b      	ldr	r3, [r3, #24]
 8002236:	2b00      	cmp	r3, #0
 8002238:	d1be      	bne.n	80021b8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	699a      	ldr	r2, [r3, #24]
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	6a1b      	ldr	r3, [r3, #32]
 8002242:	429a      	cmp	r2, r3
 8002244:	d811      	bhi.n	800226a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	f003 030f 	and.w	r3, r3, #15
 800224c:	2201      	movs	r2, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800225a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800225c:	68bb      	ldr	r3, [r7, #8]
 800225e:	43db      	mvns	r3, r3
 8002260:	6939      	ldr	r1, [r7, #16]
 8002262:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002266:	4013      	ands	r3, r2
 8002268:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3720      	adds	r7, #32
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b088      	sub	sp, #32
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002284:	69fb      	ldr	r3, [r7, #28]
 8002286:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	333c      	adds	r3, #60	; 0x3c
 800228c:	3304      	adds	r3, #4
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	015a      	lsls	r2, r3, #5
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4413      	add	r3, r2
 800229a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800229e:	689b      	ldr	r3, [r3, #8]
 80022a0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	691b      	ldr	r3, [r3, #16]
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d17b      	bne.n	80023a2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	f003 0308 	and.w	r3, r3, #8
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d015      	beq.n	80022e0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	4a61      	ldr	r2, [pc, #388]	; (800243c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80022b8:	4293      	cmp	r3, r2
 80022ba:	f240 80b9 	bls.w	8002430 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80022be:	693b      	ldr	r3, [r7, #16]
 80022c0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	f000 80b3 	beq.w	8002430 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	015a      	lsls	r2, r3, #5
 80022ce:	69bb      	ldr	r3, [r7, #24]
 80022d0:	4413      	add	r3, r2
 80022d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022d6:	461a      	mov	r2, r3
 80022d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022dc:	6093      	str	r3, [r2, #8]
 80022de:	e0a7      	b.n	8002430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80022e0:	693b      	ldr	r3, [r7, #16]
 80022e2:	f003 0320 	and.w	r3, r3, #32
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d009      	beq.n	80022fe <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	015a      	lsls	r2, r3, #5
 80022ee:	69bb      	ldr	r3, [r7, #24]
 80022f0:	4413      	add	r3, r2
 80022f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022f6:	461a      	mov	r2, r3
 80022f8:	2320      	movs	r3, #32
 80022fa:	6093      	str	r3, [r2, #8]
 80022fc:	e098      	b.n	8002430 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002304:	2b00      	cmp	r3, #0
 8002306:	f040 8093 	bne.w	8002430 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	4a4b      	ldr	r2, [pc, #300]	; (800243c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800230e:	4293      	cmp	r3, r2
 8002310:	d90f      	bls.n	8002332 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002312:	693b      	ldr	r3, [r7, #16]
 8002314:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002318:	2b00      	cmp	r3, #0
 800231a:	d00a      	beq.n	8002332 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	015a      	lsls	r2, r3, #5
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	4413      	add	r3, r2
 8002324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002328:	461a      	mov	r2, r3
 800232a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800232e:	6093      	str	r3, [r2, #8]
 8002330:	e07e      	b.n	8002430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	4613      	mov	r3, r2
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	4413      	add	r3, r2
 800233a:	009b      	lsls	r3, r3, #2
 800233c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002340:	687a      	ldr	r2, [r7, #4]
 8002342:	4413      	add	r3, r2
 8002344:	3304      	adds	r3, #4
 8002346:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	69da      	ldr	r2, [r3, #28]
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	0159      	lsls	r1, r3, #5
 8002350:	69bb      	ldr	r3, [r7, #24]
 8002352:	440b      	add	r3, r1
 8002354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002358:	691b      	ldr	r3, [r3, #16]
 800235a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235e:	1ad2      	subs	r2, r2, r3
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d114      	bne.n	8002394 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	699b      	ldr	r3, [r3, #24]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d109      	bne.n	8002386 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6818      	ldr	r0, [r3, #0]
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800237c:	461a      	mov	r2, r3
 800237e:	2101      	movs	r1, #1
 8002380:	f002 f936 	bl	80045f0 <USB_EP0_OutStart>
 8002384:	e006      	b.n	8002394 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a1b      	ldr	r3, [r3, #32]
 800238e:	441a      	add	r2, r3
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	b2db      	uxtb	r3, r3
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f004 fc04 	bl	8006ba8 <HAL_PCD_DataOutStageCallback>
 80023a0:	e046      	b.n	8002430 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80023a2:	697b      	ldr	r3, [r7, #20]
 80023a4:	4a26      	ldr	r2, [pc, #152]	; (8002440 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d124      	bne.n	80023f4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d00a      	beq.n	80023ca <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	015a      	lsls	r2, r3, #5
 80023b8:	69bb      	ldr	r3, [r7, #24]
 80023ba:	4413      	add	r3, r2
 80023bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023c0:	461a      	mov	r2, r3
 80023c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023c6:	6093      	str	r3, [r2, #8]
 80023c8:	e032      	b.n	8002430 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	f003 0320 	and.w	r3, r3, #32
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	015a      	lsls	r2, r3, #5
 80023d8:	69bb      	ldr	r3, [r7, #24]
 80023da:	4413      	add	r3, r2
 80023dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80023e0:	461a      	mov	r2, r3
 80023e2:	2320      	movs	r3, #32
 80023e4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f004 fbdb 	bl	8006ba8 <HAL_PCD_DataOutStageCallback>
 80023f2:	e01d      	b.n	8002430 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d114      	bne.n	8002424 <PCD_EP_OutXfrComplete_int+0x1b0>
 80023fa:	6879      	ldr	r1, [r7, #4]
 80023fc:	683a      	ldr	r2, [r7, #0]
 80023fe:	4613      	mov	r3, r2
 8002400:	00db      	lsls	r3, r3, #3
 8002402:	4413      	add	r3, r2
 8002404:	009b      	lsls	r3, r3, #2
 8002406:	440b      	add	r3, r1
 8002408:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d108      	bne.n	8002424 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800241c:	461a      	mov	r2, r3
 800241e:	2100      	movs	r1, #0
 8002420:	f002 f8e6 	bl	80045f0 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f004 fbbc 	bl	8006ba8 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002430:	2300      	movs	r3, #0
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	4f54300a 	.word	0x4f54300a
 8002440:	4f54310a 	.word	0x4f54310a

08002444 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b086      	sub	sp, #24
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	333c      	adds	r3, #60	; 0x3c
 800245c:	3304      	adds	r3, #4
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	015a      	lsls	r2, r3, #5
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	4413      	add	r3, r2
 800246a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	4a15      	ldr	r2, [pc, #84]	; (80024cc <PCD_EP_OutSetupPacket_int+0x88>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d90e      	bls.n	8002498 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800247a:	68bb      	ldr	r3, [r7, #8]
 800247c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	015a      	lsls	r2, r3, #5
 8002488:	693b      	ldr	r3, [r7, #16]
 800248a:	4413      	add	r3, r2
 800248c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002490:	461a      	mov	r2, r3
 8002492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002496:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f004 fb73 	bl	8006b84 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	4a0a      	ldr	r2, [pc, #40]	; (80024cc <PCD_EP_OutSetupPacket_int+0x88>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d90c      	bls.n	80024c0 <PCD_EP_OutSetupPacket_int+0x7c>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	691b      	ldr	r3, [r3, #16]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	d108      	bne.n	80024c0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6818      	ldr	r0, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80024b8:	461a      	mov	r2, r3
 80024ba:	2101      	movs	r1, #1
 80024bc:	f002 f898 	bl	80045f0 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80024c0:	2300      	movs	r3, #0
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	3718      	adds	r7, #24
 80024c6:	46bd      	mov	sp, r7
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	4f54300a 	.word	0x4f54300a

080024d0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b085      	sub	sp, #20
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	460b      	mov	r3, r1
 80024da:	70fb      	strb	r3, [r7, #3]
 80024dc:	4613      	mov	r3, r2
 80024de:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024e6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d107      	bne.n	80024fe <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80024ee:	883b      	ldrh	r3, [r7, #0]
 80024f0:	0419      	lsls	r1, r3, #16
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	430a      	orrs	r2, r1
 80024fa:	629a      	str	r2, [r3, #40]	; 0x28
 80024fc:	e028      	b.n	8002550 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002504:	0c1b      	lsrs	r3, r3, #16
 8002506:	68ba      	ldr	r2, [r7, #8]
 8002508:	4413      	add	r3, r2
 800250a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800250c:	2300      	movs	r3, #0
 800250e:	73fb      	strb	r3, [r7, #15]
 8002510:	e00d      	b.n	800252e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	7bfb      	ldrb	r3, [r7, #15]
 8002518:	3340      	adds	r3, #64	; 0x40
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	0c1b      	lsrs	r3, r3, #16
 8002522:	68ba      	ldr	r2, [r7, #8]
 8002524:	4413      	add	r3, r2
 8002526:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002528:	7bfb      	ldrb	r3, [r7, #15]
 800252a:	3301      	adds	r3, #1
 800252c:	73fb      	strb	r3, [r7, #15]
 800252e:	7bfa      	ldrb	r2, [r7, #15]
 8002530:	78fb      	ldrb	r3, [r7, #3]
 8002532:	3b01      	subs	r3, #1
 8002534:	429a      	cmp	r2, r3
 8002536:	d3ec      	bcc.n	8002512 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002538:	883b      	ldrh	r3, [r7, #0]
 800253a:	0418      	lsls	r0, r3, #16
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6819      	ldr	r1, [r3, #0]
 8002540:	78fb      	ldrb	r3, [r7, #3]
 8002542:	3b01      	subs	r3, #1
 8002544:	68ba      	ldr	r2, [r7, #8]
 8002546:	4302      	orrs	r2, r0
 8002548:	3340      	adds	r3, #64	; 0x40
 800254a:	009b      	lsls	r3, r3, #2
 800254c:	440b      	add	r3, r1
 800254e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002550:	2300      	movs	r3, #0
}
 8002552:	4618      	mov	r0, r3
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800255e:	b480      	push	{r7}
 8002560:	b083      	sub	sp, #12
 8002562:	af00      	add	r7, sp, #0
 8002564:	6078      	str	r0, [r7, #4]
 8002566:	460b      	mov	r3, r1
 8002568:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	887a      	ldrh	r2, [r7, #2]
 8002570:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002572:	2300      	movs	r3, #0
}
 8002574:	4618      	mov	r0, r3
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
 8002588:	460b      	mov	r3, r1
 800258a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 800258c:	bf00      	nop
 800258e:	370c      	adds	r7, #12
 8002590:	46bd      	mov	sp, r7
 8002592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002596:	4770      	bx	lr

08002598 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	b086      	sub	sp, #24
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d101      	bne.n	80025aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80025a6:	2301      	movs	r3, #1
 80025a8:	e267      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d075      	beq.n	80026a2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025b6:	4b88      	ldr	r3, [pc, #544]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	f003 030c 	and.w	r3, r3, #12
 80025be:	2b04      	cmp	r3, #4
 80025c0:	d00c      	beq.n	80025dc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c2:	4b85      	ldr	r3, [pc, #532]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80025ca:	2b08      	cmp	r3, #8
 80025cc:	d112      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b82      	ldr	r3, [pc, #520]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80025da:	d10b      	bne.n	80025f4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	4b7e      	ldr	r3, [pc, #504]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d05b      	beq.n	80026a0 <HAL_RCC_OscConfig+0x108>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d157      	bne.n	80026a0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e242      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x74>
 80025fe:	4b76      	ldr	r3, [pc, #472]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a75      	ldr	r2, [pc, #468]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e01d      	b.n	8002648 <HAL_RCC_OscConfig+0xb0>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0x98>
 8002616:	4b70      	ldr	r3, [pc, #448]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a6f      	ldr	r2, [pc, #444]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800261c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6c      	ldr	r2, [pc, #432]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0xb0>
 8002630:	4b69      	ldr	r3, [pc, #420]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a68      	ldr	r2, [pc, #416]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002636:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b66      	ldr	r3, [pc, #408]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a65      	ldr	r2, [pc, #404]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002642:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002650:	f7fe fa16 	bl	8000a80 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002658:	f7fe fa12 	bl	8000a80 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	; 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e207      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b5b      	ldr	r3, [pc, #364]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0xc0>
 8002676:	e014      	b.n	80026a2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002678:	f7fe fa02 	bl	8000a80 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002680:	f7fe f9fe 	bl	8000a80 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	; 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e1f3      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	4b51      	ldr	r3, [pc, #324]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0xe8>
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d063      	beq.n	8002776 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026ae:	4b4a      	ldr	r3, [pc, #296]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00b      	beq.n	80026d2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026ba:	4b47      	ldr	r3, [pc, #284]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d11c      	bne.n	8002700 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026c6:	4b44      	ldr	r3, [pc, #272]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d116      	bne.n	8002700 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d2:	4b41      	ldr	r3, [pc, #260]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0302 	and.w	r3, r3, #2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d005      	beq.n	80026ea <HAL_RCC_OscConfig+0x152>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	68db      	ldr	r3, [r3, #12]
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d001      	beq.n	80026ea <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e1c7      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ea:	4b3b      	ldr	r3, [pc, #236]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4937      	ldr	r1, [pc, #220]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026fe:	e03a      	b.n	8002776 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d020      	beq.n	800274a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002708:	4b34      	ldr	r3, [pc, #208]	; (80027dc <HAL_RCC_OscConfig+0x244>)
 800270a:	2201      	movs	r2, #1
 800270c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270e:	f7fe f9b7 	bl	8000a80 <HAL_GetTick>
 8002712:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002714:	e008      	b.n	8002728 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002716:	f7fe f9b3 	bl	8000a80 <HAL_GetTick>
 800271a:	4602      	mov	r2, r0
 800271c:	693b      	ldr	r3, [r7, #16]
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	2b02      	cmp	r3, #2
 8002722:	d901      	bls.n	8002728 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002724:	2303      	movs	r3, #3
 8002726:	e1a8      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002728:	4b2b      	ldr	r3, [pc, #172]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f003 0302 	and.w	r3, r3, #2
 8002730:	2b00      	cmp	r3, #0
 8002732:	d0f0      	beq.n	8002716 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002734:	4b28      	ldr	r3, [pc, #160]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	00db      	lsls	r3, r3, #3
 8002742:	4925      	ldr	r1, [pc, #148]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 8002744:	4313      	orrs	r3, r2
 8002746:	600b      	str	r3, [r1, #0]
 8002748:	e015      	b.n	8002776 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800274a:	4b24      	ldr	r3, [pc, #144]	; (80027dc <HAL_RCC_OscConfig+0x244>)
 800274c:	2200      	movs	r2, #0
 800274e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002750:	f7fe f996 	bl	8000a80 <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002756:	e008      	b.n	800276a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002758:	f7fe f992 	bl	8000a80 <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	2b02      	cmp	r3, #2
 8002764:	d901      	bls.n	800276a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002766:	2303      	movs	r3, #3
 8002768:	e187      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276a:	4b1b      	ldr	r3, [pc, #108]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	2b00      	cmp	r3, #0
 8002774:	d1f0      	bne.n	8002758 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b00      	cmp	r3, #0
 8002780:	d036      	beq.n	80027f0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d016      	beq.n	80027b8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800278a:	4b15      	ldr	r3, [pc, #84]	; (80027e0 <HAL_RCC_OscConfig+0x248>)
 800278c:	2201      	movs	r2, #1
 800278e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002790:	f7fe f976 	bl	8000a80 <HAL_GetTick>
 8002794:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002796:	e008      	b.n	80027aa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002798:	f7fe f972 	bl	8000a80 <HAL_GetTick>
 800279c:	4602      	mov	r2, r0
 800279e:	693b      	ldr	r3, [r7, #16]
 80027a0:	1ad3      	subs	r3, r2, r3
 80027a2:	2b02      	cmp	r3, #2
 80027a4:	d901      	bls.n	80027aa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80027a6:	2303      	movs	r3, #3
 80027a8:	e167      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027aa:	4b0b      	ldr	r3, [pc, #44]	; (80027d8 <HAL_RCC_OscConfig+0x240>)
 80027ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027ae:	f003 0302 	and.w	r3, r3, #2
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d0f0      	beq.n	8002798 <HAL_RCC_OscConfig+0x200>
 80027b6:	e01b      	b.n	80027f0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027b8:	4b09      	ldr	r3, [pc, #36]	; (80027e0 <HAL_RCC_OscConfig+0x248>)
 80027ba:	2200      	movs	r2, #0
 80027bc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027be:	f7fe f95f 	bl	8000a80 <HAL_GetTick>
 80027c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027c4:	e00e      	b.n	80027e4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80027c6:	f7fe f95b 	bl	8000a80 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	693b      	ldr	r3, [r7, #16]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d907      	bls.n	80027e4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80027d4:	2303      	movs	r3, #3
 80027d6:	e150      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
 80027d8:	40023800 	.word	0x40023800
 80027dc:	42470000 	.word	0x42470000
 80027e0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027e4:	4b88      	ldr	r3, [pc, #544]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80027e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027e8:	f003 0302 	and.w	r3, r3, #2
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d1ea      	bne.n	80027c6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0304 	and.w	r3, r3, #4
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	f000 8097 	beq.w	800292c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027fe:	2300      	movs	r3, #0
 8002800:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002802:	4b81      	ldr	r3, [pc, #516]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800280a:	2b00      	cmp	r3, #0
 800280c:	d10f      	bne.n	800282e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	2300      	movs	r3, #0
 8002810:	60bb      	str	r3, [r7, #8]
 8002812:	4b7d      	ldr	r3, [pc, #500]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	4a7c      	ldr	r2, [pc, #496]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002818:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800281c:	6413      	str	r3, [r2, #64]	; 0x40
 800281e:	4b7a      	ldr	r3, [pc, #488]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002820:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002822:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002826:	60bb      	str	r3, [r7, #8]
 8002828:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800282a:	2301      	movs	r3, #1
 800282c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800282e:	4b77      	ldr	r3, [pc, #476]	; (8002a0c <HAL_RCC_OscConfig+0x474>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002836:	2b00      	cmp	r3, #0
 8002838:	d118      	bne.n	800286c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800283a:	4b74      	ldr	r3, [pc, #464]	; (8002a0c <HAL_RCC_OscConfig+0x474>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a73      	ldr	r2, [pc, #460]	; (8002a0c <HAL_RCC_OscConfig+0x474>)
 8002840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002844:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002846:	f7fe f91b 	bl	8000a80 <HAL_GetTick>
 800284a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800284c:	e008      	b.n	8002860 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800284e:	f7fe f917 	bl	8000a80 <HAL_GetTick>
 8002852:	4602      	mov	r2, r0
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	2b02      	cmp	r3, #2
 800285a:	d901      	bls.n	8002860 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e10c      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002860:	4b6a      	ldr	r3, [pc, #424]	; (8002a0c <HAL_RCC_OscConfig+0x474>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002868:	2b00      	cmp	r3, #0
 800286a:	d0f0      	beq.n	800284e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	2b01      	cmp	r3, #1
 8002872:	d106      	bne.n	8002882 <HAL_RCC_OscConfig+0x2ea>
 8002874:	4b64      	ldr	r3, [pc, #400]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002876:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002878:	4a63      	ldr	r2, [pc, #396]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800287a:	f043 0301 	orr.w	r3, r3, #1
 800287e:	6713      	str	r3, [r2, #112]	; 0x70
 8002880:	e01c      	b.n	80028bc <HAL_RCC_OscConfig+0x324>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	2b05      	cmp	r3, #5
 8002888:	d10c      	bne.n	80028a4 <HAL_RCC_OscConfig+0x30c>
 800288a:	4b5f      	ldr	r3, [pc, #380]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800288c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800288e:	4a5e      	ldr	r2, [pc, #376]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002890:	f043 0304 	orr.w	r3, r3, #4
 8002894:	6713      	str	r3, [r2, #112]	; 0x70
 8002896:	4b5c      	ldr	r3, [pc, #368]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800289a:	4a5b      	ldr	r2, [pc, #364]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	6713      	str	r3, [r2, #112]	; 0x70
 80028a2:	e00b      	b.n	80028bc <HAL_RCC_OscConfig+0x324>
 80028a4:	4b58      	ldr	r3, [pc, #352]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a8:	4a57      	ldr	r2, [pc, #348]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028aa:	f023 0301 	bic.w	r3, r3, #1
 80028ae:	6713      	str	r3, [r2, #112]	; 0x70
 80028b0:	4b55      	ldr	r3, [pc, #340]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028b4:	4a54      	ldr	r2, [pc, #336]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028b6:	f023 0304 	bic.w	r3, r3, #4
 80028ba:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	689b      	ldr	r3, [r3, #8]
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d015      	beq.n	80028f0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028c4:	f7fe f8dc 	bl	8000a80 <HAL_GetTick>
 80028c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028ca:	e00a      	b.n	80028e2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028cc:	f7fe f8d8 	bl	8000a80 <HAL_GetTick>
 80028d0:	4602      	mov	r2, r0
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	1ad3      	subs	r3, r2, r3
 80028d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80028da:	4293      	cmp	r3, r2
 80028dc:	d901      	bls.n	80028e2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80028de:	2303      	movs	r3, #3
 80028e0:	e0cb      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	4b49      	ldr	r3, [pc, #292]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80028e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d0ee      	beq.n	80028cc <HAL_RCC_OscConfig+0x334>
 80028ee:	e014      	b.n	800291a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7fe f8c6 	bl	8000a80 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028f6:	e00a      	b.n	800290e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028f8:	f7fe f8c2 	bl	8000a80 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	f241 3288 	movw	r2, #5000	; 0x1388
 8002906:	4293      	cmp	r3, r2
 8002908:	d901      	bls.n	800290e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800290a:	2303      	movs	r3, #3
 800290c:	e0b5      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290e:	4b3e      	ldr	r3, [pc, #248]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002910:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002912:	f003 0302 	and.w	r3, r3, #2
 8002916:	2b00      	cmp	r3, #0
 8002918:	d1ee      	bne.n	80028f8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800291a:	7dfb      	ldrb	r3, [r7, #23]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d105      	bne.n	800292c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002920:	4b39      	ldr	r3, [pc, #228]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002922:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002924:	4a38      	ldr	r2, [pc, #224]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002926:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800292a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	699b      	ldr	r3, [r3, #24]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80a1 	beq.w	8002a78 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002936:	4b34      	ldr	r3, [pc, #208]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 8002938:	689b      	ldr	r3, [r3, #8]
 800293a:	f003 030c 	and.w	r3, r3, #12
 800293e:	2b08      	cmp	r3, #8
 8002940:	d05c      	beq.n	80029fc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	699b      	ldr	r3, [r3, #24]
 8002946:	2b02      	cmp	r3, #2
 8002948:	d141      	bne.n	80029ce <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800294a:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_RCC_OscConfig+0x478>)
 800294c:	2200      	movs	r2, #0
 800294e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002950:	f7fe f896 	bl	8000a80 <HAL_GetTick>
 8002954:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002956:	e008      	b.n	800296a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002958:	f7fe f892 	bl	8000a80 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	693b      	ldr	r3, [r7, #16]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d901      	bls.n	800296a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002966:	2303      	movs	r3, #3
 8002968:	e087      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296a:	4b27      	ldr	r3, [pc, #156]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d1f0      	bne.n	8002958 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69da      	ldr	r2, [r3, #28]
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	6a1b      	ldr	r3, [r3, #32]
 800297e:	431a      	orrs	r2, r3
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002984:	019b      	lsls	r3, r3, #6
 8002986:	431a      	orrs	r2, r3
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800298c:	085b      	lsrs	r3, r3, #1
 800298e:	3b01      	subs	r3, #1
 8002990:	041b      	lsls	r3, r3, #16
 8002992:	431a      	orrs	r2, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002998:	061b      	lsls	r3, r3, #24
 800299a:	491b      	ldr	r1, [pc, #108]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 800299c:	4313      	orrs	r3, r2
 800299e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029a0:	4b1b      	ldr	r3, [pc, #108]	; (8002a10 <HAL_RCC_OscConfig+0x478>)
 80029a2:	2201      	movs	r2, #1
 80029a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029a6:	f7fe f86b 	bl	8000a80 <HAL_GetTick>
 80029aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029ac:	e008      	b.n	80029c0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029ae:	f7fe f867 	bl	8000a80 <HAL_GetTick>
 80029b2:	4602      	mov	r2, r0
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	1ad3      	subs	r3, r2, r3
 80029b8:	2b02      	cmp	r3, #2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e05c      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d0f0      	beq.n	80029ae <HAL_RCC_OscConfig+0x416>
 80029cc:	e054      	b.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ce:	4b10      	ldr	r3, [pc, #64]	; (8002a10 <HAL_RCC_OscConfig+0x478>)
 80029d0:	2200      	movs	r2, #0
 80029d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029d4:	f7fe f854 	bl	8000a80 <HAL_GetTick>
 80029d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029da:	e008      	b.n	80029ee <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029dc:	f7fe f850 	bl	8000a80 <HAL_GetTick>
 80029e0:	4602      	mov	r2, r0
 80029e2:	693b      	ldr	r3, [r7, #16]
 80029e4:	1ad3      	subs	r3, r2, r3
 80029e6:	2b02      	cmp	r3, #2
 80029e8:	d901      	bls.n	80029ee <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80029ea:	2303      	movs	r3, #3
 80029ec:	e045      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029ee:	4b06      	ldr	r3, [pc, #24]	; (8002a08 <HAL_RCC_OscConfig+0x470>)
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d1f0      	bne.n	80029dc <HAL_RCC_OscConfig+0x444>
 80029fa:	e03d      	b.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	2b01      	cmp	r3, #1
 8002a02:	d107      	bne.n	8002a14 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002a04:	2301      	movs	r3, #1
 8002a06:	e038      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
 8002a08:	40023800 	.word	0x40023800
 8002a0c:	40007000 	.word	0x40007000
 8002a10:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a14:	4b1b      	ldr	r3, [pc, #108]	; (8002a84 <HAL_RCC_OscConfig+0x4ec>)
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d028      	beq.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d121      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d11a      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a44:	4013      	ands	r3, r2
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a4a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a4c:	4293      	cmp	r3, r2
 8002a4e:	d111      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	085b      	lsrs	r3, r3, #1
 8002a5c:	3b01      	subs	r3, #1
 8002a5e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d107      	bne.n	8002a74 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a6e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d001      	beq.n	8002a78 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002a78:	2300      	movs	r3, #0
}
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	3718      	adds	r7, #24
 8002a7e:	46bd      	mov	sp, r7
 8002a80:	bd80      	pop	{r7, pc}
 8002a82:	bf00      	nop
 8002a84:	40023800 	.word	0x40023800

08002a88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d101      	bne.n	8002a9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002a98:	2301      	movs	r3, #1
 8002a9a:	e0cc      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002a9c:	4b68      	ldr	r3, [pc, #416]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0307 	and.w	r3, r3, #7
 8002aa4:	683a      	ldr	r2, [r7, #0]
 8002aa6:	429a      	cmp	r2, r3
 8002aa8:	d90c      	bls.n	8002ac4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002aaa:	4b65      	ldr	r3, [pc, #404]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002aac:	683a      	ldr	r2, [r7, #0]
 8002aae:	b2d2      	uxtb	r2, r2
 8002ab0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ab2:	4b63      	ldr	r3, [pc, #396]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0307 	and.w	r3, r3, #7
 8002aba:	683a      	ldr	r2, [r7, #0]
 8002abc:	429a      	cmp	r2, r3
 8002abe:	d001      	beq.n	8002ac4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e0b8      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d020      	beq.n	8002b12 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d005      	beq.n	8002ae8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002adc:	4b59      	ldr	r3, [pc, #356]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	4a58      	ldr	r2, [pc, #352]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002ae2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002ae6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f003 0308 	and.w	r3, r3, #8
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d005      	beq.n	8002b00 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002af4:	4b53      	ldr	r3, [pc, #332]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002af6:	689b      	ldr	r3, [r3, #8]
 8002af8:	4a52      	ldr	r2, [pc, #328]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002afa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002afe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b00:	4b50      	ldr	r3, [pc, #320]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	494d      	ldr	r1, [pc, #308]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b0e:	4313      	orrs	r3, r2
 8002b10:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 0301 	and.w	r3, r3, #1
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d044      	beq.n	8002ba8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d107      	bne.n	8002b36 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b26:	4b47      	ldr	r3, [pc, #284]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d119      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e07f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	2b02      	cmp	r3, #2
 8002b3c:	d003      	beq.n	8002b46 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002b42:	2b03      	cmp	r3, #3
 8002b44:	d107      	bne.n	8002b56 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002b46:	4b3f      	ldr	r3, [pc, #252]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d109      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b52:	2301      	movs	r3, #1
 8002b54:	e06f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b56:	4b3b      	ldr	r3, [pc, #236]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002b62:	2301      	movs	r3, #1
 8002b64:	e067      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b66:	4b37      	ldr	r3, [pc, #220]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f023 0203 	bic.w	r2, r3, #3
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4934      	ldr	r1, [pc, #208]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b78:	f7fd ff82 	bl	8000a80 <HAL_GetTick>
 8002b7c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b7e:	e00a      	b.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b80:	f7fd ff7e 	bl	8000a80 <HAL_GetTick>
 8002b84:	4602      	mov	r2, r0
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d901      	bls.n	8002b96 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002b92:	2303      	movs	r3, #3
 8002b94:	e04f      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b96:	4b2b      	ldr	r3, [pc, #172]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002b98:	689b      	ldr	r3, [r3, #8]
 8002b9a:	f003 020c 	and.w	r2, r3, #12
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	009b      	lsls	r3, r3, #2
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	d1eb      	bne.n	8002b80 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002ba8:	4b25      	ldr	r3, [pc, #148]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d20c      	bcs.n	8002bd0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bb6:	4b22      	ldr	r3, [pc, #136]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bb8:	683a      	ldr	r2, [r7, #0]
 8002bba:	b2d2      	uxtb	r2, r2
 8002bbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <HAL_RCC_ClockConfig+0x1b8>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0307 	and.w	r3, r3, #7
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d001      	beq.n	8002bd0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002bcc:	2301      	movs	r3, #1
 8002bce:	e032      	b.n	8002c36 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 0304 	and.w	r3, r3, #4
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d008      	beq.n	8002bee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bdc:	4b19      	ldr	r3, [pc, #100]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	68db      	ldr	r3, [r3, #12]
 8002be8:	4916      	ldr	r1, [pc, #88]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bea:	4313      	orrs	r3, r2
 8002bec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f003 0308 	and.w	r3, r3, #8
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d009      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bfa:	4b12      	ldr	r3, [pc, #72]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	691b      	ldr	r3, [r3, #16]
 8002c06:	00db      	lsls	r3, r3, #3
 8002c08:	490e      	ldr	r1, [pc, #56]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c0a:	4313      	orrs	r3, r2
 8002c0c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c0e:	f000 f821 	bl	8002c54 <HAL_RCC_GetSysClockFreq>
 8002c12:	4602      	mov	r2, r0
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <HAL_RCC_ClockConfig+0x1bc>)
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	091b      	lsrs	r3, r3, #4
 8002c1a:	f003 030f 	and.w	r3, r3, #15
 8002c1e:	490a      	ldr	r1, [pc, #40]	; (8002c48 <HAL_RCC_ClockConfig+0x1c0>)
 8002c20:	5ccb      	ldrb	r3, [r1, r3]
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	4a09      	ldr	r2, [pc, #36]	; (8002c4c <HAL_RCC_ClockConfig+0x1c4>)
 8002c28:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_RCC_ClockConfig+0x1c8>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4618      	mov	r0, r3
 8002c30:	f7fd fee2 	bl	80009f8 <HAL_InitTick>

  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
 8002c3e:	bf00      	nop
 8002c40:	40023c00 	.word	0x40023c00
 8002c44:	40023800 	.word	0x40023800
 8002c48:	08007ad0 	.word	0x08007ad0
 8002c4c:	20000000 	.word	0x20000000
 8002c50:	20000004 	.word	0x20000004

08002c54 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c54:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c58:	b094      	sub	sp, #80	; 0x50
 8002c5a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	647b      	str	r3, [r7, #68]	; 0x44
 8002c60:	2300      	movs	r3, #0
 8002c62:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002c64:	2300      	movs	r3, #0
 8002c66:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002c68:	2300      	movs	r3, #0
 8002c6a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002c6c:	4b79      	ldr	r3, [pc, #484]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f003 030c 	and.w	r3, r3, #12
 8002c74:	2b08      	cmp	r3, #8
 8002c76:	d00d      	beq.n	8002c94 <HAL_RCC_GetSysClockFreq+0x40>
 8002c78:	2b08      	cmp	r3, #8
 8002c7a:	f200 80e1 	bhi.w	8002e40 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d002      	beq.n	8002c88 <HAL_RCC_GetSysClockFreq+0x34>
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d003      	beq.n	8002c8e <HAL_RCC_GetSysClockFreq+0x3a>
 8002c86:	e0db      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002c88:	4b73      	ldr	r3, [pc, #460]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002c8a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002c8c:	e0db      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002c8e:	4b73      	ldr	r3, [pc, #460]	; (8002e5c <HAL_RCC_GetSysClockFreq+0x208>)
 8002c90:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002c92:	e0d8      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002c94:	4b6f      	ldr	r3, [pc, #444]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002c9c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002c9e:	4b6d      	ldr	r3, [pc, #436]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ca0:	685b      	ldr	r3, [r3, #4]
 8002ca2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d063      	beq.n	8002d72 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002caa:	4b6a      	ldr	r3, [pc, #424]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	099b      	lsrs	r3, r3, #6
 8002cb0:	2200      	movs	r2, #0
 8002cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002cb4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002cb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cb8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002cbc:	633b      	str	r3, [r7, #48]	; 0x30
 8002cbe:	2300      	movs	r3, #0
 8002cc0:	637b      	str	r3, [r7, #52]	; 0x34
 8002cc2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002cc6:	4622      	mov	r2, r4
 8002cc8:	462b      	mov	r3, r5
 8002cca:	f04f 0000 	mov.w	r0, #0
 8002cce:	f04f 0100 	mov.w	r1, #0
 8002cd2:	0159      	lsls	r1, r3, #5
 8002cd4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002cd8:	0150      	lsls	r0, r2, #5
 8002cda:	4602      	mov	r2, r0
 8002cdc:	460b      	mov	r3, r1
 8002cde:	4621      	mov	r1, r4
 8002ce0:	1a51      	subs	r1, r2, r1
 8002ce2:	6139      	str	r1, [r7, #16]
 8002ce4:	4629      	mov	r1, r5
 8002ce6:	eb63 0301 	sbc.w	r3, r3, r1
 8002cea:	617b      	str	r3, [r7, #20]
 8002cec:	f04f 0200 	mov.w	r2, #0
 8002cf0:	f04f 0300 	mov.w	r3, #0
 8002cf4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002cf8:	4659      	mov	r1, fp
 8002cfa:	018b      	lsls	r3, r1, #6
 8002cfc:	4651      	mov	r1, sl
 8002cfe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d02:	4651      	mov	r1, sl
 8002d04:	018a      	lsls	r2, r1, #6
 8002d06:	4651      	mov	r1, sl
 8002d08:	ebb2 0801 	subs.w	r8, r2, r1
 8002d0c:	4659      	mov	r1, fp
 8002d0e:	eb63 0901 	sbc.w	r9, r3, r1
 8002d12:	f04f 0200 	mov.w	r2, #0
 8002d16:	f04f 0300 	mov.w	r3, #0
 8002d1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d26:	4690      	mov	r8, r2
 8002d28:	4699      	mov	r9, r3
 8002d2a:	4623      	mov	r3, r4
 8002d2c:	eb18 0303 	adds.w	r3, r8, r3
 8002d30:	60bb      	str	r3, [r7, #8]
 8002d32:	462b      	mov	r3, r5
 8002d34:	eb49 0303 	adc.w	r3, r9, r3
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	f04f 0200 	mov.w	r2, #0
 8002d3e:	f04f 0300 	mov.w	r3, #0
 8002d42:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002d46:	4629      	mov	r1, r5
 8002d48:	024b      	lsls	r3, r1, #9
 8002d4a:	4621      	mov	r1, r4
 8002d4c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002d50:	4621      	mov	r1, r4
 8002d52:	024a      	lsls	r2, r1, #9
 8002d54:	4610      	mov	r0, r2
 8002d56:	4619      	mov	r1, r3
 8002d58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002d60:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002d64:	f7fd fa8c 	bl	8000280 <__aeabi_uldivmod>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	460b      	mov	r3, r1
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002d70:	e058      	b.n	8002e24 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d72:	4b38      	ldr	r3, [pc, #224]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002d74:	685b      	ldr	r3, [r3, #4]
 8002d76:	099b      	lsrs	r3, r3, #6
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	4611      	mov	r1, r2
 8002d7e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002d82:	623b      	str	r3, [r7, #32]
 8002d84:	2300      	movs	r3, #0
 8002d86:	627b      	str	r3, [r7, #36]	; 0x24
 8002d88:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002d8c:	4642      	mov	r2, r8
 8002d8e:	464b      	mov	r3, r9
 8002d90:	f04f 0000 	mov.w	r0, #0
 8002d94:	f04f 0100 	mov.w	r1, #0
 8002d98:	0159      	lsls	r1, r3, #5
 8002d9a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d9e:	0150      	lsls	r0, r2, #5
 8002da0:	4602      	mov	r2, r0
 8002da2:	460b      	mov	r3, r1
 8002da4:	4641      	mov	r1, r8
 8002da6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002daa:	4649      	mov	r1, r9
 8002dac:	eb63 0b01 	sbc.w	fp, r3, r1
 8002db0:	f04f 0200 	mov.w	r2, #0
 8002db4:	f04f 0300 	mov.w	r3, #0
 8002db8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002dbc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002dc0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002dc4:	ebb2 040a 	subs.w	r4, r2, sl
 8002dc8:	eb63 050b 	sbc.w	r5, r3, fp
 8002dcc:	f04f 0200 	mov.w	r2, #0
 8002dd0:	f04f 0300 	mov.w	r3, #0
 8002dd4:	00eb      	lsls	r3, r5, #3
 8002dd6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002dda:	00e2      	lsls	r2, r4, #3
 8002ddc:	4614      	mov	r4, r2
 8002dde:	461d      	mov	r5, r3
 8002de0:	4643      	mov	r3, r8
 8002de2:	18e3      	adds	r3, r4, r3
 8002de4:	603b      	str	r3, [r7, #0]
 8002de6:	464b      	mov	r3, r9
 8002de8:	eb45 0303 	adc.w	r3, r5, r3
 8002dec:	607b      	str	r3, [r7, #4]
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002dfa:	4629      	mov	r1, r5
 8002dfc:	028b      	lsls	r3, r1, #10
 8002dfe:	4621      	mov	r1, r4
 8002e00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e04:	4621      	mov	r1, r4
 8002e06:	028a      	lsls	r2, r1, #10
 8002e08:	4610      	mov	r0, r2
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002e0e:	2200      	movs	r2, #0
 8002e10:	61bb      	str	r3, [r7, #24]
 8002e12:	61fa      	str	r2, [r7, #28]
 8002e14:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e18:	f7fd fa32 	bl	8000280 <__aeabi_uldivmod>
 8002e1c:	4602      	mov	r2, r0
 8002e1e:	460b      	mov	r3, r1
 8002e20:	4613      	mov	r3, r2
 8002e22:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e24:	4b0b      	ldr	r3, [pc, #44]	; (8002e54 <HAL_RCC_GetSysClockFreq+0x200>)
 8002e26:	685b      	ldr	r3, [r3, #4]
 8002e28:	0c1b      	lsrs	r3, r3, #16
 8002e2a:	f003 0303 	and.w	r3, r3, #3
 8002e2e:	3301      	adds	r3, #1
 8002e30:	005b      	lsls	r3, r3, #1
 8002e32:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002e34:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e3c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e3e:	e002      	b.n	8002e46 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002e40:	4b05      	ldr	r3, [pc, #20]	; (8002e58 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e42:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e46:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3750      	adds	r7, #80	; 0x50
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002e52:	bf00      	nop
 8002e54:	40023800 	.word	0x40023800
 8002e58:	00f42400 	.word	0x00f42400
 8002e5c:	007a1200 	.word	0x007a1200

08002e60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e64:	4b03      	ldr	r3, [pc, #12]	; (8002e74 <HAL_RCC_GetHCLKFreq+0x14>)
 8002e66:	681b      	ldr	r3, [r3, #0]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	46bd      	mov	sp, r7
 8002e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e70:	4770      	bx	lr
 8002e72:	bf00      	nop
 8002e74:	20000000 	.word	0x20000000

08002e78 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8002e78:	b084      	sub	sp, #16
 8002e7a:	b580      	push	{r7, lr}
 8002e7c:	b084      	sub	sp, #16
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
 8002e82:	f107 001c 	add.w	r0, r7, #28
 8002e86:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8002e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d122      	bne.n	8002ed6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e94:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8002ea4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	68db      	ldr	r3, [r3, #12]
 8002eb0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8002eb8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	d105      	bne.n	8002eca <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002eca:	6878      	ldr	r0, [r7, #4]
 8002ecc:	f001 fbee 	bl	80046ac <USB_CoreReset>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	73fb      	strb	r3, [r7, #15]
 8002ed4:	e01a      	b.n	8002f0c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68db      	ldr	r3, [r3, #12]
 8002eda:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f001 fbe2 	bl	80046ac <USB_CoreReset>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8002eec:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d106      	bne.n	8002f00 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ef6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	639a      	str	r2, [r3, #56]	; 0x38
 8002efe:	e005      	b.n	8002f0c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f04:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8002f0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0e:	2b01      	cmp	r3, #1
 8002f10:	d10b      	bne.n	8002f2a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f043 0206 	orr.w	r2, r3, #6
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f043 0220 	orr.w	r2, r3, #32
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8002f2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3710      	adds	r7, #16
 8002f30:	46bd      	mov	sp, r7
 8002f32:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002f36:	b004      	add	sp, #16
 8002f38:	4770      	bx	lr
	...

08002f3c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b087      	sub	sp, #28
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	60f8      	str	r0, [r7, #12]
 8002f44:	60b9      	str	r1, [r7, #8]
 8002f46:	4613      	mov	r3, r2
 8002f48:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8002f4a:	79fb      	ldrb	r3, [r7, #7]
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d165      	bne.n	800301c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8002f50:	68bb      	ldr	r3, [r7, #8]
 8002f52:	4a41      	ldr	r2, [pc, #260]	; (8003058 <USB_SetTurnaroundTime+0x11c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d906      	bls.n	8002f66 <USB_SetTurnaroundTime+0x2a>
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	4a40      	ldr	r2, [pc, #256]	; (800305c <USB_SetTurnaroundTime+0x120>)
 8002f5c:	4293      	cmp	r3, r2
 8002f5e:	d202      	bcs.n	8002f66 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8002f60:	230f      	movs	r3, #15
 8002f62:	617b      	str	r3, [r7, #20]
 8002f64:	e062      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8002f66:	68bb      	ldr	r3, [r7, #8]
 8002f68:	4a3c      	ldr	r2, [pc, #240]	; (800305c <USB_SetTurnaroundTime+0x120>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d306      	bcc.n	8002f7c <USB_SetTurnaroundTime+0x40>
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	4a3b      	ldr	r2, [pc, #236]	; (8003060 <USB_SetTurnaroundTime+0x124>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d202      	bcs.n	8002f7c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8002f76:	230e      	movs	r3, #14
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e057      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	4a38      	ldr	r2, [pc, #224]	; (8003060 <USB_SetTurnaroundTime+0x124>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d306      	bcc.n	8002f92 <USB_SetTurnaroundTime+0x56>
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4a37      	ldr	r2, [pc, #220]	; (8003064 <USB_SetTurnaroundTime+0x128>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d202      	bcs.n	8002f92 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8002f8c:	230d      	movs	r3, #13
 8002f8e:	617b      	str	r3, [r7, #20]
 8002f90:	e04c      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8002f92:	68bb      	ldr	r3, [r7, #8]
 8002f94:	4a33      	ldr	r2, [pc, #204]	; (8003064 <USB_SetTurnaroundTime+0x128>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d306      	bcc.n	8002fa8 <USB_SetTurnaroundTime+0x6c>
 8002f9a:	68bb      	ldr	r3, [r7, #8]
 8002f9c:	4a32      	ldr	r2, [pc, #200]	; (8003068 <USB_SetTurnaroundTime+0x12c>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d802      	bhi.n	8002fa8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8002fa2:	230c      	movs	r3, #12
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e041      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8002fa8:	68bb      	ldr	r3, [r7, #8]
 8002faa:	4a2f      	ldr	r2, [pc, #188]	; (8003068 <USB_SetTurnaroundTime+0x12c>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d906      	bls.n	8002fbe <USB_SetTurnaroundTime+0x82>
 8002fb0:	68bb      	ldr	r3, [r7, #8]
 8002fb2:	4a2e      	ldr	r2, [pc, #184]	; (800306c <USB_SetTurnaroundTime+0x130>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d802      	bhi.n	8002fbe <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8002fb8:	230b      	movs	r3, #11
 8002fba:	617b      	str	r3, [r7, #20]
 8002fbc:	e036      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8002fbe:	68bb      	ldr	r3, [r7, #8]
 8002fc0:	4a2a      	ldr	r2, [pc, #168]	; (800306c <USB_SetTurnaroundTime+0x130>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d906      	bls.n	8002fd4 <USB_SetTurnaroundTime+0x98>
 8002fc6:	68bb      	ldr	r3, [r7, #8]
 8002fc8:	4a29      	ldr	r2, [pc, #164]	; (8003070 <USB_SetTurnaroundTime+0x134>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d802      	bhi.n	8002fd4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8002fce:	230a      	movs	r3, #10
 8002fd0:	617b      	str	r3, [r7, #20]
 8002fd2:	e02b      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4a26      	ldr	r2, [pc, #152]	; (8003070 <USB_SetTurnaroundTime+0x134>)
 8002fd8:	4293      	cmp	r3, r2
 8002fda:	d906      	bls.n	8002fea <USB_SetTurnaroundTime+0xae>
 8002fdc:	68bb      	ldr	r3, [r7, #8]
 8002fde:	4a25      	ldr	r2, [pc, #148]	; (8003074 <USB_SetTurnaroundTime+0x138>)
 8002fe0:	4293      	cmp	r3, r2
 8002fe2:	d202      	bcs.n	8002fea <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8002fe4:	2309      	movs	r3, #9
 8002fe6:	617b      	str	r3, [r7, #20]
 8002fe8:	e020      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4a21      	ldr	r2, [pc, #132]	; (8003074 <USB_SetTurnaroundTime+0x138>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d306      	bcc.n	8003000 <USB_SetTurnaroundTime+0xc4>
 8002ff2:	68bb      	ldr	r3, [r7, #8]
 8002ff4:	4a20      	ldr	r2, [pc, #128]	; (8003078 <USB_SetTurnaroundTime+0x13c>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d802      	bhi.n	8003000 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8002ffa:	2308      	movs	r3, #8
 8002ffc:	617b      	str	r3, [r7, #20]
 8002ffe:	e015      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	4a1d      	ldr	r2, [pc, #116]	; (8003078 <USB_SetTurnaroundTime+0x13c>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d906      	bls.n	8003016 <USB_SetTurnaroundTime+0xda>
 8003008:	68bb      	ldr	r3, [r7, #8]
 800300a:	4a1c      	ldr	r2, [pc, #112]	; (800307c <USB_SetTurnaroundTime+0x140>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d202      	bcs.n	8003016 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003010:	2307      	movs	r3, #7
 8003012:	617b      	str	r3, [r7, #20]
 8003014:	e00a      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003016:	2306      	movs	r3, #6
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	e007      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800301c:	79fb      	ldrb	r3, [r7, #7]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d102      	bne.n	8003028 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003022:	2309      	movs	r3, #9
 8003024:	617b      	str	r3, [r7, #20]
 8003026:	e001      	b.n	800302c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003028:	2309      	movs	r3, #9
 800302a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	68db      	ldr	r3, [r3, #12]
 8003030:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	697b      	ldr	r3, [r7, #20]
 800303e:	029b      	lsls	r3, r3, #10
 8003040:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003044:	431a      	orrs	r2, r3
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	371c      	adds	r7, #28
 8003050:	46bd      	mov	sp, r7
 8003052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003056:	4770      	bx	lr
 8003058:	00d8acbf 	.word	0x00d8acbf
 800305c:	00e4e1c0 	.word	0x00e4e1c0
 8003060:	00f42400 	.word	0x00f42400
 8003064:	01067380 	.word	0x01067380
 8003068:	011a499f 	.word	0x011a499f
 800306c:	01312cff 	.word	0x01312cff
 8003070:	014ca43f 	.word	0x014ca43f
 8003074:	016e3600 	.word	0x016e3600
 8003078:	01a6ab1f 	.word	0x01a6ab1f
 800307c:	01e84800 	.word	0x01e84800

08003080 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003080:	b480      	push	{r7}
 8003082:	b083      	sub	sp, #12
 8003084:	af00      	add	r7, sp, #0
 8003086:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	689b      	ldr	r3, [r3, #8]
 800308c:	f043 0201 	orr.w	r2, r3, #1
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	370c      	adds	r7, #12
 800309a:	46bd      	mov	sp, r7
 800309c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a0:	4770      	bx	lr

080030a2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80030a2:	b480      	push	{r7}
 80030a4:	b083      	sub	sp, #12
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	f023 0201 	bic.w	r2, r3, #1
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80030b6:	2300      	movs	r3, #0
}
 80030b8:	4618      	mov	r0, r3
 80030ba:	370c      	adds	r7, #12
 80030bc:	46bd      	mov	sp, r7
 80030be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c2:	4770      	bx	lr

080030c4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b084      	sub	sp, #16
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
 80030cc:	460b      	mov	r3, r1
 80030ce:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80030d0:	2300      	movs	r3, #0
 80030d2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80030e0:	78fb      	ldrb	r3, [r7, #3]
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d115      	bne.n	8003112 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	68db      	ldr	r3, [r3, #12]
 80030ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80030f2:	2001      	movs	r0, #1
 80030f4:	f7fd fcd0 	bl	8000a98 <HAL_Delay>
      ms++;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	3301      	adds	r3, #1
 80030fc:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f001 fa45 	bl	800458e <USB_GetMode>
 8003104:	4603      	mov	r3, r0
 8003106:	2b01      	cmp	r3, #1
 8003108:	d01e      	beq.n	8003148 <USB_SetCurrentMode+0x84>
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2b31      	cmp	r3, #49	; 0x31
 800310e:	d9f0      	bls.n	80030f2 <USB_SetCurrentMode+0x2e>
 8003110:	e01a      	b.n	8003148 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003112:	78fb      	ldrb	r3, [r7, #3]
 8003114:	2b00      	cmp	r3, #0
 8003116:	d115      	bne.n	8003144 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	68db      	ldr	r3, [r3, #12]
 800311c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003124:	2001      	movs	r0, #1
 8003126:	f7fd fcb7 	bl	8000a98 <HAL_Delay>
      ms++;
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	3301      	adds	r3, #1
 800312e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003130:	6878      	ldr	r0, [r7, #4]
 8003132:	f001 fa2c 	bl	800458e <USB_GetMode>
 8003136:	4603      	mov	r3, r0
 8003138:	2b00      	cmp	r3, #0
 800313a:	d005      	beq.n	8003148 <USB_SetCurrentMode+0x84>
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	2b31      	cmp	r3, #49	; 0x31
 8003140:	d9f0      	bls.n	8003124 <USB_SetCurrentMode+0x60>
 8003142:	e001      	b.n	8003148 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003144:	2301      	movs	r3, #1
 8003146:	e005      	b.n	8003154 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b32      	cmp	r3, #50	; 0x32
 800314c:	d101      	bne.n	8003152 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800314e:	2301      	movs	r3, #1
 8003150:	e000      	b.n	8003154 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003152:	2300      	movs	r3, #0
}
 8003154:	4618      	mov	r0, r3
 8003156:	3710      	adds	r7, #16
 8003158:	46bd      	mov	sp, r7
 800315a:	bd80      	pop	{r7, pc}

0800315c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800315c:	b084      	sub	sp, #16
 800315e:	b580      	push	{r7, lr}
 8003160:	b086      	sub	sp, #24
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
 8003166:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800316a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800316e:	2300      	movs	r3, #0
 8003170:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003176:	2300      	movs	r3, #0
 8003178:	613b      	str	r3, [r7, #16]
 800317a:	e009      	b.n	8003190 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800317c:	687a      	ldr	r2, [r7, #4]
 800317e:	693b      	ldr	r3, [r7, #16]
 8003180:	3340      	adds	r3, #64	; 0x40
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	4413      	add	r3, r2
 8003186:	2200      	movs	r2, #0
 8003188:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	3301      	adds	r3, #1
 800318e:	613b      	str	r3, [r7, #16]
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	2b0e      	cmp	r3, #14
 8003194:	d9f2      	bls.n	800317c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003198:	2b00      	cmp	r3, #0
 800319a:	d11c      	bne.n	80031d6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80031aa:	f043 0302 	orr.w	r3, r3, #2
 80031ae:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031b4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031cc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	639a      	str	r2, [r3, #56]	; 0x38
 80031d4:	e00b      	b.n	80031ee <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031da:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031e6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80031f4:	461a      	mov	r2, r3
 80031f6:	2300      	movs	r3, #0
 80031f8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003200:	4619      	mov	r1, r3
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003208:	461a      	mov	r2, r3
 800320a:	680b      	ldr	r3, [r1, #0]
 800320c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800320e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003210:	2b01      	cmp	r3, #1
 8003212:	d10c      	bne.n	800322e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003214:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003216:	2b00      	cmp	r3, #0
 8003218:	d104      	bne.n	8003224 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800321a:	2100      	movs	r1, #0
 800321c:	6878      	ldr	r0, [r7, #4]
 800321e:	f000 f965 	bl	80034ec <USB_SetDevSpeed>
 8003222:	e008      	b.n	8003236 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003224:	2101      	movs	r1, #1
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f960 	bl	80034ec <USB_SetDevSpeed>
 800322c:	e003      	b.n	8003236 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800322e:	2103      	movs	r1, #3
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 f95b 	bl	80034ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003236:	2110      	movs	r1, #16
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 f8f3 	bl	8003424 <USB_FlushTxFifo>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003248:	6878      	ldr	r0, [r7, #4]
 800324a:	f000 f91f 	bl	800348c <USB_FlushRxFifo>
 800324e:	4603      	mov	r3, r0
 8003250:	2b00      	cmp	r3, #0
 8003252:	d001      	beq.n	8003258 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800325e:	461a      	mov	r2, r3
 8003260:	2300      	movs	r3, #0
 8003262:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800326a:	461a      	mov	r2, r3
 800326c:	2300      	movs	r3, #0
 800326e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003276:	461a      	mov	r2, r3
 8003278:	2300      	movs	r3, #0
 800327a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800327c:	2300      	movs	r3, #0
 800327e:	613b      	str	r3, [r7, #16]
 8003280:	e043      	b.n	800330a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	4413      	add	r3, r2
 800328a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003294:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003298:	d118      	bne.n	80032cc <USB_DevInit+0x170>
    {
      if (i == 0U)
 800329a:	693b      	ldr	r3, [r7, #16]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d10a      	bne.n	80032b6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80032a0:	693b      	ldr	r3, [r7, #16]
 80032a2:	015a      	lsls	r2, r3, #5
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	4413      	add	r3, r2
 80032a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ac:	461a      	mov	r2, r3
 80032ae:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80032b2:	6013      	str	r3, [r2, #0]
 80032b4:	e013      	b.n	80032de <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80032b6:	693b      	ldr	r3, [r7, #16]
 80032b8:	015a      	lsls	r2, r3, #5
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	4413      	add	r3, r2
 80032be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032c2:	461a      	mov	r2, r3
 80032c4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e008      	b.n	80032de <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	015a      	lsls	r2, r3, #5
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	4413      	add	r3, r2
 80032d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032d8:	461a      	mov	r2, r3
 80032da:	2300      	movs	r3, #0
 80032dc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	015a      	lsls	r2, r3, #5
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	4413      	add	r3, r2
 80032e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032ea:	461a      	mov	r2, r3
 80032ec:	2300      	movs	r3, #0
 80032ee:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	015a      	lsls	r2, r3, #5
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	4413      	add	r3, r2
 80032f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80032fc:	461a      	mov	r2, r3
 80032fe:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003302:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	3301      	adds	r3, #1
 8003308:	613b      	str	r3, [r7, #16]
 800330a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	429a      	cmp	r2, r3
 8003310:	d3b7      	bcc.n	8003282 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	e043      	b.n	80033a0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	015a      	lsls	r2, r3, #5
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4413      	add	r3, r2
 8003320:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800332a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800332e:	d118      	bne.n	8003362 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	2b00      	cmp	r3, #0
 8003334:	d10a      	bne.n	800334c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	015a      	lsls	r2, r3, #5
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	4413      	add	r3, r2
 800333e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003342:	461a      	mov	r2, r3
 8003344:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003348:	6013      	str	r3, [r2, #0]
 800334a:	e013      	b.n	8003374 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	015a      	lsls	r2, r3, #5
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	4413      	add	r3, r2
 8003354:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003358:	461a      	mov	r2, r3
 800335a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800335e:	6013      	str	r3, [r2, #0]
 8003360:	e008      	b.n	8003374 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	015a      	lsls	r2, r3, #5
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	4413      	add	r3, r2
 800336a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800336e:	461a      	mov	r2, r3
 8003370:	2300      	movs	r3, #0
 8003372:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003374:	693b      	ldr	r3, [r7, #16]
 8003376:	015a      	lsls	r2, r3, #5
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	4413      	add	r3, r2
 800337c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003380:	461a      	mov	r2, r3
 8003382:	2300      	movs	r3, #0
 8003384:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	015a      	lsls	r2, r3, #5
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	4413      	add	r3, r2
 800338e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003392:	461a      	mov	r2, r3
 8003394:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003398:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	3301      	adds	r3, #1
 800339e:	613b      	str	r3, [r7, #16]
 80033a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a2:	693a      	ldr	r2, [r7, #16]
 80033a4:	429a      	cmp	r2, r3
 80033a6:	d3b7      	bcc.n	8003318 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80033ae:	691b      	ldr	r3, [r3, #16]
 80033b0:	68fa      	ldr	r2, [r7, #12]
 80033b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80033b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033ba:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80033c8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80033ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d105      	bne.n	80033dc <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	699b      	ldr	r3, [r3, #24]
 80033d4:	f043 0210 	orr.w	r2, r3, #16
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	699a      	ldr	r2, [r3, #24]
 80033e0:	4b0f      	ldr	r3, [pc, #60]	; (8003420 <USB_DevInit+0x2c4>)
 80033e2:	4313      	orrs	r3, r2
 80033e4:	687a      	ldr	r2, [r7, #4]
 80033e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80033e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d005      	beq.n	80033fa <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	699b      	ldr	r3, [r3, #24]
 80033f2:	f043 0208 	orr.w	r2, r3, #8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80033fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033fc:	2b01      	cmp	r3, #1
 80033fe:	d107      	bne.n	8003410 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	687a      	ldr	r2, [r7, #4]
 800340e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003410:	7dfb      	ldrb	r3, [r7, #23]
}
 8003412:	4618      	mov	r0, r3
 8003414:	3718      	adds	r7, #24
 8003416:	46bd      	mov	sp, r7
 8003418:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800341c:	b004      	add	sp, #16
 800341e:	4770      	bx	lr
 8003420:	803c3800 	.word	0x803c3800

08003424 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003424:	b480      	push	{r7}
 8003426:	b085      	sub	sp, #20
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
 800342c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	4a13      	ldr	r2, [pc, #76]	; (8003488 <USB_FlushTxFifo+0x64>)
 800343c:	4293      	cmp	r3, r2
 800343e:	d901      	bls.n	8003444 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003440:	2303      	movs	r3, #3
 8003442:	e01b      	b.n	800347c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	691b      	ldr	r3, [r3, #16]
 8003448:	2b00      	cmp	r3, #0
 800344a:	daf2      	bge.n	8003432 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	019b      	lsls	r3, r3, #6
 8003454:	f043 0220 	orr.w	r2, r3, #32
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	3301      	adds	r3, #1
 8003460:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	4a08      	ldr	r2, [pc, #32]	; (8003488 <USB_FlushTxFifo+0x64>)
 8003466:	4293      	cmp	r3, r2
 8003468:	d901      	bls.n	800346e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e006      	b.n	800347c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	f003 0320 	and.w	r3, r3, #32
 8003476:	2b20      	cmp	r3, #32
 8003478:	d0f0      	beq.n	800345c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800347a:	2300      	movs	r3, #0
}
 800347c:	4618      	mov	r0, r3
 800347e:	3714      	adds	r7, #20
 8003480:	46bd      	mov	sp, r7
 8003482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003486:	4770      	bx	lr
 8003488:	00030d40 	.word	0x00030d40

0800348c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800348c:	b480      	push	{r7}
 800348e:	b085      	sub	sp, #20
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	3301      	adds	r3, #1
 800349c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	4a11      	ldr	r2, [pc, #68]	; (80034e8 <USB_FlushRxFifo+0x5c>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d901      	bls.n	80034aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e018      	b.n	80034dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	daf2      	bge.n	8003498 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80034b2:	2300      	movs	r3, #0
 80034b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2210      	movs	r2, #16
 80034ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	3301      	adds	r3, #1
 80034c0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	4a08      	ldr	r2, [pc, #32]	; (80034e8 <USB_FlushRxFifo+0x5c>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d901      	bls.n	80034ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e006      	b.n	80034dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	691b      	ldr	r3, [r3, #16]
 80034d2:	f003 0310 	and.w	r3, r3, #16
 80034d6:	2b10      	cmp	r3, #16
 80034d8:	d0f0      	beq.n	80034bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80034da:	2300      	movs	r3, #0
}
 80034dc:	4618      	mov	r0, r3
 80034de:	3714      	adds	r7, #20
 80034e0:	46bd      	mov	sp, r7
 80034e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e6:	4770      	bx	lr
 80034e8:	00030d40 	.word	0x00030d40

080034ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
 80034f4:	460b      	mov	r3, r1
 80034f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003502:	681a      	ldr	r2, [r3, #0]
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	68f9      	ldr	r1, [r7, #12]
 8003508:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800350c:	4313      	orrs	r3, r2
 800350e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 800351e:	b480      	push	{r7}
 8003520:	b087      	sub	sp, #28
 8003522:	af00      	add	r7, sp, #0
 8003524:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003530:	689b      	ldr	r3, [r3, #8]
 8003532:	f003 0306 	and.w	r3, r3, #6
 8003536:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2b00      	cmp	r3, #0
 800353c:	d102      	bne.n	8003544 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800353e:	2300      	movs	r3, #0
 8003540:	75fb      	strb	r3, [r7, #23]
 8003542:	e00a      	b.n	800355a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2b02      	cmp	r3, #2
 8003548:	d002      	beq.n	8003550 <USB_GetDevSpeed+0x32>
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2b06      	cmp	r3, #6
 800354e:	d102      	bne.n	8003556 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003550:	2302      	movs	r3, #2
 8003552:	75fb      	strb	r3, [r7, #23]
 8003554:	e001      	b.n	800355a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003556:	230f      	movs	r3, #15
 8003558:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 800355a:	7dfb      	ldrb	r3, [r7, #23]
}
 800355c:	4618      	mov	r0, r3
 800355e:	371c      	adds	r7, #28
 8003560:	46bd      	mov	sp, r7
 8003562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003566:	4770      	bx	lr

08003568 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003568:	b480      	push	{r7}
 800356a:	b085      	sub	sp, #20
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	781b      	ldrb	r3, [r3, #0]
 800357a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	785b      	ldrb	r3, [r3, #1]
 8003580:	2b01      	cmp	r3, #1
 8003582:	d13a      	bne.n	80035fa <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800358a:	69da      	ldr	r2, [r3, #28]
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	f003 030f 	and.w	r3, r3, #15
 8003594:	2101      	movs	r1, #1
 8003596:	fa01 f303 	lsl.w	r3, r1, r3
 800359a:	b29b      	uxth	r3, r3
 800359c:	68f9      	ldr	r1, [r7, #12]
 800359e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80035a2:	4313      	orrs	r3, r2
 80035a4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80035a6:	68bb      	ldr	r3, [r7, #8]
 80035a8:	015a      	lsls	r2, r3, #5
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	4413      	add	r3, r2
 80035ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d155      	bne.n	8003668 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035bc:	68bb      	ldr	r3, [r7, #8]
 80035be:	015a      	lsls	r2, r3, #5
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	4413      	add	r3, r2
 80035c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80035c8:	681a      	ldr	r2, [r3, #0]
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	68db      	ldr	r3, [r3, #12]
 80035ce:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	791b      	ldrb	r3, [r3, #4]
 80035d6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035d8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80035da:	68bb      	ldr	r3, [r7, #8]
 80035dc:	059b      	lsls	r3, r3, #22
 80035de:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80035e0:	4313      	orrs	r3, r2
 80035e2:	68ba      	ldr	r2, [r7, #8]
 80035e4:	0151      	lsls	r1, r2, #5
 80035e6:	68fa      	ldr	r2, [r7, #12]
 80035e8:	440a      	add	r2, r1
 80035ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80035ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035f2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80035f6:	6013      	str	r3, [r2, #0]
 80035f8:	e036      	b.n	8003668 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003600:	69da      	ldr	r2, [r3, #28]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	781b      	ldrb	r3, [r3, #0]
 8003606:	f003 030f 	and.w	r3, r3, #15
 800360a:	2101      	movs	r1, #1
 800360c:	fa01 f303 	lsl.w	r3, r1, r3
 8003610:	041b      	lsls	r3, r3, #16
 8003612:	68f9      	ldr	r1, [r7, #12]
 8003614:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003618:	4313      	orrs	r3, r2
 800361a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 800361c:	68bb      	ldr	r3, [r7, #8]
 800361e:	015a      	lsls	r2, r3, #5
 8003620:	68fb      	ldr	r3, [r7, #12]
 8003622:	4413      	add	r3, r2
 8003624:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800362e:	2b00      	cmp	r3, #0
 8003630:	d11a      	bne.n	8003668 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003632:	68bb      	ldr	r3, [r7, #8]
 8003634:	015a      	lsls	r2, r3, #5
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	4413      	add	r3, r2
 800363a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800363e:	681a      	ldr	r2, [r3, #0]
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	68db      	ldr	r3, [r3, #12]
 8003644:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	791b      	ldrb	r3, [r3, #4]
 800364c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800364e:	430b      	orrs	r3, r1
 8003650:	4313      	orrs	r3, r2
 8003652:	68ba      	ldr	r2, [r7, #8]
 8003654:	0151      	lsls	r1, r2, #5
 8003656:	68fa      	ldr	r2, [r7, #12]
 8003658:	440a      	add	r2, r1
 800365a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800365e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003662:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003666:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3714      	adds	r7, #20
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr
	...

08003678 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003678:	b480      	push	{r7}
 800367a:	b085      	sub	sp, #20
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	781b      	ldrb	r3, [r3, #0]
 800368a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	785b      	ldrb	r3, [r3, #1]
 8003690:	2b01      	cmp	r3, #1
 8003692:	d161      	bne.n	8003758 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	015a      	lsls	r2, r3, #5
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	4413      	add	r3, r2
 800369c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80036a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80036aa:	d11f      	bne.n	80036ec <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 80036ac:	68bb      	ldr	r3, [r7, #8]
 80036ae:	015a      	lsls	r2, r3, #5
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4413      	add	r3, r2
 80036b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	0151      	lsls	r1, r2, #5
 80036be:	68fa      	ldr	r2, [r7, #12]
 80036c0:	440a      	add	r2, r1
 80036c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036c6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80036ca:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80036cc:	68bb      	ldr	r3, [r7, #8]
 80036ce:	015a      	lsls	r2, r3, #5
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	4413      	add	r3, r2
 80036d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68ba      	ldr	r2, [r7, #8]
 80036dc:	0151      	lsls	r1, r2, #5
 80036de:	68fa      	ldr	r2, [r7, #12]
 80036e0:	440a      	add	r2, r1
 80036e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80036e6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80036ea:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	781b      	ldrb	r3, [r3, #0]
 80036f8:	f003 030f 	and.w	r3, r3, #15
 80036fc:	2101      	movs	r1, #1
 80036fe:	fa01 f303 	lsl.w	r3, r1, r3
 8003702:	b29b      	uxth	r3, r3
 8003704:	43db      	mvns	r3, r3
 8003706:	68f9      	ldr	r1, [r7, #12]
 8003708:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800370c:	4013      	ands	r3, r2
 800370e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	781b      	ldrb	r3, [r3, #0]
 800371c:	f003 030f 	and.w	r3, r3, #15
 8003720:	2101      	movs	r1, #1
 8003722:	fa01 f303 	lsl.w	r3, r1, r3
 8003726:	b29b      	uxth	r3, r3
 8003728:	43db      	mvns	r3, r3
 800372a:	68f9      	ldr	r1, [r7, #12]
 800372c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003730:	4013      	ands	r3, r2
 8003732:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003734:	68bb      	ldr	r3, [r7, #8]
 8003736:	015a      	lsls	r2, r3, #5
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	4413      	add	r3, r2
 800373c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	0159      	lsls	r1, r3, #5
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	440b      	add	r3, r1
 800374a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800374e:	4619      	mov	r1, r3
 8003750:	4b35      	ldr	r3, [pc, #212]	; (8003828 <USB_DeactivateEndpoint+0x1b0>)
 8003752:	4013      	ands	r3, r2
 8003754:	600b      	str	r3, [r1, #0]
 8003756:	e060      	b.n	800381a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003758:	68bb      	ldr	r3, [r7, #8]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800376a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800376e:	d11f      	bne.n	80037b0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	015a      	lsls	r2, r3, #5
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	4413      	add	r3, r2
 8003778:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68ba      	ldr	r2, [r7, #8]
 8003780:	0151      	lsls	r1, r2, #5
 8003782:	68fa      	ldr	r2, [r7, #12]
 8003784:	440a      	add	r2, r1
 8003786:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800378a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800378e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003790:	68bb      	ldr	r3, [r7, #8]
 8003792:	015a      	lsls	r2, r3, #5
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	4413      	add	r3, r2
 8003798:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	0151      	lsls	r1, r2, #5
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	440a      	add	r2, r1
 80037a6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80037aa:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80037ae:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80037b8:	683b      	ldr	r3, [r7, #0]
 80037ba:	781b      	ldrb	r3, [r3, #0]
 80037bc:	f003 030f 	and.w	r3, r3, #15
 80037c0:	2101      	movs	r1, #1
 80037c2:	fa01 f303 	lsl.w	r3, r1, r3
 80037c6:	041b      	lsls	r3, r3, #16
 80037c8:	43db      	mvns	r3, r3
 80037ca:	68f9      	ldr	r1, [r7, #12]
 80037cc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037d0:	4013      	ands	r3, r2
 80037d2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	781b      	ldrb	r3, [r3, #0]
 80037e0:	f003 030f 	and.w	r3, r3, #15
 80037e4:	2101      	movs	r1, #1
 80037e6:	fa01 f303 	lsl.w	r3, r1, r3
 80037ea:	041b      	lsls	r3, r3, #16
 80037ec:	43db      	mvns	r3, r3
 80037ee:	68f9      	ldr	r1, [r7, #12]
 80037f0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80037f4:	4013      	ands	r3, r2
 80037f6:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80037f8:	68bb      	ldr	r3, [r7, #8]
 80037fa:	015a      	lsls	r2, r3, #5
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	4413      	add	r3, r2
 8003800:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	0159      	lsls	r1, r3, #5
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	440b      	add	r3, r1
 800380e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003812:	4619      	mov	r1, r3
 8003814:	4b05      	ldr	r3, [pc, #20]	; (800382c <USB_DeactivateEndpoint+0x1b4>)
 8003816:	4013      	ands	r3, r2
 8003818:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr
 8003828:	ec337800 	.word	0xec337800
 800382c:	eff37800 	.word	0xeff37800

08003830 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b08a      	sub	sp, #40	; 0x28
 8003834:	af02      	add	r7, sp, #8
 8003836:	60f8      	str	r0, [r7, #12]
 8003838:	60b9      	str	r1, [r7, #8]
 800383a:	4613      	mov	r3, r2
 800383c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003842:	68bb      	ldr	r3, [r7, #8]
 8003844:	781b      	ldrb	r3, [r3, #0]
 8003846:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	785b      	ldrb	r3, [r3, #1]
 800384c:	2b01      	cmp	r3, #1
 800384e:	f040 815c 	bne.w	8003b0a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003852:	68bb      	ldr	r3, [r7, #8]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d132      	bne.n	80038c0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800385a:	69bb      	ldr	r3, [r7, #24]
 800385c:	015a      	lsls	r2, r3, #5
 800385e:	69fb      	ldr	r3, [r7, #28]
 8003860:	4413      	add	r3, r2
 8003862:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003866:	691b      	ldr	r3, [r3, #16]
 8003868:	69ba      	ldr	r2, [r7, #24]
 800386a:	0151      	lsls	r1, r2, #5
 800386c:	69fa      	ldr	r2, [r7, #28]
 800386e:	440a      	add	r2, r1
 8003870:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003874:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003878:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800387c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800387e:	69bb      	ldr	r3, [r7, #24]
 8003880:	015a      	lsls	r2, r3, #5
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	4413      	add	r3, r2
 8003886:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800388a:	691b      	ldr	r3, [r3, #16]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	0151      	lsls	r1, r2, #5
 8003890:	69fa      	ldr	r2, [r7, #28]
 8003892:	440a      	add	r2, r1
 8003894:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003898:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800389c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800389e:	69bb      	ldr	r3, [r7, #24]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	69fb      	ldr	r3, [r7, #28]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038aa:	691b      	ldr	r3, [r3, #16]
 80038ac:	69ba      	ldr	r2, [r7, #24]
 80038ae:	0151      	lsls	r1, r2, #5
 80038b0:	69fa      	ldr	r2, [r7, #28]
 80038b2:	440a      	add	r2, r1
 80038b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038b8:	0cdb      	lsrs	r3, r3, #19
 80038ba:	04db      	lsls	r3, r3, #19
 80038bc:	6113      	str	r3, [r2, #16]
 80038be:	e074      	b.n	80039aa <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	69fb      	ldr	r3, [r7, #28]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038cc:	691b      	ldr	r3, [r3, #16]
 80038ce:	69ba      	ldr	r2, [r7, #24]
 80038d0:	0151      	lsls	r1, r2, #5
 80038d2:	69fa      	ldr	r2, [r7, #28]
 80038d4:	440a      	add	r2, r1
 80038d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038da:	0cdb      	lsrs	r3, r3, #19
 80038dc:	04db      	lsls	r3, r3, #19
 80038de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80038e0:	69bb      	ldr	r3, [r7, #24]
 80038e2:	015a      	lsls	r2, r3, #5
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	4413      	add	r3, r2
 80038e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	69ba      	ldr	r2, [r7, #24]
 80038f0:	0151      	lsls	r1, r2, #5
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	440a      	add	r2, r1
 80038f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80038fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80038fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003902:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003904:	69bb      	ldr	r3, [r7, #24]
 8003906:	015a      	lsls	r2, r3, #5
 8003908:	69fb      	ldr	r3, [r7, #28]
 800390a:	4413      	add	r3, r2
 800390c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003910:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	6999      	ldr	r1, [r3, #24]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	68db      	ldr	r3, [r3, #12]
 800391a:	440b      	add	r3, r1
 800391c:	1e59      	subs	r1, r3, #1
 800391e:	68bb      	ldr	r3, [r7, #8]
 8003920:	68db      	ldr	r3, [r3, #12]
 8003922:	fbb1 f3f3 	udiv	r3, r1, r3
 8003926:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003928:	4b9d      	ldr	r3, [pc, #628]	; (8003ba0 <USB_EPStartXfer+0x370>)
 800392a:	400b      	ands	r3, r1
 800392c:	69b9      	ldr	r1, [r7, #24]
 800392e:	0148      	lsls	r0, r1, #5
 8003930:	69f9      	ldr	r1, [r7, #28]
 8003932:	4401      	add	r1, r0
 8003934:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003938:	4313      	orrs	r3, r2
 800393a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800393c:	69bb      	ldr	r3, [r7, #24]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003948:	691a      	ldr	r2, [r3, #16]
 800394a:	68bb      	ldr	r3, [r7, #8]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003952:	69b9      	ldr	r1, [r7, #24]
 8003954:	0148      	lsls	r0, r1, #5
 8003956:	69f9      	ldr	r1, [r7, #28]
 8003958:	4401      	add	r1, r0
 800395a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800395e:	4313      	orrs	r3, r2
 8003960:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	791b      	ldrb	r3, [r3, #4]
 8003966:	2b01      	cmp	r3, #1
 8003968:	d11f      	bne.n	80039aa <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800396a:	69bb      	ldr	r3, [r7, #24]
 800396c:	015a      	lsls	r2, r3, #5
 800396e:	69fb      	ldr	r3, [r7, #28]
 8003970:	4413      	add	r3, r2
 8003972:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003976:	691b      	ldr	r3, [r3, #16]
 8003978:	69ba      	ldr	r2, [r7, #24]
 800397a:	0151      	lsls	r1, r2, #5
 800397c:	69fa      	ldr	r2, [r7, #28]
 800397e:	440a      	add	r2, r1
 8003980:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003984:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003988:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	015a      	lsls	r2, r3, #5
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	4413      	add	r3, r2
 8003992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	0151      	lsls	r1, r2, #5
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	440a      	add	r2, r1
 80039a0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80039a8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80039aa:	79fb      	ldrb	r3, [r7, #7]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d14b      	bne.n	8003a48 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80039b0:	68bb      	ldr	r3, [r7, #8]
 80039b2:	695b      	ldr	r3, [r3, #20]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d009      	beq.n	80039cc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80039b8:	69bb      	ldr	r3, [r7, #24]
 80039ba:	015a      	lsls	r2, r3, #5
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	4413      	add	r3, r2
 80039c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039c4:	461a      	mov	r2, r3
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	695b      	ldr	r3, [r3, #20]
 80039ca:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	791b      	ldrb	r3, [r3, #4]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d128      	bne.n	8003a26 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80039d4:	69fb      	ldr	r3, [r7, #28]
 80039d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d110      	bne.n	8003a06 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	69fb      	ldr	r3, [r7, #28]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	69ba      	ldr	r2, [r7, #24]
 80039f4:	0151      	lsls	r1, r2, #5
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	440a      	add	r2, r1
 80039fa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80039fe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a02:	6013      	str	r3, [r2, #0]
 8003a04:	e00f      	b.n	8003a26 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003a06:	69bb      	ldr	r3, [r7, #24]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	0151      	lsls	r1, r2, #5
 8003a18:	69fa      	ldr	r2, [r7, #28]
 8003a1a:	440a      	add	r2, r1
 8003a1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a24:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	015a      	lsls	r2, r3, #5
 8003a2a:	69fb      	ldr	r3, [r7, #28]
 8003a2c:	4413      	add	r3, r2
 8003a2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	0151      	lsls	r1, r2, #5
 8003a38:	69fa      	ldr	r2, [r7, #28]
 8003a3a:	440a      	add	r2, r1
 8003a3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a40:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e133      	b.n	8003cb0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003a48:	69bb      	ldr	r3, [r7, #24]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	0151      	lsls	r1, r2, #5
 8003a5a:	69fa      	ldr	r2, [r7, #28]
 8003a5c:	440a      	add	r2, r1
 8003a5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003a62:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003a66:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	791b      	ldrb	r3, [r3, #4]
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d015      	beq.n	8003a9c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f000 811b 	beq.w	8003cb0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003a7a:	69fb      	ldr	r3, [r7, #28]
 8003a7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	781b      	ldrb	r3, [r3, #0]
 8003a86:	f003 030f 	and.w	r3, r3, #15
 8003a8a:	2101      	movs	r1, #1
 8003a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003a90:	69f9      	ldr	r1, [r7, #28]
 8003a92:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003a96:	4313      	orrs	r3, r2
 8003a98:	634b      	str	r3, [r1, #52]	; 0x34
 8003a9a:	e109      	b.n	8003cb0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d110      	bne.n	8003ace <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8003aac:	69bb      	ldr	r3, [r7, #24]
 8003aae:	015a      	lsls	r2, r3, #5
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	4413      	add	r3, r2
 8003ab4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	69ba      	ldr	r2, [r7, #24]
 8003abc:	0151      	lsls	r1, r2, #5
 8003abe:	69fa      	ldr	r2, [r7, #28]
 8003ac0:	440a      	add	r2, r1
 8003ac2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ac6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003aca:	6013      	str	r3, [r2, #0]
 8003acc:	e00f      	b.n	8003aee <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	015a      	lsls	r2, r3, #5
 8003ad2:	69fb      	ldr	r3, [r7, #28]
 8003ad4:	4413      	add	r3, r2
 8003ad6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	69ba      	ldr	r2, [r7, #24]
 8003ade:	0151      	lsls	r1, r2, #5
 8003ae0:	69fa      	ldr	r2, [r7, #28]
 8003ae2:	440a      	add	r2, r1
 8003ae4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ae8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003aec:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	6919      	ldr	r1, [r3, #16]
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	781a      	ldrb	r2, [r3, #0]
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	699b      	ldr	r3, [r3, #24]
 8003afa:	b298      	uxth	r0, r3
 8003afc:	79fb      	ldrb	r3, [r7, #7]
 8003afe:	9300      	str	r3, [sp, #0]
 8003b00:	4603      	mov	r3, r0
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f000 fade 	bl	80040c4 <USB_WritePacket>
 8003b08:	e0d2      	b.n	8003cb0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003b0a:	69bb      	ldr	r3, [r7, #24]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	691b      	ldr	r3, [r3, #16]
 8003b18:	69ba      	ldr	r2, [r7, #24]
 8003b1a:	0151      	lsls	r1, r2, #5
 8003b1c:	69fa      	ldr	r2, [r7, #28]
 8003b1e:	440a      	add	r2, r1
 8003b20:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b24:	0cdb      	lsrs	r3, r3, #19
 8003b26:	04db      	lsls	r3, r3, #19
 8003b28:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	015a      	lsls	r2, r3, #5
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	4413      	add	r3, r2
 8003b32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b36:	691b      	ldr	r3, [r3, #16]
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	0151      	lsls	r1, r2, #5
 8003b3c:	69fa      	ldr	r2, [r7, #28]
 8003b3e:	440a      	add	r2, r1
 8003b40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b44:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003b48:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003b4c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	699b      	ldr	r3, [r3, #24]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d126      	bne.n	8003ba4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8003b56:	69bb      	ldr	r3, [r7, #24]
 8003b58:	015a      	lsls	r2, r3, #5
 8003b5a:	69fb      	ldr	r3, [r7, #28]
 8003b5c:	4413      	add	r3, r2
 8003b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b62:	691a      	ldr	r2, [r3, #16]
 8003b64:	68bb      	ldr	r3, [r7, #8]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6c:	69b9      	ldr	r1, [r7, #24]
 8003b6e:	0148      	lsls	r0, r1, #5
 8003b70:	69f9      	ldr	r1, [r7, #28]
 8003b72:	4401      	add	r1, r0
 8003b74:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003b7c:	69bb      	ldr	r3, [r7, #24]
 8003b7e:	015a      	lsls	r2, r3, #5
 8003b80:	69fb      	ldr	r3, [r7, #28]
 8003b82:	4413      	add	r3, r2
 8003b84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b88:	691b      	ldr	r3, [r3, #16]
 8003b8a:	69ba      	ldr	r2, [r7, #24]
 8003b8c:	0151      	lsls	r1, r2, #5
 8003b8e:	69fa      	ldr	r2, [r7, #28]
 8003b90:	440a      	add	r2, r1
 8003b92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003b96:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003b9a:	6113      	str	r3, [r2, #16]
 8003b9c:	e03a      	b.n	8003c14 <USB_EPStartXfer+0x3e4>
 8003b9e:	bf00      	nop
 8003ba0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8003ba4:	68bb      	ldr	r3, [r7, #8]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	68bb      	ldr	r3, [r7, #8]
 8003baa:	68db      	ldr	r3, [r3, #12]
 8003bac:	4413      	add	r3, r2
 8003bae:	1e5a      	subs	r2, r3, #1
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	68db      	ldr	r3, [r3, #12]
 8003bbe:	8afa      	ldrh	r2, [r7, #22]
 8003bc0:	fb03 f202 	mul.w	r2, r3, r2
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8003bc8:	69bb      	ldr	r3, [r7, #24]
 8003bca:	015a      	lsls	r2, r3, #5
 8003bcc:	69fb      	ldr	r3, [r7, #28]
 8003bce:	4413      	add	r3, r2
 8003bd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bd4:	691a      	ldr	r2, [r3, #16]
 8003bd6:	8afb      	ldrh	r3, [r7, #22]
 8003bd8:	04d9      	lsls	r1, r3, #19
 8003bda:	4b38      	ldr	r3, [pc, #224]	; (8003cbc <USB_EPStartXfer+0x48c>)
 8003bdc:	400b      	ands	r3, r1
 8003bde:	69b9      	ldr	r1, [r7, #24]
 8003be0:	0148      	lsls	r0, r1, #5
 8003be2:	69f9      	ldr	r1, [r7, #28]
 8003be4:	4401      	add	r1, r0
 8003be6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003bea:	4313      	orrs	r3, r2
 8003bec:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8003bee:	69bb      	ldr	r3, [r7, #24]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bfa:	691a      	ldr	r2, [r3, #16]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c04:	69b9      	ldr	r1, [r7, #24]
 8003c06:	0148      	lsls	r0, r1, #5
 8003c08:	69f9      	ldr	r1, [r7, #28]
 8003c0a:	4401      	add	r1, r0
 8003c0c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003c10:	4313      	orrs	r3, r2
 8003c12:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003c14:	79fb      	ldrb	r3, [r7, #7]
 8003c16:	2b01      	cmp	r3, #1
 8003c18:	d10d      	bne.n	8003c36 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003c1a:	68bb      	ldr	r3, [r7, #8]
 8003c1c:	691b      	ldr	r3, [r3, #16]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d009      	beq.n	8003c36 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003c22:	68bb      	ldr	r3, [r7, #8]
 8003c24:	6919      	ldr	r1, [r3, #16]
 8003c26:	69bb      	ldr	r3, [r7, #24]
 8003c28:	015a      	lsls	r2, r3, #5
 8003c2a:	69fb      	ldr	r3, [r7, #28]
 8003c2c:	4413      	add	r3, r2
 8003c2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c32:	460a      	mov	r2, r1
 8003c34:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	791b      	ldrb	r3, [r3, #4]
 8003c3a:	2b01      	cmp	r3, #1
 8003c3c:	d128      	bne.n	8003c90 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8003c3e:	69fb      	ldr	r3, [r7, #28]
 8003c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d110      	bne.n	8003c70 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	015a      	lsls	r2, r3, #5
 8003c52:	69fb      	ldr	r3, [r7, #28]
 8003c54:	4413      	add	r3, r2
 8003c56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69ba      	ldr	r2, [r7, #24]
 8003c5e:	0151      	lsls	r1, r2, #5
 8003c60:	69fa      	ldr	r2, [r7, #28]
 8003c62:	440a      	add	r2, r1
 8003c64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c68:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	e00f      	b.n	8003c90 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8003c70:	69bb      	ldr	r3, [r7, #24]
 8003c72:	015a      	lsls	r2, r3, #5
 8003c74:	69fb      	ldr	r3, [r7, #28]
 8003c76:	4413      	add	r3, r2
 8003c78:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	0151      	lsls	r1, r2, #5
 8003c82:	69fa      	ldr	r2, [r7, #28]
 8003c84:	440a      	add	r2, r1
 8003c86:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003c8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c8e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	015a      	lsls	r2, r3, #5
 8003c94:	69fb      	ldr	r3, [r7, #28]
 8003c96:	4413      	add	r3, r2
 8003c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	69ba      	ldr	r2, [r7, #24]
 8003ca0:	0151      	lsls	r1, r2, #5
 8003ca2:	69fa      	ldr	r2, [r7, #28]
 8003ca4:	440a      	add	r2, r1
 8003ca6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003caa:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003cae:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003cb0:	2300      	movs	r3, #0
}
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	3720      	adds	r7, #32
 8003cb6:	46bd      	mov	sp, r7
 8003cb8:	bd80      	pop	{r7, pc}
 8003cba:	bf00      	nop
 8003cbc:	1ff80000 	.word	0x1ff80000

08003cc0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	4613      	mov	r3, r2
 8003ccc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8003cd2:	68bb      	ldr	r3, [r7, #8]
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	785b      	ldrb	r3, [r3, #1]
 8003cdc:	2b01      	cmp	r3, #1
 8003cde:	f040 80ce 	bne.w	8003e7e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ce2:	68bb      	ldr	r3, [r7, #8]
 8003ce4:	699b      	ldr	r3, [r3, #24]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d132      	bne.n	8003d50 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	015a      	lsls	r2, r3, #5
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	4413      	add	r3, r2
 8003cf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	693a      	ldr	r2, [r7, #16]
 8003cfa:	0151      	lsls	r1, r2, #5
 8003cfc:	697a      	ldr	r2, [r7, #20]
 8003cfe:	440a      	add	r2, r1
 8003d00:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d04:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d08:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	015a      	lsls	r2, r3, #5
 8003d12:	697b      	ldr	r3, [r7, #20]
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d1a:	691b      	ldr	r3, [r3, #16]
 8003d1c:	693a      	ldr	r2, [r7, #16]
 8003d1e:	0151      	lsls	r1, r2, #5
 8003d20:	697a      	ldr	r2, [r7, #20]
 8003d22:	440a      	add	r2, r1
 8003d24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d28:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003d2c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d2e:	693b      	ldr	r3, [r7, #16]
 8003d30:	015a      	lsls	r2, r3, #5
 8003d32:	697b      	ldr	r3, [r7, #20]
 8003d34:	4413      	add	r3, r2
 8003d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d3a:	691b      	ldr	r3, [r3, #16]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	0151      	lsls	r1, r2, #5
 8003d40:	697a      	ldr	r2, [r7, #20]
 8003d42:	440a      	add	r2, r1
 8003d44:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d48:	0cdb      	lsrs	r3, r3, #19
 8003d4a:	04db      	lsls	r3, r3, #19
 8003d4c:	6113      	str	r3, [r2, #16]
 8003d4e:	e04e      	b.n	8003dee <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	015a      	lsls	r2, r3, #5
 8003d54:	697b      	ldr	r3, [r7, #20]
 8003d56:	4413      	add	r3, r2
 8003d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d5c:	691b      	ldr	r3, [r3, #16]
 8003d5e:	693a      	ldr	r2, [r7, #16]
 8003d60:	0151      	lsls	r1, r2, #5
 8003d62:	697a      	ldr	r2, [r7, #20]
 8003d64:	440a      	add	r2, r1
 8003d66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d6a:	0cdb      	lsrs	r3, r3, #19
 8003d6c:	04db      	lsls	r3, r3, #19
 8003d6e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	015a      	lsls	r2, r3, #5
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	4413      	add	r3, r2
 8003d78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d7c:	691b      	ldr	r3, [r3, #16]
 8003d7e:	693a      	ldr	r2, [r7, #16]
 8003d80:	0151      	lsls	r1, r2, #5
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	440a      	add	r2, r1
 8003d86:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d8a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003d8e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003d92:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	699a      	ldr	r2, [r3, #24]
 8003d98:	68bb      	ldr	r3, [r7, #8]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	429a      	cmp	r2, r3
 8003d9e:	d903      	bls.n	8003da8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	68da      	ldr	r2, [r3, #12]
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	015a      	lsls	r2, r3, #5
 8003dac:	697b      	ldr	r3, [r7, #20]
 8003dae:	4413      	add	r3, r2
 8003db0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db4:	691b      	ldr	r3, [r3, #16]
 8003db6:	693a      	ldr	r2, [r7, #16]
 8003db8:	0151      	lsls	r1, r2, #5
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	440a      	add	r2, r1
 8003dbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003dc2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003dc6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dd4:	691a      	ldr	r2, [r3, #16]
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	699b      	ldr	r3, [r3, #24]
 8003dda:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003dde:	6939      	ldr	r1, [r7, #16]
 8003de0:	0148      	lsls	r0, r1, #5
 8003de2:	6979      	ldr	r1, [r7, #20]
 8003de4:	4401      	add	r1, r0
 8003de6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003dea:	4313      	orrs	r3, r2
 8003dec:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8003dee:	79fb      	ldrb	r3, [r7, #7]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d11e      	bne.n	8003e32 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	695b      	ldr	r3, [r3, #20]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d009      	beq.n	8003e10 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	015a      	lsls	r2, r3, #5
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	4413      	add	r3, r2
 8003e04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e08:	461a      	mov	r2, r3
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	015a      	lsls	r2, r3, #5
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	4413      	add	r3, r2
 8003e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	693a      	ldr	r2, [r7, #16]
 8003e20:	0151      	lsls	r1, r2, #5
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	440a      	add	r2, r1
 8003e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e2e:	6013      	str	r3, [r2, #0]
 8003e30:	e097      	b.n	8003f62 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8003e32:	693b      	ldr	r3, [r7, #16]
 8003e34:	015a      	lsls	r2, r3, #5
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	4413      	add	r3, r2
 8003e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	0151      	lsls	r1, r2, #5
 8003e44:	697a      	ldr	r2, [r7, #20]
 8003e46:	440a      	add	r2, r1
 8003e48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003e4c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003e50:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 8083 	beq.w	8003f62 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	f003 030f 	and.w	r3, r3, #15
 8003e6c:	2101      	movs	r1, #1
 8003e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e72:	6979      	ldr	r1, [r7, #20]
 8003e74:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	634b      	str	r3, [r1, #52]	; 0x34
 8003e7c:	e071      	b.n	8003f62 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8003e7e:	693b      	ldr	r3, [r7, #16]
 8003e80:	015a      	lsls	r2, r3, #5
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	4413      	add	r3, r2
 8003e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	693a      	ldr	r2, [r7, #16]
 8003e8e:	0151      	lsls	r1, r2, #5
 8003e90:	697a      	ldr	r2, [r7, #20]
 8003e92:	440a      	add	r2, r1
 8003e94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e98:	0cdb      	lsrs	r3, r3, #19
 8003e9a:	04db      	lsls	r3, r3, #19
 8003e9c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	015a      	lsls	r2, r3, #5
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	4413      	add	r3, r2
 8003ea6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003eaa:	691b      	ldr	r3, [r3, #16]
 8003eac:	693a      	ldr	r2, [r7, #16]
 8003eae:	0151      	lsls	r1, r2, #5
 8003eb0:	697a      	ldr	r2, [r7, #20]
 8003eb2:	440a      	add	r2, r1
 8003eb4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003eb8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ebc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003ec0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	68da      	ldr	r2, [r3, #12]
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	68da      	ldr	r2, [r3, #12]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	015a      	lsls	r2, r3, #5
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ee6:	691b      	ldr	r3, [r3, #16]
 8003ee8:	693a      	ldr	r2, [r7, #16]
 8003eea:	0151      	lsls	r1, r2, #5
 8003eec:	697a      	ldr	r2, [r7, #20]
 8003eee:	440a      	add	r2, r1
 8003ef0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003ef4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003ef8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8003efa:	693b      	ldr	r3, [r7, #16]
 8003efc:	015a      	lsls	r2, r3, #5
 8003efe:	697b      	ldr	r3, [r7, #20]
 8003f00:	4413      	add	r3, r2
 8003f02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	68bb      	ldr	r3, [r7, #8]
 8003f0a:	69db      	ldr	r3, [r3, #28]
 8003f0c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f10:	6939      	ldr	r1, [r7, #16]
 8003f12:	0148      	lsls	r0, r1, #5
 8003f14:	6979      	ldr	r1, [r7, #20]
 8003f16:	4401      	add	r1, r0
 8003f18:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8003f1c:	4313      	orrs	r3, r2
 8003f1e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8003f20:	79fb      	ldrb	r3, [r7, #7]
 8003f22:	2b01      	cmp	r3, #1
 8003f24:	d10d      	bne.n	8003f42 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d009      	beq.n	8003f42 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	6919      	ldr	r1, [r3, #16]
 8003f32:	693b      	ldr	r3, [r7, #16]
 8003f34:	015a      	lsls	r2, r3, #5
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	4413      	add	r3, r2
 8003f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f3e:	460a      	mov	r2, r1
 8003f40:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	693a      	ldr	r2, [r7, #16]
 8003f52:	0151      	lsls	r1, r2, #5
 8003f54:	697a      	ldr	r2, [r7, #20]
 8003f56:	440a      	add	r2, r1
 8003f58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f5c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8003f60:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8003f62:	2300      	movs	r3, #0
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	371c      	adds	r7, #28
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b087      	sub	sp, #28
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	785b      	ldrb	r3, [r3, #1]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d14a      	bne.n	8004024 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	781b      	ldrb	r3, [r3, #0]
 8003f92:	015a      	lsls	r2, r3, #5
 8003f94:	693b      	ldr	r3, [r7, #16]
 8003f96:	4413      	add	r3, r2
 8003f98:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fa2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fa6:	f040 8086 	bne.w	80040b6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	781b      	ldrb	r3, [r3, #0]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	7812      	ldrb	r2, [r2, #0]
 8003fbe:	0151      	lsls	r1, r2, #5
 8003fc0:	693a      	ldr	r2, [r7, #16]
 8003fc2:	440a      	add	r2, r1
 8003fc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fc8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fcc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	781b      	ldrb	r3, [r3, #0]
 8003fd2:	015a      	lsls	r2, r3, #5
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4413      	add	r3, r2
 8003fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	683a      	ldr	r2, [r7, #0]
 8003fe0:	7812      	ldrb	r2, [r2, #0]
 8003fe2:	0151      	lsls	r1, r2, #5
 8003fe4:	693a      	ldr	r2, [r7, #16]
 8003fe6:	440a      	add	r2, r1
 8003fe8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ff0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	f242 7210 	movw	r2, #10000	; 0x2710
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d902      	bls.n	8004008 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	75fb      	strb	r3, [r7, #23]
          break;
 8004006:	e056      	b.n	80040b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	015a      	lsls	r2, r3, #5
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	4413      	add	r3, r2
 8004012:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800401c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004020:	d0e7      	beq.n	8003ff2 <USB_EPStopXfer+0x82>
 8004022:	e048      	b.n	80040b6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	015a      	lsls	r2, r3, #5
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	4413      	add	r3, r2
 800402e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800403c:	d13b      	bne.n	80040b6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	781b      	ldrb	r3, [r3, #0]
 8004042:	015a      	lsls	r2, r3, #5
 8004044:	693b      	ldr	r3, [r7, #16]
 8004046:	4413      	add	r3, r2
 8004048:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	683a      	ldr	r2, [r7, #0]
 8004050:	7812      	ldrb	r2, [r2, #0]
 8004052:	0151      	lsls	r1, r2, #5
 8004054:	693a      	ldr	r2, [r7, #16]
 8004056:	440a      	add	r2, r1
 8004058:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800405c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004060:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004062:	683b      	ldr	r3, [r7, #0]
 8004064:	781b      	ldrb	r3, [r3, #0]
 8004066:	015a      	lsls	r2, r3, #5
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	4413      	add	r3, r2
 800406c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	683a      	ldr	r2, [r7, #0]
 8004074:	7812      	ldrb	r2, [r2, #0]
 8004076:	0151      	lsls	r1, r2, #5
 8004078:	693a      	ldr	r2, [r7, #16]
 800407a:	440a      	add	r2, r1
 800407c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004080:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004084:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	3301      	adds	r3, #1
 800408a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f242 7210 	movw	r2, #10000	; 0x2710
 8004092:	4293      	cmp	r3, r2
 8004094:	d902      	bls.n	800409c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	75fb      	strb	r3, [r7, #23]
          break;
 800409a:	e00c      	b.n	80040b6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	781b      	ldrb	r3, [r3, #0]
 80040a0:	015a      	lsls	r2, r3, #5
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	4413      	add	r3, r2
 80040a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80040b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80040b4:	d0e7      	beq.n	8004086 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80040b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	371c      	adds	r7, #28
 80040bc:	46bd      	mov	sp, r7
 80040be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c2:	4770      	bx	lr

080040c4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b089      	sub	sp, #36	; 0x24
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	4611      	mov	r1, r2
 80040d0:	461a      	mov	r2, r3
 80040d2:	460b      	mov	r3, r1
 80040d4:	71fb      	strb	r3, [r7, #7]
 80040d6:	4613      	mov	r3, r2
 80040d8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80040e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d123      	bne.n	8004132 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80040ea:	88bb      	ldrh	r3, [r7, #4]
 80040ec:	3303      	adds	r3, #3
 80040ee:	089b      	lsrs	r3, r3, #2
 80040f0:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80040f2:	2300      	movs	r3, #0
 80040f4:	61bb      	str	r3, [r7, #24]
 80040f6:	e018      	b.n	800412a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80040f8:	79fb      	ldrb	r3, [r7, #7]
 80040fa:	031a      	lsls	r2, r3, #12
 80040fc:	697b      	ldr	r3, [r7, #20]
 80040fe:	4413      	add	r3, r2
 8004100:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004104:	461a      	mov	r2, r3
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	3301      	adds	r3, #1
 8004110:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004112:	69fb      	ldr	r3, [r7, #28]
 8004114:	3301      	adds	r3, #1
 8004116:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004118:	69fb      	ldr	r3, [r7, #28]
 800411a:	3301      	adds	r3, #1
 800411c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800411e:	69fb      	ldr	r3, [r7, #28]
 8004120:	3301      	adds	r3, #1
 8004122:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004124:	69bb      	ldr	r3, [r7, #24]
 8004126:	3301      	adds	r3, #1
 8004128:	61bb      	str	r3, [r7, #24]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	429a      	cmp	r2, r3
 8004130:	d3e2      	bcc.n	80040f8 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004132:	2300      	movs	r3, #0
}
 8004134:	4618      	mov	r0, r3
 8004136:	3724      	adds	r7, #36	; 0x24
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004140:	b480      	push	{r7}
 8004142:	b08b      	sub	sp, #44	; 0x2c
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004156:	88fb      	ldrh	r3, [r7, #6]
 8004158:	089b      	lsrs	r3, r3, #2
 800415a:	b29b      	uxth	r3, r3
 800415c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800415e:	88fb      	ldrh	r3, [r7, #6]
 8004160:	f003 0303 	and.w	r3, r3, #3
 8004164:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004166:	2300      	movs	r3, #0
 8004168:	623b      	str	r3, [r7, #32]
 800416a:	e014      	b.n	8004196 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 800416c:	69bb      	ldr	r3, [r7, #24]
 800416e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004172:	681a      	ldr	r2, [r3, #0]
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	601a      	str	r2, [r3, #0]
    pDest++;
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	3301      	adds	r3, #1
 800417c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	3301      	adds	r3, #1
 8004182:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	3301      	adds	r3, #1
 8004188:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	3301      	adds	r3, #1
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004190:	6a3b      	ldr	r3, [r7, #32]
 8004192:	3301      	adds	r3, #1
 8004194:	623b      	str	r3, [r7, #32]
 8004196:	6a3a      	ldr	r2, [r7, #32]
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	429a      	cmp	r2, r3
 800419c:	d3e6      	bcc.n	800416c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800419e:	8bfb      	ldrh	r3, [r7, #30]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d01e      	beq.n	80041e2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80041ae:	461a      	mov	r2, r3
 80041b0:	f107 0310 	add.w	r3, r7, #16
 80041b4:	6812      	ldr	r2, [r2, #0]
 80041b6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	6a3b      	ldr	r3, [r7, #32]
 80041bc:	b2db      	uxtb	r3, r3
 80041be:	00db      	lsls	r3, r3, #3
 80041c0:	fa22 f303 	lsr.w	r3, r2, r3
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c8:	701a      	strb	r2, [r3, #0]
      i++;
 80041ca:	6a3b      	ldr	r3, [r7, #32]
 80041cc:	3301      	adds	r3, #1
 80041ce:	623b      	str	r3, [r7, #32]
      pDest++;
 80041d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041d2:	3301      	adds	r3, #1
 80041d4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80041d6:	8bfb      	ldrh	r3, [r7, #30]
 80041d8:	3b01      	subs	r3, #1
 80041da:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80041dc:	8bfb      	ldrh	r3, [r7, #30]
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1ea      	bne.n	80041b8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	372c      	adds	r7, #44	; 0x2c
 80041e8:	46bd      	mov	sp, r7
 80041ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ee:	4770      	bx	lr

080041f0 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80041f0:	b480      	push	{r7}
 80041f2:	b085      	sub	sp, #20
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	6078      	str	r0, [r7, #4]
 80041f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80041fe:	683b      	ldr	r3, [r7, #0]
 8004200:	781b      	ldrb	r3, [r3, #0]
 8004202:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	785b      	ldrb	r3, [r3, #1]
 8004208:	2b01      	cmp	r3, #1
 800420a:	d12c      	bne.n	8004266 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800420c:	68bb      	ldr	r3, [r7, #8]
 800420e:	015a      	lsls	r2, r3, #5
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	4413      	add	r3, r2
 8004214:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	2b00      	cmp	r3, #0
 800421c:	db12      	blt.n	8004244 <USB_EPSetStall+0x54>
 800421e:	68bb      	ldr	r3, [r7, #8]
 8004220:	2b00      	cmp	r3, #0
 8004222:	d00f      	beq.n	8004244 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	0151      	lsls	r1, r2, #5
 8004236:	68fa      	ldr	r2, [r7, #12]
 8004238:	440a      	add	r2, r1
 800423a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800423e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004242:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	015a      	lsls	r2, r3, #5
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	4413      	add	r3, r2
 800424c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	0151      	lsls	r1, r2, #5
 8004256:	68fa      	ldr	r2, [r7, #12]
 8004258:	440a      	add	r2, r1
 800425a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800425e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004262:	6013      	str	r3, [r2, #0]
 8004264:	e02b      	b.n	80042be <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2b00      	cmp	r3, #0
 8004276:	db12      	blt.n	800429e <USB_EPSetStall+0xae>
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d00f      	beq.n	800429e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	015a      	lsls	r2, r3, #5
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	4413      	add	r3, r2
 8004286:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	0151      	lsls	r1, r2, #5
 8004290:	68fa      	ldr	r2, [r7, #12]
 8004292:	440a      	add	r2, r1
 8004294:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004298:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800429c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800429e:	68bb      	ldr	r3, [r7, #8]
 80042a0:	015a      	lsls	r2, r3, #5
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4413      	add	r3, r2
 80042a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	68ba      	ldr	r2, [r7, #8]
 80042ae:	0151      	lsls	r1, r2, #5
 80042b0:	68fa      	ldr	r2, [r7, #12]
 80042b2:	440a      	add	r2, r1
 80042b4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042b8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80042bc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3714      	adds	r7, #20
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80042cc:	b480      	push	{r7}
 80042ce:	b085      	sub	sp, #20
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
 80042d4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	785b      	ldrb	r3, [r3, #1]
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d128      	bne.n	800433a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80042e8:	68bb      	ldr	r3, [r7, #8]
 80042ea:	015a      	lsls	r2, r3, #5
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	4413      	add	r3, r2
 80042f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68ba      	ldr	r2, [r7, #8]
 80042f8:	0151      	lsls	r1, r2, #5
 80042fa:	68fa      	ldr	r2, [r7, #12]
 80042fc:	440a      	add	r2, r1
 80042fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004302:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004306:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	791b      	ldrb	r3, [r3, #4]
 800430c:	2b03      	cmp	r3, #3
 800430e:	d003      	beq.n	8004318 <USB_EPClearStall+0x4c>
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	791b      	ldrb	r3, [r3, #4]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d138      	bne.n	800438a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	015a      	lsls	r2, r3, #5
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	68ba      	ldr	r2, [r7, #8]
 8004328:	0151      	lsls	r1, r2, #5
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	440a      	add	r2, r1
 800432e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004332:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004336:	6013      	str	r3, [r2, #0]
 8004338:	e027      	b.n	800438a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800433a:	68bb      	ldr	r3, [r7, #8]
 800433c:	015a      	lsls	r2, r3, #5
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	4413      	add	r3, r2
 8004342:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	68ba      	ldr	r2, [r7, #8]
 800434a:	0151      	lsls	r1, r2, #5
 800434c:	68fa      	ldr	r2, [r7, #12]
 800434e:	440a      	add	r2, r1
 8004350:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004354:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004358:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	791b      	ldrb	r3, [r3, #4]
 800435e:	2b03      	cmp	r3, #3
 8004360:	d003      	beq.n	800436a <USB_EPClearStall+0x9e>
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	791b      	ldrb	r3, [r3, #4]
 8004366:	2b02      	cmp	r3, #2
 8004368:	d10f      	bne.n	800438a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	015a      	lsls	r2, r3, #5
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	4413      	add	r3, r2
 8004372:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	68ba      	ldr	r2, [r7, #8]
 800437a:	0151      	lsls	r1, r2, #5
 800437c:	68fa      	ldr	r2, [r7, #12]
 800437e:	440a      	add	r2, r1
 8004380:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004384:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004388:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3714      	adds	r7, #20
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004398:	b480      	push	{r7}
 800439a:	b085      	sub	sp, #20
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	68fa      	ldr	r2, [r7, #12]
 80043b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80043b6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80043ba:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043c2:	681a      	ldr	r2, [r3, #0]
 80043c4:	78fb      	ldrb	r3, [r7, #3]
 80043c6:	011b      	lsls	r3, r3, #4
 80043c8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80043cc:	68f9      	ldr	r1, [r7, #12]
 80043ce:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043d2:	4313      	orrs	r3, r2
 80043d4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3714      	adds	r7, #20
 80043dc:	46bd      	mov	sp, r7
 80043de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e2:	4770      	bx	lr

080043e4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80043e4:	b480      	push	{r7}
 80043e6:	b085      	sub	sp, #20
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80043fe:	f023 0303 	bic.w	r3, r3, #3
 8004402:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800440a:	685b      	ldr	r3, [r3, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004412:	f023 0302 	bic.w	r3, r3, #2
 8004416:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004418:	2300      	movs	r3, #0
}
 800441a:	4618      	mov	r0, r3
 800441c:	3714      	adds	r7, #20
 800441e:	46bd      	mov	sp, r7
 8004420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004424:	4770      	bx	lr

08004426 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004426:	b480      	push	{r7}
 8004428:	b085      	sub	sp, #20
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004440:	f023 0303 	bic.w	r3, r3, #3
 8004444:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800444c:	685b      	ldr	r3, [r3, #4]
 800444e:	68fa      	ldr	r2, [r7, #12]
 8004450:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004454:	f043 0302 	orr.w	r3, r3, #2
 8004458:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800445a:	2300      	movs	r3, #0
}
 800445c:	4618      	mov	r0, r3
 800445e:	3714      	adds	r7, #20
 8004460:	46bd      	mov	sp, r7
 8004462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004466:	4770      	bx	lr

08004468 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	4013      	ands	r3, r2
 800447e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004480:	68fb      	ldr	r3, [r7, #12]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800448e:	b480      	push	{r7}
 8004490:	b085      	sub	sp, #20
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044aa:	69db      	ldr	r3, [r3, #28]
 80044ac:	68ba      	ldr	r2, [r7, #8]
 80044ae:	4013      	ands	r3, r2
 80044b0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	0c1b      	lsrs	r3, r3, #16
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3714      	adds	r7, #20
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d4:	699b      	ldr	r3, [r3, #24]
 80044d6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044de:	69db      	ldr	r3, [r3, #28]
 80044e0:	68ba      	ldr	r2, [r7, #8]
 80044e2:	4013      	ands	r3, r2
 80044e4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	b29b      	uxth	r3, r3
}
 80044ea:	4618      	mov	r0, r3
 80044ec:	3714      	adds	r7, #20
 80044ee:	46bd      	mov	sp, r7
 80044f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f4:	4770      	bx	lr

080044f6 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80044f6:	b480      	push	{r7}
 80044f8:	b085      	sub	sp, #20
 80044fa:	af00      	add	r7, sp, #0
 80044fc:	6078      	str	r0, [r7, #4]
 80044fe:	460b      	mov	r3, r1
 8004500:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004506:	78fb      	ldrb	r3, [r7, #3]
 8004508:	015a      	lsls	r2, r3, #5
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	4413      	add	r3, r2
 800450e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	68ba      	ldr	r2, [r7, #8]
 8004520:	4013      	ands	r3, r2
 8004522:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004524:	68bb      	ldr	r3, [r7, #8]
}
 8004526:	4618      	mov	r0, r3
 8004528:	3714      	adds	r7, #20
 800452a:	46bd      	mov	sp, r7
 800452c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004530:	4770      	bx	lr

08004532 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004532:	b480      	push	{r7}
 8004534:	b087      	sub	sp, #28
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
 800453a:	460b      	mov	r3, r1
 800453c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 800454c:	697b      	ldr	r3, [r7, #20]
 800454e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004554:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004556:	78fb      	ldrb	r3, [r7, #3]
 8004558:	f003 030f 	and.w	r3, r3, #15
 800455c:	68fa      	ldr	r2, [r7, #12]
 800455e:	fa22 f303 	lsr.w	r3, r2, r3
 8004562:	01db      	lsls	r3, r3, #7
 8004564:	b2db      	uxtb	r3, r3
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 800456c:	78fb      	ldrb	r3, [r7, #3]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	697b      	ldr	r3, [r7, #20]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	693a      	ldr	r2, [r7, #16]
 800457c:	4013      	ands	r3, r2
 800457e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004580:	68bb      	ldr	r3, [r7, #8]
}
 8004582:	4618      	mov	r0, r3
 8004584:	371c      	adds	r7, #28
 8004586:	46bd      	mov	sp, r7
 8004588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458c:	4770      	bx	lr

0800458e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	f003 0301 	and.w	r3, r3, #1
}
 800459e:	4618      	mov	r0, r3
 80045a0:	370c      	adds	r7, #12
 80045a2:	46bd      	mov	sp, r7
 80045a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a8:	4770      	bx	lr

080045aa <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b085      	sub	sp, #20
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	68fa      	ldr	r2, [r7, #12]
 80045c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045c4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80045c8:	f023 0307 	bic.w	r3, r3, #7
 80045cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80045e2:	2300      	movs	r3, #0
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	3714      	adds	r7, #20
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr

080045f0 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	60f8      	str	r0, [r7, #12]
 80045f8:	460b      	mov	r3, r1
 80045fa:	607a      	str	r2, [r7, #4]
 80045fc:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	333c      	adds	r3, #60	; 0x3c
 8004606:	3304      	adds	r3, #4
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	4a26      	ldr	r2, [pc, #152]	; (80046a8 <USB_EP0_OutStart+0xb8>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d90a      	bls.n	800462a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004614:	697b      	ldr	r3, [r7, #20]
 8004616:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004620:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004624:	d101      	bne.n	800462a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004626:	2300      	movs	r3, #0
 8004628:	e037      	b.n	800469a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004630:	461a      	mov	r2, r3
 8004632:	2300      	movs	r3, #0
 8004634:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004644:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004648:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004650:	691b      	ldr	r3, [r3, #16]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004658:	f043 0318 	orr.w	r3, r3, #24
 800465c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800466c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004670:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004672:	7afb      	ldrb	r3, [r7, #11]
 8004674:	2b01      	cmp	r3, #1
 8004676:	d10f      	bne.n	8004698 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004678:	697b      	ldr	r3, [r7, #20]
 800467a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800467e:	461a      	mov	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	697a      	ldr	r2, [r7, #20]
 800468e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004692:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004696:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004698:	2300      	movs	r3, #0
}
 800469a:	4618      	mov	r0, r3
 800469c:	371c      	adds	r7, #28
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr
 80046a6:	bf00      	nop
 80046a8:	4f54300a 	.word	0x4f54300a

080046ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b085      	sub	sp, #20
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80046b4:	2300      	movs	r3, #0
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	3301      	adds	r3, #1
 80046bc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	4a13      	ldr	r2, [pc, #76]	; (8004710 <USB_CoreReset+0x64>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	d901      	bls.n	80046ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80046c6:	2303      	movs	r3, #3
 80046c8:	e01b      	b.n	8004702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	691b      	ldr	r3, [r3, #16]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	daf2      	bge.n	80046b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	691b      	ldr	r3, [r3, #16]
 80046da:	f043 0201 	orr.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	3301      	adds	r3, #1
 80046e6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	4a09      	ldr	r2, [pc, #36]	; (8004710 <USB_CoreReset+0x64>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d901      	bls.n	80046f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80046f0:	2303      	movs	r3, #3
 80046f2:	e006      	b.n	8004702 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	691b      	ldr	r3, [r3, #16]
 80046f8:	f003 0301 	and.w	r3, r3, #1
 80046fc:	2b01      	cmp	r3, #1
 80046fe:	d0f0      	beq.n	80046e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004700:	2300      	movs	r3, #0
}
 8004702:	4618      	mov	r0, r3
 8004704:	3714      	adds	r7, #20
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr
 800470e:	bf00      	nop
 8004710:	00030d40 	.word	0x00030d40

08004714 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
 800471c:	460b      	mov	r3, r1
 800471e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8004720:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8004724:	f002 fcaa 	bl	800707c <USBD_static_malloc>
 8004728:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d109      	bne.n	8004744 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	32b0      	adds	r2, #176	; 0xb0
 800473a:	2100      	movs	r1, #0
 800473c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004740:	2302      	movs	r3, #2
 8004742:	e0d4      	b.n	80048ee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8004744:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8004748:	2100      	movs	r1, #0
 800474a:	68f8      	ldr	r0, [r7, #12]
 800474c:	f002 fd04 	bl	8007158 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	32b0      	adds	r2, #176	; 0xb0
 800475a:	68f9      	ldr	r1, [r7, #12]
 800475c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	32b0      	adds	r2, #176	; 0xb0
 800476a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	7c1b      	ldrb	r3, [r3, #16]
 8004778:	2b00      	cmp	r3, #0
 800477a:	d138      	bne.n	80047ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800477c:	4b5e      	ldr	r3, [pc, #376]	; (80048f8 <USBD_CDC_Init+0x1e4>)
 800477e:	7819      	ldrb	r1, [r3, #0]
 8004780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004784:	2202      	movs	r2, #2
 8004786:	6878      	ldr	r0, [r7, #4]
 8004788:	f002 fb55 	bl	8006e36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800478c:	4b5a      	ldr	r3, [pc, #360]	; (80048f8 <USBD_CDC_Init+0x1e4>)
 800478e:	781b      	ldrb	r3, [r3, #0]
 8004790:	f003 020f 	and.w	r2, r3, #15
 8004794:	6879      	ldr	r1, [r7, #4]
 8004796:	4613      	mov	r3, r2
 8004798:	009b      	lsls	r3, r3, #2
 800479a:	4413      	add	r3, r2
 800479c:	009b      	lsls	r3, r3, #2
 800479e:	440b      	add	r3, r1
 80047a0:	3324      	adds	r3, #36	; 0x24
 80047a2:	2201      	movs	r2, #1
 80047a4:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80047a6:	4b55      	ldr	r3, [pc, #340]	; (80048fc <USBD_CDC_Init+0x1e8>)
 80047a8:	7819      	ldrb	r1, [r3, #0]
 80047aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80047ae:	2202      	movs	r2, #2
 80047b0:	6878      	ldr	r0, [r7, #4]
 80047b2:	f002 fb40 	bl	8006e36 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80047b6:	4b51      	ldr	r3, [pc, #324]	; (80048fc <USBD_CDC_Init+0x1e8>)
 80047b8:	781b      	ldrb	r3, [r3, #0]
 80047ba:	f003 020f 	and.w	r2, r3, #15
 80047be:	6879      	ldr	r1, [r7, #4]
 80047c0:	4613      	mov	r3, r2
 80047c2:	009b      	lsls	r3, r3, #2
 80047c4:	4413      	add	r3, r2
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	440b      	add	r3, r1
 80047ca:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80047ce:	2201      	movs	r2, #1
 80047d0:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80047d2:	4b4b      	ldr	r3, [pc, #300]	; (8004900 <USBD_CDC_Init+0x1ec>)
 80047d4:	781b      	ldrb	r3, [r3, #0]
 80047d6:	f003 020f 	and.w	r2, r3, #15
 80047da:	6879      	ldr	r1, [r7, #4]
 80047dc:	4613      	mov	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4413      	add	r3, r2
 80047e2:	009b      	lsls	r3, r3, #2
 80047e4:	440b      	add	r3, r1
 80047e6:	3326      	adds	r3, #38	; 0x26
 80047e8:	2210      	movs	r2, #16
 80047ea:	801a      	strh	r2, [r3, #0]
 80047ec:	e035      	b.n	800485a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80047ee:	4b42      	ldr	r3, [pc, #264]	; (80048f8 <USBD_CDC_Init+0x1e4>)
 80047f0:	7819      	ldrb	r1, [r3, #0]
 80047f2:	2340      	movs	r3, #64	; 0x40
 80047f4:	2202      	movs	r2, #2
 80047f6:	6878      	ldr	r0, [r7, #4]
 80047f8:	f002 fb1d 	bl	8006e36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80047fc:	4b3e      	ldr	r3, [pc, #248]	; (80048f8 <USBD_CDC_Init+0x1e4>)
 80047fe:	781b      	ldrb	r3, [r3, #0]
 8004800:	f003 020f 	and.w	r2, r3, #15
 8004804:	6879      	ldr	r1, [r7, #4]
 8004806:	4613      	mov	r3, r2
 8004808:	009b      	lsls	r3, r3, #2
 800480a:	4413      	add	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	440b      	add	r3, r1
 8004810:	3324      	adds	r3, #36	; 0x24
 8004812:	2201      	movs	r2, #1
 8004814:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8004816:	4b39      	ldr	r3, [pc, #228]	; (80048fc <USBD_CDC_Init+0x1e8>)
 8004818:	7819      	ldrb	r1, [r3, #0]
 800481a:	2340      	movs	r3, #64	; 0x40
 800481c:	2202      	movs	r2, #2
 800481e:	6878      	ldr	r0, [r7, #4]
 8004820:	f002 fb09 	bl	8006e36 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8004824:	4b35      	ldr	r3, [pc, #212]	; (80048fc <USBD_CDC_Init+0x1e8>)
 8004826:	781b      	ldrb	r3, [r3, #0]
 8004828:	f003 020f 	and.w	r2, r3, #15
 800482c:	6879      	ldr	r1, [r7, #4]
 800482e:	4613      	mov	r3, r2
 8004830:	009b      	lsls	r3, r3, #2
 8004832:	4413      	add	r3, r2
 8004834:	009b      	lsls	r3, r3, #2
 8004836:	440b      	add	r3, r1
 8004838:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800483c:	2201      	movs	r2, #1
 800483e:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8004840:	4b2f      	ldr	r3, [pc, #188]	; (8004900 <USBD_CDC_Init+0x1ec>)
 8004842:	781b      	ldrb	r3, [r3, #0]
 8004844:	f003 020f 	and.w	r2, r3, #15
 8004848:	6879      	ldr	r1, [r7, #4]
 800484a:	4613      	mov	r3, r2
 800484c:	009b      	lsls	r3, r3, #2
 800484e:	4413      	add	r3, r2
 8004850:	009b      	lsls	r3, r3, #2
 8004852:	440b      	add	r3, r1
 8004854:	3326      	adds	r3, #38	; 0x26
 8004856:	2210      	movs	r2, #16
 8004858:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800485a:	4b29      	ldr	r3, [pc, #164]	; (8004900 <USBD_CDC_Init+0x1ec>)
 800485c:	7819      	ldrb	r1, [r3, #0]
 800485e:	2308      	movs	r3, #8
 8004860:	2203      	movs	r2, #3
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f002 fae7 	bl	8006e36 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8004868:	4b25      	ldr	r3, [pc, #148]	; (8004900 <USBD_CDC_Init+0x1ec>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	f003 020f 	and.w	r2, r3, #15
 8004870:	6879      	ldr	r1, [r7, #4]
 8004872:	4613      	mov	r3, r2
 8004874:	009b      	lsls	r3, r3, #2
 8004876:	4413      	add	r3, r2
 8004878:	009b      	lsls	r3, r3, #2
 800487a:	440b      	add	r3, r1
 800487c:	3324      	adds	r3, #36	; 0x24
 800487e:	2201      	movs	r2, #1
 8004880:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2200      	movs	r2, #0
 8004886:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004890:	687a      	ldr	r2, [r7, #4]
 8004892:	33b0      	adds	r3, #176	; 0xb0
 8004894:	009b      	lsls	r3, r3, #2
 8004896:	4413      	add	r3, r2
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d101      	bne.n	80048bc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80048b8:	2302      	movs	r3, #2
 80048ba:	e018      	b.n	80048ee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	7c1b      	ldrb	r3, [r3, #16]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80048c4:	4b0d      	ldr	r3, [pc, #52]	; (80048fc <USBD_CDC_Init+0x1e8>)
 80048c6:	7819      	ldrb	r1, [r3, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f002 fb9e 	bl	8007014 <USBD_LL_PrepareReceive>
 80048d8:	e008      	b.n	80048ec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80048da:	4b08      	ldr	r3, [pc, #32]	; (80048fc <USBD_CDC_Init+0x1e8>)
 80048dc:	7819      	ldrb	r1, [r3, #0]
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80048e4:	2340      	movs	r3, #64	; 0x40
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f002 fb94 	bl	8007014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80048ec:	2300      	movs	r3, #0
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	20000093 	.word	0x20000093
 80048fc:	20000094 	.word	0x20000094
 8004900:	20000095 	.word	0x20000095

08004904 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b082      	sub	sp, #8
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
 800490c:	460b      	mov	r3, r1
 800490e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8004910:	4b3a      	ldr	r3, [pc, #232]	; (80049fc <USBD_CDC_DeInit+0xf8>)
 8004912:	781b      	ldrb	r3, [r3, #0]
 8004914:	4619      	mov	r1, r3
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f002 fab3 	bl	8006e82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800491c:	4b37      	ldr	r3, [pc, #220]	; (80049fc <USBD_CDC_DeInit+0xf8>)
 800491e:	781b      	ldrb	r3, [r3, #0]
 8004920:	f003 020f 	and.w	r2, r3, #15
 8004924:	6879      	ldr	r1, [r7, #4]
 8004926:	4613      	mov	r3, r2
 8004928:	009b      	lsls	r3, r3, #2
 800492a:	4413      	add	r3, r2
 800492c:	009b      	lsls	r3, r3, #2
 800492e:	440b      	add	r3, r1
 8004930:	3324      	adds	r3, #36	; 0x24
 8004932:	2200      	movs	r2, #0
 8004934:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8004936:	4b32      	ldr	r3, [pc, #200]	; (8004a00 <USBD_CDC_DeInit+0xfc>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	4619      	mov	r1, r3
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f002 faa0 	bl	8006e82 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8004942:	4b2f      	ldr	r3, [pc, #188]	; (8004a00 <USBD_CDC_DeInit+0xfc>)
 8004944:	781b      	ldrb	r3, [r3, #0]
 8004946:	f003 020f 	and.w	r2, r3, #15
 800494a:	6879      	ldr	r1, [r7, #4]
 800494c:	4613      	mov	r3, r2
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	009b      	lsls	r3, r3, #2
 8004954:	440b      	add	r3, r1
 8004956:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800495a:	2200      	movs	r2, #0
 800495c:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800495e:	4b29      	ldr	r3, [pc, #164]	; (8004a04 <USBD_CDC_DeInit+0x100>)
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	4619      	mov	r1, r3
 8004964:	6878      	ldr	r0, [r7, #4]
 8004966:	f002 fa8c 	bl	8006e82 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800496a:	4b26      	ldr	r3, [pc, #152]	; (8004a04 <USBD_CDC_DeInit+0x100>)
 800496c:	781b      	ldrb	r3, [r3, #0]
 800496e:	f003 020f 	and.w	r2, r3, #15
 8004972:	6879      	ldr	r1, [r7, #4]
 8004974:	4613      	mov	r3, r2
 8004976:	009b      	lsls	r3, r3, #2
 8004978:	4413      	add	r3, r2
 800497a:	009b      	lsls	r3, r3, #2
 800497c:	440b      	add	r3, r1
 800497e:	3324      	adds	r3, #36	; 0x24
 8004980:	2200      	movs	r2, #0
 8004982:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8004984:	4b1f      	ldr	r3, [pc, #124]	; (8004a04 <USBD_CDC_DeInit+0x100>)
 8004986:	781b      	ldrb	r3, [r3, #0]
 8004988:	f003 020f 	and.w	r2, r3, #15
 800498c:	6879      	ldr	r1, [r7, #4]
 800498e:	4613      	mov	r3, r2
 8004990:	009b      	lsls	r3, r3, #2
 8004992:	4413      	add	r3, r2
 8004994:	009b      	lsls	r3, r3, #2
 8004996:	440b      	add	r3, r1
 8004998:	3326      	adds	r3, #38	; 0x26
 800499a:	2200      	movs	r2, #0
 800499c:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	32b0      	adds	r2, #176	; 0xb0
 80049a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01f      	beq.n	80049f0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80049b6:	687a      	ldr	r2, [r7, #4]
 80049b8:	33b0      	adds	r3, #176	; 0xb0
 80049ba:	009b      	lsls	r3, r3, #2
 80049bc:	4413      	add	r3, r2
 80049be:	685b      	ldr	r3, [r3, #4]
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	32b0      	adds	r2, #176	; 0xb0
 80049ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d2:	4618      	mov	r0, r3
 80049d4:	f002 fb60 	bl	8007098 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	32b0      	adds	r2, #176	; 0xb0
 80049e2:	2100      	movs	r1, #0
 80049e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3708      	adds	r7, #8
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	20000093 	.word	0x20000093
 8004a00:	20000094 	.word	0x20000094
 8004a04:	20000095 	.word	0x20000095

08004a08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b086      	sub	sp, #24
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	32b0      	adds	r2, #176	; 0xb0
 8004a1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8004a22:	2300      	movs	r3, #0
 8004a24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8004a26:	2300      	movs	r3, #0
 8004a28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8004a2a:	2300      	movs	r3, #0
 8004a2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d101      	bne.n	8004a38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e0bf      	b.n	8004bb8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	781b      	ldrb	r3, [r3, #0]
 8004a3c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d050      	beq.n	8004ae6 <USBD_CDC_Setup+0xde>
 8004a44:	2b20      	cmp	r3, #32
 8004a46:	f040 80af 	bne.w	8004ba8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8004a4a:	683b      	ldr	r3, [r7, #0]
 8004a4c:	88db      	ldrh	r3, [r3, #6]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d03a      	beq.n	8004ac8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8004a52:	683b      	ldr	r3, [r7, #0]
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	b25b      	sxtb	r3, r3
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	da1b      	bge.n	8004a94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004a62:	687a      	ldr	r2, [r7, #4]
 8004a64:	33b0      	adds	r3, #176	; 0xb0
 8004a66:	009b      	lsls	r3, r3, #2
 8004a68:	4413      	add	r3, r2
 8004a6a:	685b      	ldr	r3, [r3, #4]
 8004a6c:	689b      	ldr	r3, [r3, #8]
 8004a6e:	683a      	ldr	r2, [r7, #0]
 8004a70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8004a72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004a74:	683a      	ldr	r2, [r7, #0]
 8004a76:	88d2      	ldrh	r2, [r2, #6]
 8004a78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8004a7a:	683b      	ldr	r3, [r7, #0]
 8004a7c:	88db      	ldrh	r3, [r3, #6]
 8004a7e:	2b07      	cmp	r3, #7
 8004a80:	bf28      	it	cs
 8004a82:	2307      	movcs	r3, #7
 8004a84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	89fa      	ldrh	r2, [r7, #14]
 8004a8a:	4619      	mov	r1, r3
 8004a8c:	6878      	ldr	r0, [r7, #4]
 8004a8e:	f001 fd89 	bl	80065a4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8004a92:	e090      	b.n	8004bb6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	785a      	ldrb	r2, [r3, #1]
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	88db      	ldrh	r3, [r3, #6]
 8004aa2:	2b3f      	cmp	r3, #63	; 0x3f
 8004aa4:	d803      	bhi.n	8004aae <USBD_CDC_Setup+0xa6>
 8004aa6:	683b      	ldr	r3, [r7, #0]
 8004aa8:	88db      	ldrh	r3, [r3, #6]
 8004aaa:	b2da      	uxtb	r2, r3
 8004aac:	e000      	b.n	8004ab0 <USBD_CDC_Setup+0xa8>
 8004aae:	2240      	movs	r2, #64	; 0x40
 8004ab0:	693b      	ldr	r3, [r7, #16]
 8004ab2:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8004ab6:	6939      	ldr	r1, [r7, #16]
 8004ab8:	693b      	ldr	r3, [r7, #16]
 8004aba:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8004abe:	461a      	mov	r2, r3
 8004ac0:	6878      	ldr	r0, [r7, #4]
 8004ac2:	f001 fd9b 	bl	80065fc <USBD_CtlPrepareRx>
      break;
 8004ac6:	e076      	b.n	8004bb6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004ace:	687a      	ldr	r2, [r7, #4]
 8004ad0:	33b0      	adds	r3, #176	; 0xb0
 8004ad2:	009b      	lsls	r3, r3, #2
 8004ad4:	4413      	add	r3, r2
 8004ad6:	685b      	ldr	r3, [r3, #4]
 8004ad8:	689b      	ldr	r3, [r3, #8]
 8004ada:	683a      	ldr	r2, [r7, #0]
 8004adc:	7850      	ldrb	r0, [r2, #1]
 8004ade:	2200      	movs	r2, #0
 8004ae0:	6839      	ldr	r1, [r7, #0]
 8004ae2:	4798      	blx	r3
      break;
 8004ae4:	e067      	b.n	8004bb6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	785b      	ldrb	r3, [r3, #1]
 8004aea:	2b0b      	cmp	r3, #11
 8004aec:	d851      	bhi.n	8004b92 <USBD_CDC_Setup+0x18a>
 8004aee:	a201      	add	r2, pc, #4	; (adr r2, 8004af4 <USBD_CDC_Setup+0xec>)
 8004af0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004af4:	08004b25 	.word	0x08004b25
 8004af8:	08004ba1 	.word	0x08004ba1
 8004afc:	08004b93 	.word	0x08004b93
 8004b00:	08004b93 	.word	0x08004b93
 8004b04:	08004b93 	.word	0x08004b93
 8004b08:	08004b93 	.word	0x08004b93
 8004b0c:	08004b93 	.word	0x08004b93
 8004b10:	08004b93 	.word	0x08004b93
 8004b14:	08004b93 	.word	0x08004b93
 8004b18:	08004b93 	.word	0x08004b93
 8004b1c:	08004b4f 	.word	0x08004b4f
 8004b20:	08004b79 	.word	0x08004b79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	2b03      	cmp	r3, #3
 8004b2e:	d107      	bne.n	8004b40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004b30:	f107 030a 	add.w	r3, r7, #10
 8004b34:	2202      	movs	r2, #2
 8004b36:	4619      	mov	r1, r3
 8004b38:	6878      	ldr	r0, [r7, #4]
 8004b3a:	f001 fd33 	bl	80065a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b3e:	e032      	b.n	8004ba6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004b40:	6839      	ldr	r1, [r7, #0]
 8004b42:	6878      	ldr	r0, [r7, #4]
 8004b44:	f001 fcbd 	bl	80064c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b48:	2303      	movs	r3, #3
 8004b4a:	75fb      	strb	r3, [r7, #23]
          break;
 8004b4c:	e02b      	b.n	8004ba6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	2b03      	cmp	r3, #3
 8004b58:	d107      	bne.n	8004b6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8004b5a:	f107 030d 	add.w	r3, r7, #13
 8004b5e:	2201      	movs	r2, #1
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f001 fd1e 	bl	80065a4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8004b68:	e01d      	b.n	8004ba6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8004b6a:	6839      	ldr	r1, [r7, #0]
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f001 fca8 	bl	80064c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b72:	2303      	movs	r3, #3
 8004b74:	75fb      	strb	r3, [r7, #23]
          break;
 8004b76:	e016      	b.n	8004ba6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	2b03      	cmp	r3, #3
 8004b82:	d00f      	beq.n	8004ba4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8004b84:	6839      	ldr	r1, [r7, #0]
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f001 fc9b 	bl	80064c2 <USBD_CtlError>
            ret = USBD_FAIL;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8004b90:	e008      	b.n	8004ba4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8004b92:	6839      	ldr	r1, [r7, #0]
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f001 fc94 	bl	80064c2 <USBD_CtlError>
          ret = USBD_FAIL;
 8004b9a:	2303      	movs	r3, #3
 8004b9c:	75fb      	strb	r3, [r7, #23]
          break;
 8004b9e:	e002      	b.n	8004ba6 <USBD_CDC_Setup+0x19e>
          break;
 8004ba0:	bf00      	nop
 8004ba2:	e008      	b.n	8004bb6 <USBD_CDC_Setup+0x1ae>
          break;
 8004ba4:	bf00      	nop
      }
      break;
 8004ba6:	e006      	b.n	8004bb6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8004ba8:	6839      	ldr	r1, [r7, #0]
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f001 fc89 	bl	80064c2 <USBD_CtlError>
      ret = USBD_FAIL;
 8004bb0:	2303      	movs	r3, #3
 8004bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8004bb4:	bf00      	nop
  }

  return (uint8_t)ret;
 8004bb6:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bb8:	4618      	mov	r0, r3
 8004bba:	3718      	adds	r7, #24
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	bd80      	pop	{r7, pc}

08004bc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b084      	sub	sp, #16
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	460b      	mov	r3, r1
 8004bca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8004bd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	32b0      	adds	r2, #176	; 0xb0
 8004bde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d101      	bne.n	8004bea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8004be6:	2303      	movs	r3, #3
 8004be8:	e065      	b.n	8004cb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	32b0      	adds	r2, #176	; 0xb0
 8004bf4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004bfa:	78fb      	ldrb	r3, [r7, #3]
 8004bfc:	f003 020f 	and.w	r2, r3, #15
 8004c00:	6879      	ldr	r1, [r7, #4]
 8004c02:	4613      	mov	r3, r2
 8004c04:	009b      	lsls	r3, r3, #2
 8004c06:	4413      	add	r3, r2
 8004c08:	009b      	lsls	r3, r3, #2
 8004c0a:	440b      	add	r3, r1
 8004c0c:	3318      	adds	r3, #24
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d02f      	beq.n	8004c74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8004c14:	78fb      	ldrb	r3, [r7, #3]
 8004c16:	f003 020f 	and.w	r2, r3, #15
 8004c1a:	6879      	ldr	r1, [r7, #4]
 8004c1c:	4613      	mov	r3, r2
 8004c1e:	009b      	lsls	r3, r3, #2
 8004c20:	4413      	add	r3, r2
 8004c22:	009b      	lsls	r3, r3, #2
 8004c24:	440b      	add	r3, r1
 8004c26:	3318      	adds	r3, #24
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	78fb      	ldrb	r3, [r7, #3]
 8004c2c:	f003 010f 	and.w	r1, r3, #15
 8004c30:	68f8      	ldr	r0, [r7, #12]
 8004c32:	460b      	mov	r3, r1
 8004c34:	00db      	lsls	r3, r3, #3
 8004c36:	440b      	add	r3, r1
 8004c38:	009b      	lsls	r3, r3, #2
 8004c3a:	4403      	add	r3, r0
 8004c3c:	3348      	adds	r3, #72	; 0x48
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	fbb2 f1f3 	udiv	r1, r2, r3
 8004c44:	fb01 f303 	mul.w	r3, r1, r3
 8004c48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d112      	bne.n	8004c74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8004c4e:	78fb      	ldrb	r3, [r7, #3]
 8004c50:	f003 020f 	and.w	r2, r3, #15
 8004c54:	6879      	ldr	r1, [r7, #4]
 8004c56:	4613      	mov	r3, r2
 8004c58:	009b      	lsls	r3, r3, #2
 8004c5a:	4413      	add	r3, r2
 8004c5c:	009b      	lsls	r3, r3, #2
 8004c5e:	440b      	add	r3, r1
 8004c60:	3318      	adds	r3, #24
 8004c62:	2200      	movs	r2, #0
 8004c64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8004c66:	78f9      	ldrb	r1, [r7, #3]
 8004c68:	2300      	movs	r3, #0
 8004c6a:	2200      	movs	r2, #0
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f002 f9b0 	bl	8006fd2 <USBD_LL_Transmit>
 8004c72:	e01f      	b.n	8004cb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	2200      	movs	r2, #0
 8004c78:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c82:	687a      	ldr	r2, [r7, #4]
 8004c84:	33b0      	adds	r3, #176	; 0xb0
 8004c86:	009b      	lsls	r3, r3, #2
 8004c88:	4413      	add	r3, r2
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d010      	beq.n	8004cb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004c98:	687a      	ldr	r2, [r7, #4]
 8004c9a:	33b0      	adds	r3, #176	; 0xb0
 8004c9c:	009b      	lsls	r3, r3, #2
 8004c9e:	4413      	add	r3, r2
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	68ba      	ldr	r2, [r7, #8]
 8004ca6:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	f502 7104 	add.w	r1, r2, #528	; 0x210
 8004cb0:	78fa      	ldrb	r2, [r7, #3]
 8004cb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8004cb4:	2300      	movs	r3, #0
}
 8004cb6:	4618      	mov	r0, r3
 8004cb8:	3710      	adds	r7, #16
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	bd80      	pop	{r7, pc}

08004cbe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8004cbe:	b580      	push	{r7, lr}
 8004cc0:	b084      	sub	sp, #16
 8004cc2:	af00      	add	r7, sp, #0
 8004cc4:	6078      	str	r0, [r7, #4]
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	32b0      	adds	r2, #176	; 0xb0
 8004cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004cd8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	32b0      	adds	r2, #176	; 0xb0
 8004ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d101      	bne.n	8004cf0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004cec:	2303      	movs	r3, #3
 8004cee:	e01a      	b.n	8004d26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8004cf0:	78fb      	ldrb	r3, [r7, #3]
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f002 f9ae 	bl	8007056 <USBD_LL_GetRxDataSize>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	33b0      	adds	r3, #176	; 0xb0
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	4413      	add	r3, r2
 8004d10:	685b      	ldr	r3, [r3, #4]
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8004d1a:	68fa      	ldr	r2, [r7, #12]
 8004d1c:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8004d20:	4611      	mov	r1, r2
 8004d22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8004d24:	2300      	movs	r3, #0
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	3710      	adds	r7, #16
 8004d2a:	46bd      	mov	sp, r7
 8004d2c:	bd80      	pop	{r7, pc}

08004d2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8004d2e:	b580      	push	{r7, lr}
 8004d30:	b084      	sub	sp, #16
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	32b0      	adds	r2, #176	; 0xb0
 8004d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d101      	bne.n	8004d50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8004d4c:	2303      	movs	r3, #3
 8004d4e:	e025      	b.n	8004d9c <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d56:	687a      	ldr	r2, [r7, #4]
 8004d58:	33b0      	adds	r3, #176	; 0xb0
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d01a      	beq.n	8004d9a <USBD_CDC_EP0_RxReady+0x6c>
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8004d6a:	2bff      	cmp	r3, #255	; 0xff
 8004d6c:	d015      	beq.n	8004d9a <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004d74:	687a      	ldr	r2, [r7, #4]
 8004d76:	33b0      	adds	r3, #176	; 0xb0
 8004d78:	009b      	lsls	r3, r3, #2
 8004d7a:	4413      	add	r3, r2
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	689b      	ldr	r3, [r3, #8]
 8004d80:	68fa      	ldr	r2, [r7, #12]
 8004d82:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8004d86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8004d8e:	b292      	uxth	r2, r2
 8004d90:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	22ff      	movs	r2, #255	; 0xff
 8004d96:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3710      	adds	r7, #16
 8004da0:	46bd      	mov	sp, r7
 8004da2:	bd80      	pop	{r7, pc}

08004da4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004dac:	2182      	movs	r1, #130	; 0x82
 8004dae:	4818      	ldr	r0, [pc, #96]	; (8004e10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004db0:	f000 fd4f 	bl	8005852 <USBD_GetEpDesc>
 8004db4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004db6:	2101      	movs	r1, #1
 8004db8:	4815      	ldr	r0, [pc, #84]	; (8004e10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004dba:	f000 fd4a 	bl	8005852 <USBD_GetEpDesc>
 8004dbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004dc0:	2181      	movs	r1, #129	; 0x81
 8004dc2:	4813      	ldr	r0, [pc, #76]	; (8004e10 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8004dc4:	f000 fd45 	bl	8005852 <USBD_GetEpDesc>
 8004dc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d002      	beq.n	8004dd6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004dd0:	697b      	ldr	r3, [r7, #20]
 8004dd2:	2210      	movs	r2, #16
 8004dd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d006      	beq.n	8004dea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ddc:	693b      	ldr	r3, [r7, #16]
 8004dde:	2200      	movs	r2, #0
 8004de0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004de4:	711a      	strb	r2, [r3, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d006      	beq.n	8004dfe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2200      	movs	r2, #0
 8004df4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004df8:	711a      	strb	r2, [r3, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	2243      	movs	r2, #67	; 0x43
 8004e02:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004e04:	4b02      	ldr	r3, [pc, #8]	; (8004e10 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3718      	adds	r7, #24
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}
 8004e0e:	bf00      	nop
 8004e10:	20000050 	.word	0x20000050

08004e14 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8004e14:	b580      	push	{r7, lr}
 8004e16:	b086      	sub	sp, #24
 8004e18:	af00      	add	r7, sp, #0
 8004e1a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004e1c:	2182      	movs	r1, #130	; 0x82
 8004e1e:	4818      	ldr	r0, [pc, #96]	; (8004e80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004e20:	f000 fd17 	bl	8005852 <USBD_GetEpDesc>
 8004e24:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004e26:	2101      	movs	r1, #1
 8004e28:	4815      	ldr	r0, [pc, #84]	; (8004e80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004e2a:	f000 fd12 	bl	8005852 <USBD_GetEpDesc>
 8004e2e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004e30:	2181      	movs	r1, #129	; 0x81
 8004e32:	4813      	ldr	r0, [pc, #76]	; (8004e80 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8004e34:	f000 fd0d 	bl	8005852 <USBD_GetEpDesc>
 8004e38:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004e3a:	697b      	ldr	r3, [r7, #20]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d002      	beq.n	8004e46 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	2210      	movs	r2, #16
 8004e44:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d006      	beq.n	8004e5a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004e4c:	693b      	ldr	r3, [r7, #16]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	711a      	strb	r2, [r3, #4]
 8004e52:	2200      	movs	r2, #0
 8004e54:	f042 0202 	orr.w	r2, r2, #2
 8004e58:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d006      	beq.n	8004e6e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	2200      	movs	r2, #0
 8004e64:	711a      	strb	r2, [r3, #4]
 8004e66:	2200      	movs	r2, #0
 8004e68:	f042 0202 	orr.w	r2, r2, #2
 8004e6c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2243      	movs	r2, #67	; 0x43
 8004e72:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004e74:	4b02      	ldr	r3, [pc, #8]	; (8004e80 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
 8004e7e:	bf00      	nop
 8004e80:	20000050 	.word	0x20000050

08004e84 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8004e8c:	2182      	movs	r1, #130	; 0x82
 8004e8e:	4818      	ldr	r0, [pc, #96]	; (8004ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e90:	f000 fcdf 	bl	8005852 <USBD_GetEpDesc>
 8004e94:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8004e96:	2101      	movs	r1, #1
 8004e98:	4815      	ldr	r0, [pc, #84]	; (8004ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004e9a:	f000 fcda 	bl	8005852 <USBD_GetEpDesc>
 8004e9e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8004ea0:	2181      	movs	r1, #129	; 0x81
 8004ea2:	4813      	ldr	r0, [pc, #76]	; (8004ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8004ea4:	f000 fcd5 	bl	8005852 <USBD_GetEpDesc>
 8004ea8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8004eaa:	697b      	ldr	r3, [r7, #20]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d002      	beq.n	8004eb6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8004eb0:	697b      	ldr	r3, [r7, #20]
 8004eb2:	2210      	movs	r2, #16
 8004eb4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d006      	beq.n	8004eca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ebc:	693b      	ldr	r3, [r7, #16]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec4:	711a      	strb	r2, [r3, #4]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d006      	beq.n	8004ede <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ed8:	711a      	strb	r2, [r3, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2243      	movs	r2, #67	; 0x43
 8004ee2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8004ee4:	4b02      	ldr	r3, [pc, #8]	; (8004ef0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000050 	.word	0x20000050

08004ef4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8004ef4:	b480      	push	{r7}
 8004ef6:	b083      	sub	sp, #12
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	220a      	movs	r2, #10
 8004f00:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8004f02:	4b03      	ldr	r3, [pc, #12]	; (8004f10 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8004f04:	4618      	mov	r0, r3
 8004f06:	370c      	adds	r7, #12
 8004f08:	46bd      	mov	sp, r7
 8004f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0e:	4770      	bx	lr
 8004f10:	2000000c 	.word	0x2000000c

08004f14 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8004f14:	b480      	push	{r7}
 8004f16:	b083      	sub	sp, #12
 8004f18:	af00      	add	r7, sp, #0
 8004f1a:	6078      	str	r0, [r7, #4]
 8004f1c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d101      	bne.n	8004f28 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8004f24:	2303      	movs	r3, #3
 8004f26:	e009      	b.n	8004f3c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8004f2e:	687a      	ldr	r2, [r7, #4]
 8004f30:	33b0      	adds	r3, #176	; 0xb0
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8004f3a:	2300      	movs	r3, #0
}
 8004f3c:	4618      	mov	r0, r3
 8004f3e:	370c      	adds	r7, #12
 8004f40:	46bd      	mov	sp, r7
 8004f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f46:	4770      	bx	lr

08004f48 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8004f48:	b480      	push	{r7}
 8004f4a:	b087      	sub	sp, #28
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	60f8      	str	r0, [r7, #12]
 8004f50:	60b9      	str	r1, [r7, #8]
 8004f52:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	32b0      	adds	r2, #176	; 0xb0
 8004f5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f62:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8004f64:	697b      	ldr	r3, [r7, #20]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d101      	bne.n	8004f6e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8004f6a:	2303      	movs	r3, #3
 8004f6c:	e008      	b.n	8004f80 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	687a      	ldr	r2, [r7, #4]
 8004f7a:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 8004f7e:	2300      	movs	r3, #0
}
 8004f80:	4618      	mov	r0, r3
 8004f82:	371c      	adds	r7, #28
 8004f84:	46bd      	mov	sp, r7
 8004f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f8a:	4770      	bx	lr

08004f8c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b085      	sub	sp, #20
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	32b0      	adds	r2, #176	; 0xb0
 8004fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d101      	bne.n	8004fb0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8004fac:	2303      	movs	r3, #3
 8004fae:	e004      	b.n	8004fba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	683a      	ldr	r2, [r7, #0]
 8004fb4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3714      	adds	r7, #20
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc4:	4770      	bx	lr
	...

08004fc8 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b084      	sub	sp, #16
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	32b0      	adds	r2, #176	; 0xb0
 8004fda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fde:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	32b0      	adds	r2, #176	; 0xb0
 8004fee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d101      	bne.n	8004ffa <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	e025      	b.n	8005046 <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 8004ffa:	68bb      	ldr	r3, [r7, #8]
 8004ffc:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005000:	2b00      	cmp	r3, #0
 8005002:	d11f      	bne.n	8005044 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8005004:	68bb      	ldr	r3, [r7, #8]
 8005006:	2201      	movs	r2, #1
 8005008:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800500c:	4b10      	ldr	r3, [pc, #64]	; (8005050 <USBD_CDC_TransmitPacket+0x88>)
 800500e:	781b      	ldrb	r3, [r3, #0]
 8005010:	f003 020f 	and.w	r2, r3, #15
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800501a:	6878      	ldr	r0, [r7, #4]
 800501c:	4613      	mov	r3, r2
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	4413      	add	r3, r2
 8005022:	009b      	lsls	r3, r3, #2
 8005024:	4403      	add	r3, r0
 8005026:	3318      	adds	r3, #24
 8005028:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800502a:	4b09      	ldr	r3, [pc, #36]	; (8005050 <USBD_CDC_TransmitPacket+0x88>)
 800502c:	7819      	ldrb	r1, [r3, #0]
 800502e:	68bb      	ldr	r3, [r7, #8]
 8005030:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800503a:	6878      	ldr	r0, [r7, #4]
 800503c:	f001 ffc9 	bl	8006fd2 <USBD_LL_Transmit>

    ret = USBD_OK;
 8005040:	2300      	movs	r3, #0
 8005042:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8005044:	7bfb      	ldrb	r3, [r7, #15]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3710      	adds	r7, #16
 800504a:	46bd      	mov	sp, r7
 800504c:	bd80      	pop	{r7, pc}
 800504e:	bf00      	nop
 8005050:	20000093 	.word	0x20000093

08005054 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b084      	sub	sp, #16
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	32b0      	adds	r2, #176	; 0xb0
 8005066:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800506a:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	32b0      	adds	r2, #176	; 0xb0
 8005076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d101      	bne.n	8005082 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800507e:	2303      	movs	r3, #3
 8005080:	e018      	b.n	80050b4 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	7c1b      	ldrb	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d10a      	bne.n	80050a0 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800508a:	4b0c      	ldr	r3, [pc, #48]	; (80050bc <USBD_CDC_ReceivePacket+0x68>)
 800508c:	7819      	ldrb	r1, [r3, #0]
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005094:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005098:	6878      	ldr	r0, [r7, #4]
 800509a:	f001 ffbb 	bl	8007014 <USBD_LL_PrepareReceive>
 800509e:	e008      	b.n	80050b2 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80050a0:	4b06      	ldr	r3, [pc, #24]	; (80050bc <USBD_CDC_ReceivePacket+0x68>)
 80050a2:	7819      	ldrb	r1, [r3, #0]
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80050aa:	2340      	movs	r3, #64	; 0x40
 80050ac:	6878      	ldr	r0, [r7, #4]
 80050ae:	f001 ffb1 	bl	8007014 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	20000094 	.word	0x20000094

080050c0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b086      	sub	sp, #24
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	4613      	mov	r3, r2
 80050cc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d101      	bne.n	80050d8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80050d4:	2303      	movs	r3, #3
 80050d6:	e01f      	b.n	8005118 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	2200      	movs	r2, #0
 80050dc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	2200      	movs	r2, #0
 80050e4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2200      	movs	r2, #0
 80050ec:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d003      	beq.n	80050fe <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	68ba      	ldr	r2, [r7, #8]
 80050fa:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2201      	movs	r2, #1
 8005102:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	79fa      	ldrb	r2, [r7, #7]
 800510a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800510c:	68f8      	ldr	r0, [r7, #12]
 800510e:	f001 fe2b 	bl	8006d68 <USBD_LL_Init>
 8005112:	4603      	mov	r3, r0
 8005114:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005116:	7dfb      	ldrb	r3, [r7, #23]
}
 8005118:	4618      	mov	r0, r3
 800511a:	3718      	adds	r7, #24
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800512a:	2300      	movs	r3, #0
 800512c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800512e:	683b      	ldr	r3, [r7, #0]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d101      	bne.n	8005138 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005134:	2303      	movs	r3, #3
 8005136:	e025      	b.n	8005184 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	683a      	ldr	r2, [r7, #0]
 800513c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	32ae      	adds	r2, #174	; 0xae
 800514a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00f      	beq.n	8005174 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	32ae      	adds	r2, #174	; 0xae
 800515e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005164:	f107 020e 	add.w	r2, r7, #14
 8005168:	4610      	mov	r0, r2
 800516a:	4798      	blx	r3
 800516c:	4602      	mov	r2, r0
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800517a:	1c5a      	adds	r2, r3, #1
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005182:	2300      	movs	r3, #0
}
 8005184:	4618      	mov	r0, r3
 8005186:	3710      	adds	r7, #16
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}

0800518c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800518c:	b580      	push	{r7, lr}
 800518e:	b082      	sub	sp, #8
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005194:	6878      	ldr	r0, [r7, #4]
 8005196:	f001 fe33 	bl	8006e00 <USBD_LL_Start>
 800519a:	4603      	mov	r3, r0
}
 800519c:	4618      	mov	r0, r3
 800519e:	3708      	adds	r7, #8
 80051a0:	46bd      	mov	sp, r7
 80051a2:	bd80      	pop	{r7, pc}

080051a4 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b083      	sub	sp, #12
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80051ac:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80051ae:	4618      	mov	r0, r3
 80051b0:	370c      	adds	r7, #12
 80051b2:	46bd      	mov	sp, r7
 80051b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b8:	4770      	bx	lr

080051ba <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051ba:	b580      	push	{r7, lr}
 80051bc:	b084      	sub	sp, #16
 80051be:	af00      	add	r7, sp, #0
 80051c0:	6078      	str	r0, [r7, #4]
 80051c2:	460b      	mov	r3, r1
 80051c4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80051c6:	2300      	movs	r3, #0
 80051c8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d009      	beq.n	80051e8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	78fa      	ldrb	r2, [r7, #3]
 80051de:	4611      	mov	r1, r2
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	4798      	blx	r3
 80051e4:	4603      	mov	r3, r0
 80051e6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80051e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	6078      	str	r0, [r7, #4]
 80051fa:	460b      	mov	r3, r1
 80051fc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80051fe:	2300      	movs	r3, #0
 8005200:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005208:	685b      	ldr	r3, [r3, #4]
 800520a:	78fa      	ldrb	r2, [r7, #3]
 800520c:	4611      	mov	r1, r2
 800520e:	6878      	ldr	r0, [r7, #4]
 8005210:	4798      	blx	r3
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005218:	2303      	movs	r3, #3
 800521a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800521c:	7bfb      	ldrb	r3, [r7, #15]
}
 800521e:	4618      	mov	r0, r3
 8005220:	3710      	adds	r7, #16
 8005222:	46bd      	mov	sp, r7
 8005224:	bd80      	pop	{r7, pc}

08005226 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005226:	b580      	push	{r7, lr}
 8005228:	b084      	sub	sp, #16
 800522a:	af00      	add	r7, sp, #0
 800522c:	6078      	str	r0, [r7, #4]
 800522e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	4618      	mov	r0, r3
 800523a:	f001 f908 	bl	800644e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2201      	movs	r2, #1
 8005242:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 800524c:	461a      	mov	r2, r3
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800525a:	f003 031f 	and.w	r3, r3, #31
 800525e:	2b02      	cmp	r3, #2
 8005260:	d01a      	beq.n	8005298 <USBD_LL_SetupStage+0x72>
 8005262:	2b02      	cmp	r3, #2
 8005264:	d822      	bhi.n	80052ac <USBD_LL_SetupStage+0x86>
 8005266:	2b00      	cmp	r3, #0
 8005268:	d002      	beq.n	8005270 <USBD_LL_SetupStage+0x4a>
 800526a:	2b01      	cmp	r3, #1
 800526c:	d00a      	beq.n	8005284 <USBD_LL_SetupStage+0x5e>
 800526e:	e01d      	b.n	80052ac <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005276:	4619      	mov	r1, r3
 8005278:	6878      	ldr	r0, [r7, #4]
 800527a:	f000 fb5f 	bl	800593c <USBD_StdDevReq>
 800527e:	4603      	mov	r3, r0
 8005280:	73fb      	strb	r3, [r7, #15]
      break;
 8005282:	e020      	b.n	80052c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800528a:	4619      	mov	r1, r3
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fbc7 	bl	8005a20 <USBD_StdItfReq>
 8005292:	4603      	mov	r3, r0
 8005294:	73fb      	strb	r3, [r7, #15]
      break;
 8005296:	e016      	b.n	80052c6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800529e:	4619      	mov	r1, r3
 80052a0:	6878      	ldr	r0, [r7, #4]
 80052a2:	f000 fc29 	bl	8005af8 <USBD_StdEPReq>
 80052a6:	4603      	mov	r3, r0
 80052a8:	73fb      	strb	r3, [r7, #15]
      break;
 80052aa:	e00c      	b.n	80052c6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80052b2:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80052b6:	b2db      	uxtb	r3, r3
 80052b8:	4619      	mov	r1, r3
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f001 fe00 	bl	8006ec0 <USBD_LL_StallEP>
 80052c0:	4603      	mov	r3, r0
 80052c2:	73fb      	strb	r3, [r7, #15]
      break;
 80052c4:	bf00      	nop
  }

  return ret;
 80052c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052c8:	4618      	mov	r0, r3
 80052ca:	3710      	adds	r7, #16
 80052cc:	46bd      	mov	sp, r7
 80052ce:	bd80      	pop	{r7, pc}

080052d0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80052d0:	b580      	push	{r7, lr}
 80052d2:	b086      	sub	sp, #24
 80052d4:	af00      	add	r7, sp, #0
 80052d6:	60f8      	str	r0, [r7, #12]
 80052d8:	460b      	mov	r3, r1
 80052da:	607a      	str	r2, [r7, #4]
 80052dc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80052de:	2300      	movs	r3, #0
 80052e0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80052e2:	7afb      	ldrb	r3, [r7, #11]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d16e      	bne.n	80053c6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80052ee:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80052f6:	2b03      	cmp	r3, #3
 80052f8:	f040 8098 	bne.w	800542c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	693b      	ldr	r3, [r7, #16]
 8005302:	68db      	ldr	r3, [r3, #12]
 8005304:	429a      	cmp	r2, r3
 8005306:	d913      	bls.n	8005330 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005308:	693b      	ldr	r3, [r7, #16]
 800530a:	689a      	ldr	r2, [r3, #8]
 800530c:	693b      	ldr	r3, [r7, #16]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	1ad2      	subs	r2, r2, r3
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005316:	693b      	ldr	r3, [r7, #16]
 8005318:	68da      	ldr	r2, [r3, #12]
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	4293      	cmp	r3, r2
 8005320:	bf28      	it	cs
 8005322:	4613      	movcs	r3, r2
 8005324:	461a      	mov	r2, r3
 8005326:	6879      	ldr	r1, [r7, #4]
 8005328:	68f8      	ldr	r0, [r7, #12]
 800532a:	f001 f984 	bl	8006636 <USBD_CtlContinueRx>
 800532e:	e07d      	b.n	800542c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005336:	f003 031f 	and.w	r3, r3, #31
 800533a:	2b02      	cmp	r3, #2
 800533c:	d014      	beq.n	8005368 <USBD_LL_DataOutStage+0x98>
 800533e:	2b02      	cmp	r3, #2
 8005340:	d81d      	bhi.n	800537e <USBD_LL_DataOutStage+0xae>
 8005342:	2b00      	cmp	r3, #0
 8005344:	d002      	beq.n	800534c <USBD_LL_DataOutStage+0x7c>
 8005346:	2b01      	cmp	r3, #1
 8005348:	d003      	beq.n	8005352 <USBD_LL_DataOutStage+0x82>
 800534a:	e018      	b.n	800537e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800534c:	2300      	movs	r3, #0
 800534e:	75bb      	strb	r3, [r7, #22]
            break;
 8005350:	e018      	b.n	8005384 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005358:	b2db      	uxtb	r3, r3
 800535a:	4619      	mov	r1, r3
 800535c:	68f8      	ldr	r0, [r7, #12]
 800535e:	f000 fa5e 	bl	800581e <USBD_CoreFindIF>
 8005362:	4603      	mov	r3, r0
 8005364:	75bb      	strb	r3, [r7, #22]
            break;
 8005366:	e00d      	b.n	8005384 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800536e:	b2db      	uxtb	r3, r3
 8005370:	4619      	mov	r1, r3
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fa60 	bl	8005838 <USBD_CoreFindEP>
 8005378:	4603      	mov	r3, r0
 800537a:	75bb      	strb	r3, [r7, #22]
            break;
 800537c:	e002      	b.n	8005384 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800537e:	2300      	movs	r3, #0
 8005380:	75bb      	strb	r3, [r7, #22]
            break;
 8005382:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005384:	7dbb      	ldrb	r3, [r7, #22]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d119      	bne.n	80053be <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005390:	b2db      	uxtb	r3, r3
 8005392:	2b03      	cmp	r3, #3
 8005394:	d113      	bne.n	80053be <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005396:	7dba      	ldrb	r2, [r7, #22]
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	32ae      	adds	r2, #174	; 0xae
 800539c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053a0:	691b      	ldr	r3, [r3, #16]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d00b      	beq.n	80053be <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80053a6:	7dba      	ldrb	r2, [r7, #22]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80053ae:	7dba      	ldrb	r2, [r7, #22]
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	32ae      	adds	r2, #174	; 0xae
 80053b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f001 f94a 	bl	8006658 <USBD_CtlSendStatus>
 80053c4:	e032      	b.n	800542c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80053c6:	7afb      	ldrb	r3, [r7, #11]
 80053c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80053cc:	b2db      	uxtb	r3, r3
 80053ce:	4619      	mov	r1, r3
 80053d0:	68f8      	ldr	r0, [r7, #12]
 80053d2:	f000 fa31 	bl	8005838 <USBD_CoreFindEP>
 80053d6:	4603      	mov	r3, r0
 80053d8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80053da:	7dbb      	ldrb	r3, [r7, #22]
 80053dc:	2bff      	cmp	r3, #255	; 0xff
 80053de:	d025      	beq.n	800542c <USBD_LL_DataOutStage+0x15c>
 80053e0:	7dbb      	ldrb	r3, [r7, #22]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d122      	bne.n	800542c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053ec:	b2db      	uxtb	r3, r3
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	d117      	bne.n	8005422 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80053f2:	7dba      	ldrb	r2, [r7, #22]
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	32ae      	adds	r2, #174	; 0xae
 80053f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053fc:	699b      	ldr	r3, [r3, #24]
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d00f      	beq.n	8005422 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005402:	7dba      	ldrb	r2, [r7, #22]
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800540a:	7dba      	ldrb	r2, [r7, #22]
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	32ae      	adds	r2, #174	; 0xae
 8005410:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	7afa      	ldrb	r2, [r7, #11]
 8005418:	4611      	mov	r1, r2
 800541a:	68f8      	ldr	r0, [r7, #12]
 800541c:	4798      	blx	r3
 800541e:	4603      	mov	r3, r0
 8005420:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005422:	7dfb      	ldrb	r3, [r7, #23]
 8005424:	2b00      	cmp	r3, #0
 8005426:	d001      	beq.n	800542c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005428:	7dfb      	ldrb	r3, [r7, #23]
 800542a:	e000      	b.n	800542e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800542c:	2300      	movs	r3, #0
}
 800542e:	4618      	mov	r0, r3
 8005430:	3718      	adds	r7, #24
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}

08005436 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005436:	b580      	push	{r7, lr}
 8005438:	b086      	sub	sp, #24
 800543a:	af00      	add	r7, sp, #0
 800543c:	60f8      	str	r0, [r7, #12]
 800543e:	460b      	mov	r3, r1
 8005440:	607a      	str	r2, [r7, #4]
 8005442:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005444:	7afb      	ldrb	r3, [r7, #11]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d16f      	bne.n	800552a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	3314      	adds	r3, #20
 800544e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005456:	2b02      	cmp	r3, #2
 8005458:	d15a      	bne.n	8005510 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	689a      	ldr	r2, [r3, #8]
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	429a      	cmp	r2, r3
 8005464:	d914      	bls.n	8005490 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005466:	693b      	ldr	r3, [r7, #16]
 8005468:	689a      	ldr	r2, [r3, #8]
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	68db      	ldr	r3, [r3, #12]
 800546e:	1ad2      	subs	r2, r2, r3
 8005470:	693b      	ldr	r3, [r7, #16]
 8005472:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	461a      	mov	r2, r3
 800547a:	6879      	ldr	r1, [r7, #4]
 800547c:	68f8      	ldr	r0, [r7, #12]
 800547e:	f001 f8ac 	bl	80065da <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005482:	2300      	movs	r3, #0
 8005484:	2200      	movs	r2, #0
 8005486:	2100      	movs	r1, #0
 8005488:	68f8      	ldr	r0, [r7, #12]
 800548a:	f001 fdc3 	bl	8007014 <USBD_LL_PrepareReceive>
 800548e:	e03f      	b.n	8005510 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005490:	693b      	ldr	r3, [r7, #16]
 8005492:	68da      	ldr	r2, [r3, #12]
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	429a      	cmp	r2, r3
 800549a:	d11c      	bne.n	80054d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800549c:	693b      	ldr	r3, [r7, #16]
 800549e:	685a      	ldr	r2, [r3, #4]
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d316      	bcc.n	80054d6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	685a      	ldr	r2, [r3, #4]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80054b2:	429a      	cmp	r2, r3
 80054b4:	d20f      	bcs.n	80054d6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80054b6:	2200      	movs	r2, #0
 80054b8:	2100      	movs	r1, #0
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f001 f88d 	bl	80065da <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	2200      	movs	r2, #0
 80054c4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80054c8:	2300      	movs	r3, #0
 80054ca:	2200      	movs	r2, #0
 80054cc:	2100      	movs	r1, #0
 80054ce:	68f8      	ldr	r0, [r7, #12]
 80054d0:	f001 fda0 	bl	8007014 <USBD_LL_PrepareReceive>
 80054d4:	e01c      	b.n	8005510 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d10f      	bne.n	8005502 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054e8:	68db      	ldr	r3, [r3, #12]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d009      	beq.n	8005502 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80054fc:	68db      	ldr	r3, [r3, #12]
 80054fe:	68f8      	ldr	r0, [r7, #12]
 8005500:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005502:	2180      	movs	r1, #128	; 0x80
 8005504:	68f8      	ldr	r0, [r7, #12]
 8005506:	f001 fcdb 	bl	8006ec0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800550a:	68f8      	ldr	r0, [r7, #12]
 800550c:	f001 f8b7 	bl	800667e <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d03a      	beq.n	8005590 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800551a:	68f8      	ldr	r0, [r7, #12]
 800551c:	f7ff fe42 	bl	80051a4 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005528:	e032      	b.n	8005590 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800552a:	7afb      	ldrb	r3, [r7, #11]
 800552c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005530:	b2db      	uxtb	r3, r3
 8005532:	4619      	mov	r1, r3
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f97f 	bl	8005838 <USBD_CoreFindEP>
 800553a:	4603      	mov	r3, r0
 800553c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800553e:	7dfb      	ldrb	r3, [r7, #23]
 8005540:	2bff      	cmp	r3, #255	; 0xff
 8005542:	d025      	beq.n	8005590 <USBD_LL_DataInStage+0x15a>
 8005544:	7dfb      	ldrb	r3, [r7, #23]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d122      	bne.n	8005590 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005550:	b2db      	uxtb	r3, r3
 8005552:	2b03      	cmp	r3, #3
 8005554:	d11c      	bne.n	8005590 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005556:	7dfa      	ldrb	r2, [r7, #23]
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	32ae      	adds	r2, #174	; 0xae
 800555c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d014      	beq.n	8005590 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005566:	7dfa      	ldrb	r2, [r7, #23]
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800556e:	7dfa      	ldrb	r2, [r7, #23]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	32ae      	adds	r2, #174	; 0xae
 8005574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005578:	695b      	ldr	r3, [r3, #20]
 800557a:	7afa      	ldrb	r2, [r7, #11]
 800557c:	4611      	mov	r1, r2
 800557e:	68f8      	ldr	r0, [r7, #12]
 8005580:	4798      	blx	r3
 8005582:	4603      	mov	r3, r0
 8005584:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005586:	7dbb      	ldrb	r3, [r7, #22]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d001      	beq.n	8005590 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800558c:	7dbb      	ldrb	r3, [r7, #22]
 800558e:	e000      	b.n	8005592 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	3718      	adds	r7, #24
 8005596:	46bd      	mov	sp, r7
 8005598:	bd80      	pop	{r7, pc}

0800559a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800559a:	b580      	push	{r7, lr}
 800559c:	b084      	sub	sp, #16
 800559e:	af00      	add	r7, sp, #0
 80055a0:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	2201      	movs	r2, #1
 80055aa:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2200      	movs	r2, #0
 80055b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2200      	movs	r2, #0
 80055ba:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	2200      	movs	r2, #0
 80055c0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d014      	beq.n	8005600 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00e      	beq.n	8005600 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	687a      	ldr	r2, [r7, #4]
 80055ec:	6852      	ldr	r2, [r2, #4]
 80055ee:	b2d2      	uxtb	r2, r2
 80055f0:	4611      	mov	r1, r2
 80055f2:	6878      	ldr	r0, [r7, #4]
 80055f4:	4798      	blx	r3
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	d001      	beq.n	8005600 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80055fc:	2303      	movs	r3, #3
 80055fe:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005600:	2340      	movs	r3, #64	; 0x40
 8005602:	2200      	movs	r2, #0
 8005604:	2100      	movs	r1, #0
 8005606:	6878      	ldr	r0, [r7, #4]
 8005608:	f001 fc15 	bl	8006e36 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	2201      	movs	r2, #1
 8005610:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2240      	movs	r2, #64	; 0x40
 8005618:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800561c:	2340      	movs	r3, #64	; 0x40
 800561e:	2200      	movs	r2, #0
 8005620:	2180      	movs	r1, #128	; 0x80
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f001 fc07 	bl	8006e36 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2240      	movs	r2, #64	; 0x40
 8005632:	621a      	str	r2, [r3, #32]

  return ret;
 8005634:	7bfb      	ldrb	r3, [r7, #15]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800563e:	b480      	push	{r7}
 8005640:	b083      	sub	sp, #12
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	460b      	mov	r3, r1
 8005648:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	78fa      	ldrb	r2, [r7, #3]
 800564e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005650:	2300      	movs	r3, #0
}
 8005652:	4618      	mov	r0, r3
 8005654:	370c      	adds	r7, #12
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800565e:	b480      	push	{r7}
 8005660:	b083      	sub	sp, #12
 8005662:	af00      	add	r7, sp, #0
 8005664:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800566c:	b2da      	uxtb	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2204      	movs	r2, #4
 8005678:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800567c:	2300      	movs	r3, #0
}
 800567e:	4618      	mov	r0, r3
 8005680:	370c      	adds	r7, #12
 8005682:	46bd      	mov	sp, r7
 8005684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005688:	4770      	bx	lr

0800568a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800568a:	b480      	push	{r7}
 800568c:	b083      	sub	sp, #12
 800568e:	af00      	add	r7, sp, #0
 8005690:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005698:	b2db      	uxtb	r3, r3
 800569a:	2b04      	cmp	r3, #4
 800569c:	d106      	bne.n	80056ac <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80056ac:	2300      	movs	r3, #0
}
 80056ae:	4618      	mov	r0, r3
 80056b0:	370c      	adds	r7, #12
 80056b2:	46bd      	mov	sp, r7
 80056b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b8:	4770      	bx	lr

080056ba <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80056ba:	b580      	push	{r7, lr}
 80056bc:	b082      	sub	sp, #8
 80056be:	af00      	add	r7, sp, #0
 80056c0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d110      	bne.n	80056f0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d00b      	beq.n	80056f0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056de:	69db      	ldr	r3, [r3, #28]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d005      	beq.n	80056f0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80056ea:	69db      	ldr	r3, [r3, #28]
 80056ec:	6878      	ldr	r0, [r7, #4]
 80056ee:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80056f0:	2300      	movs	r3, #0
}
 80056f2:	4618      	mov	r0, r3
 80056f4:	3708      	adds	r7, #8
 80056f6:	46bd      	mov	sp, r7
 80056f8:	bd80      	pop	{r7, pc}

080056fa <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
 8005702:	460b      	mov	r3, r1
 8005704:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	32ae      	adds	r2, #174	; 0xae
 8005710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d101      	bne.n	800571c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005718:	2303      	movs	r3, #3
 800571a:	e01c      	b.n	8005756 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005722:	b2db      	uxtb	r3, r3
 8005724:	2b03      	cmp	r3, #3
 8005726:	d115      	bne.n	8005754 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	32ae      	adds	r2, #174	; 0xae
 8005732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005736:	6a1b      	ldr	r3, [r3, #32]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d00b      	beq.n	8005754 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	32ae      	adds	r2, #174	; 0xae
 8005746:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	78fa      	ldrb	r2, [r7, #3]
 800574e:	4611      	mov	r1, r2
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005754:	2300      	movs	r3, #0
}
 8005756:	4618      	mov	r0, r3
 8005758:	3708      	adds	r7, #8
 800575a:	46bd      	mov	sp, r7
 800575c:	bd80      	pop	{r7, pc}

0800575e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800575e:	b580      	push	{r7, lr}
 8005760:	b082      	sub	sp, #8
 8005762:	af00      	add	r7, sp, #0
 8005764:	6078      	str	r0, [r7, #4]
 8005766:	460b      	mov	r3, r1
 8005768:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	32ae      	adds	r2, #174	; 0xae
 8005774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d101      	bne.n	8005780 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800577c:	2303      	movs	r3, #3
 800577e:	e01c      	b.n	80057ba <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005786:	b2db      	uxtb	r3, r3
 8005788:	2b03      	cmp	r3, #3
 800578a:	d115      	bne.n	80057b8 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	32ae      	adds	r2, #174	; 0xae
 8005796:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800579a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d00b      	beq.n	80057b8 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	32ae      	adds	r2, #174	; 0xae
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057b0:	78fa      	ldrb	r2, [r7, #3]
 80057b2:	4611      	mov	r1, r2
 80057b4:	6878      	ldr	r0, [r7, #4]
 80057b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80057b8:	2300      	movs	r3, #0
}
 80057ba:	4618      	mov	r0, r3
 80057bc:	3708      	adds	r7, #8
 80057be:	46bd      	mov	sp, r7
 80057c0:	bd80      	pop	{r7, pc}

080057c2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80057c2:	b480      	push	{r7}
 80057c4:	b083      	sub	sp, #12
 80057c6:	af00      	add	r7, sp, #0
 80057c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80057ca:	2300      	movs	r3, #0
}
 80057cc:	4618      	mov	r0, r3
 80057ce:	370c      	adds	r7, #12
 80057d0:	46bd      	mov	sp, r7
 80057d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d6:	4770      	bx	lr

080057d8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80057e0:	2300      	movs	r3, #0
 80057e2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	6852      	ldr	r2, [r2, #4]
 8005802:	b2d2      	uxtb	r2, r2
 8005804:	4611      	mov	r1, r2
 8005806:	6878      	ldr	r0, [r7, #4]
 8005808:	4798      	blx	r3
 800580a:	4603      	mov	r3, r0
 800580c:	2b00      	cmp	r3, #0
 800580e:	d001      	beq.n	8005814 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005810:	2303      	movs	r3, #3
 8005812:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005814:	7bfb      	ldrb	r3, [r7, #15]
}
 8005816:	4618      	mov	r0, r3
 8005818:	3710      	adds	r7, #16
 800581a:	46bd      	mov	sp, r7
 800581c:	bd80      	pop	{r7, pc}

0800581e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800581e:	b480      	push	{r7}
 8005820:	b083      	sub	sp, #12
 8005822:	af00      	add	r7, sp, #0
 8005824:	6078      	str	r0, [r7, #4]
 8005826:	460b      	mov	r3, r1
 8005828:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800582a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005838:	b480      	push	{r7}
 800583a:	b083      	sub	sp, #12
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	460b      	mov	r3, r1
 8005842:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005844:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005846:	4618      	mov	r0, r3
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005852:	b580      	push	{r7, lr}
 8005854:	b086      	sub	sp, #24
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
 800585a:	460b      	mov	r3, r1
 800585c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005866:	2300      	movs	r3, #0
 8005868:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	885b      	ldrh	r3, [r3, #2]
 800586e:	b29a      	uxth	r2, r3
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	781b      	ldrb	r3, [r3, #0]
 8005874:	b29b      	uxth	r3, r3
 8005876:	429a      	cmp	r2, r3
 8005878:	d920      	bls.n	80058bc <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	781b      	ldrb	r3, [r3, #0]
 800587e:	b29b      	uxth	r3, r3
 8005880:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005882:	e013      	b.n	80058ac <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005884:	f107 030a 	add.w	r3, r7, #10
 8005888:	4619      	mov	r1, r3
 800588a:	6978      	ldr	r0, [r7, #20]
 800588c:	f000 f81b 	bl	80058c6 <USBD_GetNextDesc>
 8005890:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005892:	697b      	ldr	r3, [r7, #20]
 8005894:	785b      	ldrb	r3, [r3, #1]
 8005896:	2b05      	cmp	r3, #5
 8005898:	d108      	bne.n	80058ac <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800589e:	693b      	ldr	r3, [r7, #16]
 80058a0:	789b      	ldrb	r3, [r3, #2]
 80058a2:	78fa      	ldrb	r2, [r7, #3]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d008      	beq.n	80058ba <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80058a8:	2300      	movs	r3, #0
 80058aa:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	885b      	ldrh	r3, [r3, #2]
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	897b      	ldrh	r3, [r7, #10]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d8e5      	bhi.n	8005884 <USBD_GetEpDesc+0x32>
 80058b8:	e000      	b.n	80058bc <USBD_GetEpDesc+0x6a>
          break;
 80058ba:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 80058bc:	693b      	ldr	r3, [r7, #16]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3718      	adds	r7, #24
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}

080058c6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b085      	sub	sp, #20
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	6078      	str	r0, [r7, #4]
 80058ce:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80058d4:	683b      	ldr	r3, [r7, #0]
 80058d6:	881a      	ldrh	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	781b      	ldrb	r3, [r3, #0]
 80058dc:	b29b      	uxth	r3, r3
 80058de:	4413      	add	r3, r2
 80058e0:	b29a      	uxth	r2, r3
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	781b      	ldrb	r3, [r3, #0]
 80058ea:	461a      	mov	r2, r3
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	4413      	add	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80058f2:	68fb      	ldr	r3, [r7, #12]
}
 80058f4:	4618      	mov	r0, r3
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr

08005900 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005900:	b480      	push	{r7}
 8005902:	b087      	sub	sp, #28
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	781b      	ldrb	r3, [r3, #0]
 8005910:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	3301      	adds	r3, #1
 8005916:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005918:	697b      	ldr	r3, [r7, #20]
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800591e:	8a3b      	ldrh	r3, [r7, #16]
 8005920:	021b      	lsls	r3, r3, #8
 8005922:	b21a      	sxth	r2, r3
 8005924:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005928:	4313      	orrs	r3, r2
 800592a:	b21b      	sxth	r3, r3
 800592c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800592e:	89fb      	ldrh	r3, [r7, #14]
}
 8005930:	4618      	mov	r0, r3
 8005932:	371c      	adds	r7, #28
 8005934:	46bd      	mov	sp, r7
 8005936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593a:	4770      	bx	lr

0800593c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	b084      	sub	sp, #16
 8005940:	af00      	add	r7, sp, #0
 8005942:	6078      	str	r0, [r7, #4]
 8005944:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005946:	2300      	movs	r3, #0
 8005948:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800594a:	683b      	ldr	r3, [r7, #0]
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005952:	2b40      	cmp	r3, #64	; 0x40
 8005954:	d005      	beq.n	8005962 <USBD_StdDevReq+0x26>
 8005956:	2b40      	cmp	r3, #64	; 0x40
 8005958:	d857      	bhi.n	8005a0a <USBD_StdDevReq+0xce>
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00f      	beq.n	800597e <USBD_StdDevReq+0x42>
 800595e:	2b20      	cmp	r3, #32
 8005960:	d153      	bne.n	8005a0a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	32ae      	adds	r2, #174	; 0xae
 800596c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005970:	689b      	ldr	r3, [r3, #8]
 8005972:	6839      	ldr	r1, [r7, #0]
 8005974:	6878      	ldr	r0, [r7, #4]
 8005976:	4798      	blx	r3
 8005978:	4603      	mov	r3, r0
 800597a:	73fb      	strb	r3, [r7, #15]
      break;
 800597c:	e04a      	b.n	8005a14 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	785b      	ldrb	r3, [r3, #1]
 8005982:	2b09      	cmp	r3, #9
 8005984:	d83b      	bhi.n	80059fe <USBD_StdDevReq+0xc2>
 8005986:	a201      	add	r2, pc, #4	; (adr r2, 800598c <USBD_StdDevReq+0x50>)
 8005988:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800598c:	080059e1 	.word	0x080059e1
 8005990:	080059f5 	.word	0x080059f5
 8005994:	080059ff 	.word	0x080059ff
 8005998:	080059eb 	.word	0x080059eb
 800599c:	080059ff 	.word	0x080059ff
 80059a0:	080059bf 	.word	0x080059bf
 80059a4:	080059b5 	.word	0x080059b5
 80059a8:	080059ff 	.word	0x080059ff
 80059ac:	080059d7 	.word	0x080059d7
 80059b0:	080059c9 	.word	0x080059c9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80059b4:	6839      	ldr	r1, [r7, #0]
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f000 fa3c 	bl	8005e34 <USBD_GetDescriptor>
          break;
 80059bc:	e024      	b.n	8005a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80059be:	6839      	ldr	r1, [r7, #0]
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 fba1 	bl	8006108 <USBD_SetAddress>
          break;
 80059c6:	e01f      	b.n	8005a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80059c8:	6839      	ldr	r1, [r7, #0]
 80059ca:	6878      	ldr	r0, [r7, #4]
 80059cc:	f000 fbe0 	bl	8006190 <USBD_SetConfig>
 80059d0:	4603      	mov	r3, r0
 80059d2:	73fb      	strb	r3, [r7, #15]
          break;
 80059d4:	e018      	b.n	8005a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80059d6:	6839      	ldr	r1, [r7, #0]
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 fc83 	bl	80062e4 <USBD_GetConfig>
          break;
 80059de:	e013      	b.n	8005a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80059e0:	6839      	ldr	r1, [r7, #0]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 fcb4 	bl	8006350 <USBD_GetStatus>
          break;
 80059e8:	e00e      	b.n	8005a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80059ea:	6839      	ldr	r1, [r7, #0]
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 fce3 	bl	80063b8 <USBD_SetFeature>
          break;
 80059f2:	e009      	b.n	8005a08 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80059f4:	6839      	ldr	r1, [r7, #0]
 80059f6:	6878      	ldr	r0, [r7, #4]
 80059f8:	f000 fd07 	bl	800640a <USBD_ClrFeature>
          break;
 80059fc:	e004      	b.n	8005a08 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80059fe:	6839      	ldr	r1, [r7, #0]
 8005a00:	6878      	ldr	r0, [r7, #4]
 8005a02:	f000 fd5e 	bl	80064c2 <USBD_CtlError>
          break;
 8005a06:	bf00      	nop
      }
      break;
 8005a08:	e004      	b.n	8005a14 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005a0a:	6839      	ldr	r1, [r7, #0]
 8005a0c:	6878      	ldr	r0, [r7, #4]
 8005a0e:	f000 fd58 	bl	80064c2 <USBD_CtlError>
      break;
 8005a12:	bf00      	nop
  }

  return ret;
 8005a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a16:	4618      	mov	r0, r3
 8005a18:	3710      	adds	r7, #16
 8005a1a:	46bd      	mov	sp, r7
 8005a1c:	bd80      	pop	{r7, pc}
 8005a1e:	bf00      	nop

08005a20 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
 8005a28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005a36:	2b40      	cmp	r3, #64	; 0x40
 8005a38:	d005      	beq.n	8005a46 <USBD_StdItfReq+0x26>
 8005a3a:	2b40      	cmp	r3, #64	; 0x40
 8005a3c:	d852      	bhi.n	8005ae4 <USBD_StdItfReq+0xc4>
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d001      	beq.n	8005a46 <USBD_StdItfReq+0x26>
 8005a42:	2b20      	cmp	r3, #32
 8005a44:	d14e      	bne.n	8005ae4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a4c:	b2db      	uxtb	r3, r3
 8005a4e:	3b01      	subs	r3, #1
 8005a50:	2b02      	cmp	r3, #2
 8005a52:	d840      	bhi.n	8005ad6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	889b      	ldrh	r3, [r3, #4]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	2b01      	cmp	r3, #1
 8005a5c:	d836      	bhi.n	8005acc <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	889b      	ldrh	r3, [r3, #4]
 8005a62:	b2db      	uxtb	r3, r3
 8005a64:	4619      	mov	r1, r3
 8005a66:	6878      	ldr	r0, [r7, #4]
 8005a68:	f7ff fed9 	bl	800581e <USBD_CoreFindIF>
 8005a6c:	4603      	mov	r3, r0
 8005a6e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005a70:	7bbb      	ldrb	r3, [r7, #14]
 8005a72:	2bff      	cmp	r3, #255	; 0xff
 8005a74:	d01d      	beq.n	8005ab2 <USBD_StdItfReq+0x92>
 8005a76:	7bbb      	ldrb	r3, [r7, #14]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d11a      	bne.n	8005ab2 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005a7c:	7bba      	ldrb	r2, [r7, #14]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	32ae      	adds	r2, #174	; 0xae
 8005a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d00f      	beq.n	8005aac <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005a8c:	7bba      	ldrb	r2, [r7, #14]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005a94:	7bba      	ldrb	r2, [r7, #14]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	32ae      	adds	r2, #174	; 0xae
 8005a9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	6839      	ldr	r1, [r7, #0]
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	4798      	blx	r3
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005aaa:	e004      	b.n	8005ab6 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005aac:	2303      	movs	r3, #3
 8005aae:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ab0:	e001      	b.n	8005ab6 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005ab2:	2303      	movs	r3, #3
 8005ab4:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	88db      	ldrh	r3, [r3, #6]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d110      	bne.n	8005ae0 <USBD_StdItfReq+0xc0>
 8005abe:	7bfb      	ldrb	r3, [r7, #15]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10d      	bne.n	8005ae0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005ac4:	6878      	ldr	r0, [r7, #4]
 8005ac6:	f000 fdc7 	bl	8006658 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005aca:	e009      	b.n	8005ae0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005acc:	6839      	ldr	r1, [r7, #0]
 8005ace:	6878      	ldr	r0, [r7, #4]
 8005ad0:	f000 fcf7 	bl	80064c2 <USBD_CtlError>
          break;
 8005ad4:	e004      	b.n	8005ae0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005ad6:	6839      	ldr	r1, [r7, #0]
 8005ad8:	6878      	ldr	r0, [r7, #4]
 8005ada:	f000 fcf2 	bl	80064c2 <USBD_CtlError>
          break;
 8005ade:	e000      	b.n	8005ae2 <USBD_StdItfReq+0xc2>
          break;
 8005ae0:	bf00      	nop
      }
      break;
 8005ae2:	e004      	b.n	8005aee <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005ae4:	6839      	ldr	r1, [r7, #0]
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f000 fceb 	bl	80064c2 <USBD_CtlError>
      break;
 8005aec:	bf00      	nop
  }

  return ret;
 8005aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8005af0:	4618      	mov	r0, r3
 8005af2:	3710      	adds	r7, #16
 8005af4:	46bd      	mov	sp, r7
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b084      	sub	sp, #16
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
 8005b00:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005b02:	2300      	movs	r3, #0
 8005b04:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005b06:	683b      	ldr	r3, [r7, #0]
 8005b08:	889b      	ldrh	r3, [r3, #4]
 8005b0a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b0c:	683b      	ldr	r3, [r7, #0]
 8005b0e:	781b      	ldrb	r3, [r3, #0]
 8005b10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005b14:	2b40      	cmp	r3, #64	; 0x40
 8005b16:	d007      	beq.n	8005b28 <USBD_StdEPReq+0x30>
 8005b18:	2b40      	cmp	r3, #64	; 0x40
 8005b1a:	f200 817f 	bhi.w	8005e1c <USBD_StdEPReq+0x324>
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d02a      	beq.n	8005b78 <USBD_StdEPReq+0x80>
 8005b22:	2b20      	cmp	r3, #32
 8005b24:	f040 817a 	bne.w	8005e1c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005b28:	7bbb      	ldrb	r3, [r7, #14]
 8005b2a:	4619      	mov	r1, r3
 8005b2c:	6878      	ldr	r0, [r7, #4]
 8005b2e:	f7ff fe83 	bl	8005838 <USBD_CoreFindEP>
 8005b32:	4603      	mov	r3, r0
 8005b34:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005b36:	7b7b      	ldrb	r3, [r7, #13]
 8005b38:	2bff      	cmp	r3, #255	; 0xff
 8005b3a:	f000 8174 	beq.w	8005e26 <USBD_StdEPReq+0x32e>
 8005b3e:	7b7b      	ldrb	r3, [r7, #13]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	f040 8170 	bne.w	8005e26 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005b46:	7b7a      	ldrb	r2, [r7, #13]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005b4e:	7b7a      	ldrb	r2, [r7, #13]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	32ae      	adds	r2, #174	; 0xae
 8005b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	f000 8163 	beq.w	8005e26 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005b60:	7b7a      	ldrb	r2, [r7, #13]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	32ae      	adds	r2, #174	; 0xae
 8005b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b6a:	689b      	ldr	r3, [r3, #8]
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
 8005b72:	4603      	mov	r3, r0
 8005b74:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005b76:	e156      	b.n	8005e26 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	785b      	ldrb	r3, [r3, #1]
 8005b7c:	2b03      	cmp	r3, #3
 8005b7e:	d008      	beq.n	8005b92 <USBD_StdEPReq+0x9a>
 8005b80:	2b03      	cmp	r3, #3
 8005b82:	f300 8145 	bgt.w	8005e10 <USBD_StdEPReq+0x318>
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 809b 	beq.w	8005cc2 <USBD_StdEPReq+0x1ca>
 8005b8c:	2b01      	cmp	r3, #1
 8005b8e:	d03c      	beq.n	8005c0a <USBD_StdEPReq+0x112>
 8005b90:	e13e      	b.n	8005e10 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	2b02      	cmp	r3, #2
 8005b9c:	d002      	beq.n	8005ba4 <USBD_StdEPReq+0xac>
 8005b9e:	2b03      	cmp	r3, #3
 8005ba0:	d016      	beq.n	8005bd0 <USBD_StdEPReq+0xd8>
 8005ba2:	e02c      	b.n	8005bfe <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ba4:	7bbb      	ldrb	r3, [r7, #14]
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d00d      	beq.n	8005bc6 <USBD_StdEPReq+0xce>
 8005baa:	7bbb      	ldrb	r3, [r7, #14]
 8005bac:	2b80      	cmp	r3, #128	; 0x80
 8005bae:	d00a      	beq.n	8005bc6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bb0:	7bbb      	ldrb	r3, [r7, #14]
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f001 f983 	bl	8006ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005bba:	2180      	movs	r1, #128	; 0x80
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f001 f97f 	bl	8006ec0 <USBD_LL_StallEP>
 8005bc2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005bc4:	e020      	b.n	8005c08 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 fc7a 	bl	80064c2 <USBD_CtlError>
              break;
 8005bce:	e01b      	b.n	8005c08 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	885b      	ldrh	r3, [r3, #2]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10e      	bne.n	8005bf6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005bd8:	7bbb      	ldrb	r3, [r7, #14]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00b      	beq.n	8005bf6 <USBD_StdEPReq+0xfe>
 8005bde:	7bbb      	ldrb	r3, [r7, #14]
 8005be0:	2b80      	cmp	r3, #128	; 0x80
 8005be2:	d008      	beq.n	8005bf6 <USBD_StdEPReq+0xfe>
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	88db      	ldrh	r3, [r3, #6]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d104      	bne.n	8005bf6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005bec:	7bbb      	ldrb	r3, [r7, #14]
 8005bee:	4619      	mov	r1, r3
 8005bf0:	6878      	ldr	r0, [r7, #4]
 8005bf2:	f001 f965 	bl	8006ec0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fd2e 	bl	8006658 <USBD_CtlSendStatus>

              break;
 8005bfc:	e004      	b.n	8005c08 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005bfe:	6839      	ldr	r1, [r7, #0]
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fc5e 	bl	80064c2 <USBD_CtlError>
              break;
 8005c06:	bf00      	nop
          }
          break;
 8005c08:	e107      	b.n	8005e1a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	2b02      	cmp	r3, #2
 8005c14:	d002      	beq.n	8005c1c <USBD_StdEPReq+0x124>
 8005c16:	2b03      	cmp	r3, #3
 8005c18:	d016      	beq.n	8005c48 <USBD_StdEPReq+0x150>
 8005c1a:	e04b      	b.n	8005cb4 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005c1c:	7bbb      	ldrb	r3, [r7, #14]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d00d      	beq.n	8005c3e <USBD_StdEPReq+0x146>
 8005c22:	7bbb      	ldrb	r3, [r7, #14]
 8005c24:	2b80      	cmp	r3, #128	; 0x80
 8005c26:	d00a      	beq.n	8005c3e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005c28:	7bbb      	ldrb	r3, [r7, #14]
 8005c2a:	4619      	mov	r1, r3
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f001 f947 	bl	8006ec0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005c32:	2180      	movs	r1, #128	; 0x80
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f001 f943 	bl	8006ec0 <USBD_LL_StallEP>
 8005c3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005c3c:	e040      	b.n	8005cc0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005c3e:	6839      	ldr	r1, [r7, #0]
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f000 fc3e 	bl	80064c2 <USBD_CtlError>
              break;
 8005c46:	e03b      	b.n	8005cc0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	885b      	ldrh	r3, [r3, #2]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d136      	bne.n	8005cbe <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005c50:	7bbb      	ldrb	r3, [r7, #14]
 8005c52:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005c56:	2b00      	cmp	r3, #0
 8005c58:	d004      	beq.n	8005c64 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005c5a:	7bbb      	ldrb	r3, [r7, #14]
 8005c5c:	4619      	mov	r1, r3
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f001 f94d 	bl	8006efe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005c64:	6878      	ldr	r0, [r7, #4]
 8005c66:	f000 fcf7 	bl	8006658 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005c6a:	7bbb      	ldrb	r3, [r7, #14]
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f7ff fde2 	bl	8005838 <USBD_CoreFindEP>
 8005c74:	4603      	mov	r3, r0
 8005c76:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005c78:	7b7b      	ldrb	r3, [r7, #13]
 8005c7a:	2bff      	cmp	r3, #255	; 0xff
 8005c7c:	d01f      	beq.n	8005cbe <USBD_StdEPReq+0x1c6>
 8005c7e:	7b7b      	ldrb	r3, [r7, #13]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d11c      	bne.n	8005cbe <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005c84:	7b7a      	ldrb	r2, [r7, #13]
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005c8c:	7b7a      	ldrb	r2, [r7, #13]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	32ae      	adds	r2, #174	; 0xae
 8005c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c96:	689b      	ldr	r3, [r3, #8]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d010      	beq.n	8005cbe <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005c9c:	7b7a      	ldrb	r2, [r7, #13]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	32ae      	adds	r2, #174	; 0xae
 8005ca2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ca6:	689b      	ldr	r3, [r3, #8]
 8005ca8:	6839      	ldr	r1, [r7, #0]
 8005caa:	6878      	ldr	r0, [r7, #4]
 8005cac:	4798      	blx	r3
 8005cae:	4603      	mov	r3, r0
 8005cb0:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005cb2:	e004      	b.n	8005cbe <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 fc03 	bl	80064c2 <USBD_CtlError>
              break;
 8005cbc:	e000      	b.n	8005cc0 <USBD_StdEPReq+0x1c8>
              break;
 8005cbe:	bf00      	nop
          }
          break;
 8005cc0:	e0ab      	b.n	8005e1a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d002      	beq.n	8005cd4 <USBD_StdEPReq+0x1dc>
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d032      	beq.n	8005d38 <USBD_StdEPReq+0x240>
 8005cd2:	e097      	b.n	8005e04 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005cd4:	7bbb      	ldrb	r3, [r7, #14]
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d007      	beq.n	8005cea <USBD_StdEPReq+0x1f2>
 8005cda:	7bbb      	ldrb	r3, [r7, #14]
 8005cdc:	2b80      	cmp	r3, #128	; 0x80
 8005cde:	d004      	beq.n	8005cea <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005ce0:	6839      	ldr	r1, [r7, #0]
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f000 fbed 	bl	80064c2 <USBD_CtlError>
                break;
 8005ce8:	e091      	b.n	8005e0e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005cea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	da0b      	bge.n	8005d0a <USBD_StdEPReq+0x212>
 8005cf2:	7bbb      	ldrb	r3, [r7, #14]
 8005cf4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005cf8:	4613      	mov	r3, r2
 8005cfa:	009b      	lsls	r3, r3, #2
 8005cfc:	4413      	add	r3, r2
 8005cfe:	009b      	lsls	r3, r3, #2
 8005d00:	3310      	adds	r3, #16
 8005d02:	687a      	ldr	r2, [r7, #4]
 8005d04:	4413      	add	r3, r2
 8005d06:	3304      	adds	r3, #4
 8005d08:	e00b      	b.n	8005d22 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005d0a:	7bbb      	ldrb	r3, [r7, #14]
 8005d0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005d1c:	687a      	ldr	r2, [r7, #4]
 8005d1e:	4413      	add	r3, r2
 8005d20:	3304      	adds	r3, #4
 8005d22:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	2200      	movs	r2, #0
 8005d28:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	2202      	movs	r2, #2
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fc37 	bl	80065a4 <USBD_CtlSendData>
              break;
 8005d36:	e06a      	b.n	8005e0e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005d38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	da11      	bge.n	8005d64 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005d40:	7bbb      	ldrb	r3, [r7, #14]
 8005d42:	f003 020f 	and.w	r2, r3, #15
 8005d46:	6879      	ldr	r1, [r7, #4]
 8005d48:	4613      	mov	r3, r2
 8005d4a:	009b      	lsls	r3, r3, #2
 8005d4c:	4413      	add	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	440b      	add	r3, r1
 8005d52:	3324      	adds	r3, #36	; 0x24
 8005d54:	881b      	ldrh	r3, [r3, #0]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d117      	bne.n	8005d8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005d5a:	6839      	ldr	r1, [r7, #0]
 8005d5c:	6878      	ldr	r0, [r7, #4]
 8005d5e:	f000 fbb0 	bl	80064c2 <USBD_CtlError>
                  break;
 8005d62:	e054      	b.n	8005e0e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	f003 020f 	and.w	r2, r3, #15
 8005d6a:	6879      	ldr	r1, [r7, #4]
 8005d6c:	4613      	mov	r3, r2
 8005d6e:	009b      	lsls	r3, r3, #2
 8005d70:	4413      	add	r3, r2
 8005d72:	009b      	lsls	r3, r3, #2
 8005d74:	440b      	add	r3, r1
 8005d76:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005d7a:	881b      	ldrh	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d104      	bne.n	8005d8a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005d80:	6839      	ldr	r1, [r7, #0]
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fb9d 	bl	80064c2 <USBD_CtlError>
                  break;
 8005d88:	e041      	b.n	8005e0e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005d8a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	da0b      	bge.n	8005daa <USBD_StdEPReq+0x2b2>
 8005d92:	7bbb      	ldrb	r3, [r7, #14]
 8005d94:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005d98:	4613      	mov	r3, r2
 8005d9a:	009b      	lsls	r3, r3, #2
 8005d9c:	4413      	add	r3, r2
 8005d9e:	009b      	lsls	r3, r3, #2
 8005da0:	3310      	adds	r3, #16
 8005da2:	687a      	ldr	r2, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	3304      	adds	r3, #4
 8005da8:	e00b      	b.n	8005dc2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005daa:	7bbb      	ldrb	r3, [r7, #14]
 8005dac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005dbc:	687a      	ldr	r2, [r7, #4]
 8005dbe:	4413      	add	r3, r2
 8005dc0:	3304      	adds	r3, #4
 8005dc2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005dc4:	7bbb      	ldrb	r3, [r7, #14]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d002      	beq.n	8005dd0 <USBD_StdEPReq+0x2d8>
 8005dca:	7bbb      	ldrb	r3, [r7, #14]
 8005dcc:	2b80      	cmp	r3, #128	; 0x80
 8005dce:	d103      	bne.n	8005dd8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	601a      	str	r2, [r3, #0]
 8005dd6:	e00e      	b.n	8005df6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005dd8:	7bbb      	ldrb	r3, [r7, #14]
 8005dda:	4619      	mov	r1, r3
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f001 f8ad 	bl	8006f3c <USBD_LL_IsStallEP>
 8005de2:	4603      	mov	r3, r0
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d003      	beq.n	8005df0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005de8:	68bb      	ldr	r3, [r7, #8]
 8005dea:	2201      	movs	r2, #1
 8005dec:	601a      	str	r2, [r3, #0]
 8005dee:	e002      	b.n	8005df6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005df0:	68bb      	ldr	r3, [r7, #8]
 8005df2:	2200      	movs	r2, #0
 8005df4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f000 fbd1 	bl	80065a4 <USBD_CtlSendData>
              break;
 8005e02:	e004      	b.n	8005e0e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005e04:	6839      	ldr	r1, [r7, #0]
 8005e06:	6878      	ldr	r0, [r7, #4]
 8005e08:	f000 fb5b 	bl	80064c2 <USBD_CtlError>
              break;
 8005e0c:	bf00      	nop
          }
          break;
 8005e0e:	e004      	b.n	8005e1a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005e10:	6839      	ldr	r1, [r7, #0]
 8005e12:	6878      	ldr	r0, [r7, #4]
 8005e14:	f000 fb55 	bl	80064c2 <USBD_CtlError>
          break;
 8005e18:	bf00      	nop
      }
      break;
 8005e1a:	e005      	b.n	8005e28 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005e1c:	6839      	ldr	r1, [r7, #0]
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f000 fb4f 	bl	80064c2 <USBD_CtlError>
      break;
 8005e24:	e000      	b.n	8005e28 <USBD_StdEPReq+0x330>
      break;
 8005e26:	bf00      	nop
  }

  return ret;
 8005e28:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b084      	sub	sp, #16
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
 8005e3c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005e3e:	2300      	movs	r3, #0
 8005e40:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005e46:	2300      	movs	r3, #0
 8005e48:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005e4a:	683b      	ldr	r3, [r7, #0]
 8005e4c:	885b      	ldrh	r3, [r3, #2]
 8005e4e:	0a1b      	lsrs	r3, r3, #8
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	2b06      	cmp	r3, #6
 8005e56:	f200 8128 	bhi.w	80060aa <USBD_GetDescriptor+0x276>
 8005e5a:	a201      	add	r2, pc, #4	; (adr r2, 8005e60 <USBD_GetDescriptor+0x2c>)
 8005e5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e60:	08005e7d 	.word	0x08005e7d
 8005e64:	08005e95 	.word	0x08005e95
 8005e68:	08005ed5 	.word	0x08005ed5
 8005e6c:	080060ab 	.word	0x080060ab
 8005e70:	080060ab 	.word	0x080060ab
 8005e74:	0800604b 	.word	0x0800604b
 8005e78:	08006077 	.word	0x08006077
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	687a      	ldr	r2, [r7, #4]
 8005e86:	7c12      	ldrb	r2, [r2, #16]
 8005e88:	f107 0108 	add.w	r1, r7, #8
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	4798      	blx	r3
 8005e90:	60f8      	str	r0, [r7, #12]
      break;
 8005e92:	e112      	b.n	80060ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	7c1b      	ldrb	r3, [r3, #16]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d10d      	bne.n	8005eb8 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ea4:	f107 0208 	add.w	r2, r7, #8
 8005ea8:	4610      	mov	r0, r2
 8005eaa:	4798      	blx	r3
 8005eac:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	3301      	adds	r3, #1
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8005eb6:	e100      	b.n	80060ba <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ec0:	f107 0208 	add.w	r2, r7, #8
 8005ec4:	4610      	mov	r0, r2
 8005ec6:	4798      	blx	r3
 8005ec8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	2202      	movs	r2, #2
 8005ed0:	701a      	strb	r2, [r3, #0]
      break;
 8005ed2:	e0f2      	b.n	80060ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8005ed4:	683b      	ldr	r3, [r7, #0]
 8005ed6:	885b      	ldrh	r3, [r3, #2]
 8005ed8:	b2db      	uxtb	r3, r3
 8005eda:	2b05      	cmp	r3, #5
 8005edc:	f200 80ac 	bhi.w	8006038 <USBD_GetDescriptor+0x204>
 8005ee0:	a201      	add	r2, pc, #4	; (adr r2, 8005ee8 <USBD_GetDescriptor+0xb4>)
 8005ee2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ee6:	bf00      	nop
 8005ee8:	08005f01 	.word	0x08005f01
 8005eec:	08005f35 	.word	0x08005f35
 8005ef0:	08005f69 	.word	0x08005f69
 8005ef4:	08005f9d 	.word	0x08005f9d
 8005ef8:	08005fd1 	.word	0x08005fd1
 8005efc:	08006005 	.word	0x08006005
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f06:	685b      	ldr	r3, [r3, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00b      	beq.n	8005f24 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f12:	685b      	ldr	r3, [r3, #4]
 8005f14:	687a      	ldr	r2, [r7, #4]
 8005f16:	7c12      	ldrb	r2, [r2, #16]
 8005f18:	f107 0108 	add.w	r1, r7, #8
 8005f1c:	4610      	mov	r0, r2
 8005f1e:	4798      	blx	r3
 8005f20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f22:	e091      	b.n	8006048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f24:	6839      	ldr	r1, [r7, #0]
 8005f26:	6878      	ldr	r0, [r7, #4]
 8005f28:	f000 facb 	bl	80064c2 <USBD_CtlError>
            err++;
 8005f2c:	7afb      	ldrb	r3, [r7, #11]
 8005f2e:	3301      	adds	r3, #1
 8005f30:	72fb      	strb	r3, [r7, #11]
          break;
 8005f32:	e089      	b.n	8006048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d00b      	beq.n	8005f58 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	687a      	ldr	r2, [r7, #4]
 8005f4a:	7c12      	ldrb	r2, [r2, #16]
 8005f4c:	f107 0108 	add.w	r1, r7, #8
 8005f50:	4610      	mov	r0, r2
 8005f52:	4798      	blx	r3
 8005f54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f56:	e077      	b.n	8006048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f58:	6839      	ldr	r1, [r7, #0]
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 fab1 	bl	80064c2 <USBD_CtlError>
            err++;
 8005f60:	7afb      	ldrb	r3, [r7, #11]
 8005f62:	3301      	adds	r3, #1
 8005f64:	72fb      	strb	r3, [r7, #11]
          break;
 8005f66:	e06f      	b.n	8006048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d00b      	beq.n	8005f8c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	687a      	ldr	r2, [r7, #4]
 8005f7e:	7c12      	ldrb	r2, [r2, #16]
 8005f80:	f107 0108 	add.w	r1, r7, #8
 8005f84:	4610      	mov	r0, r2
 8005f86:	4798      	blx	r3
 8005f88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005f8a:	e05d      	b.n	8006048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005f8c:	6839      	ldr	r1, [r7, #0]
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fa97 	bl	80064c2 <USBD_CtlError>
            err++;
 8005f94:	7afb      	ldrb	r3, [r7, #11]
 8005f96:	3301      	adds	r3, #1
 8005f98:	72fb      	strb	r3, [r7, #11]
          break;
 8005f9a:	e055      	b.n	8006048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fa2:	691b      	ldr	r3, [r3, #16]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fae:	691b      	ldr	r3, [r3, #16]
 8005fb0:	687a      	ldr	r2, [r7, #4]
 8005fb2:	7c12      	ldrb	r2, [r2, #16]
 8005fb4:	f107 0108 	add.w	r1, r7, #8
 8005fb8:	4610      	mov	r0, r2
 8005fba:	4798      	blx	r3
 8005fbc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005fbe:	e043      	b.n	8006048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005fc0:	6839      	ldr	r1, [r7, #0]
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa7d 	bl	80064c2 <USBD_CtlError>
            err++;
 8005fc8:	7afb      	ldrb	r3, [r7, #11]
 8005fca:	3301      	adds	r3, #1
 8005fcc:	72fb      	strb	r3, [r7, #11]
          break;
 8005fce:	e03b      	b.n	8006048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00b      	beq.n	8005ff4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	687a      	ldr	r2, [r7, #4]
 8005fe6:	7c12      	ldrb	r2, [r2, #16]
 8005fe8:	f107 0108 	add.w	r1, r7, #8
 8005fec:	4610      	mov	r0, r2
 8005fee:	4798      	blx	r3
 8005ff0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8005ff2:	e029      	b.n	8006048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8005ff4:	6839      	ldr	r1, [r7, #0]
 8005ff6:	6878      	ldr	r0, [r7, #4]
 8005ff8:	f000 fa63 	bl	80064c2 <USBD_CtlError>
            err++;
 8005ffc:	7afb      	ldrb	r3, [r7, #11]
 8005ffe:	3301      	adds	r3, #1
 8006000:	72fb      	strb	r3, [r7, #11]
          break;
 8006002:	e021      	b.n	8006048 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800600a:	699b      	ldr	r3, [r3, #24]
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00b      	beq.n	8006028 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006016:	699b      	ldr	r3, [r3, #24]
 8006018:	687a      	ldr	r2, [r7, #4]
 800601a:	7c12      	ldrb	r2, [r2, #16]
 800601c:	f107 0108 	add.w	r1, r7, #8
 8006020:	4610      	mov	r0, r2
 8006022:	4798      	blx	r3
 8006024:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006026:	e00f      	b.n	8006048 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006028:	6839      	ldr	r1, [r7, #0]
 800602a:	6878      	ldr	r0, [r7, #4]
 800602c:	f000 fa49 	bl	80064c2 <USBD_CtlError>
            err++;
 8006030:	7afb      	ldrb	r3, [r7, #11]
 8006032:	3301      	adds	r3, #1
 8006034:	72fb      	strb	r3, [r7, #11]
          break;
 8006036:	e007      	b.n	8006048 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006038:	6839      	ldr	r1, [r7, #0]
 800603a:	6878      	ldr	r0, [r7, #4]
 800603c:	f000 fa41 	bl	80064c2 <USBD_CtlError>
          err++;
 8006040:	7afb      	ldrb	r3, [r7, #11]
 8006042:	3301      	adds	r3, #1
 8006044:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006046:	bf00      	nop
      }
      break;
 8006048:	e037      	b.n	80060ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	7c1b      	ldrb	r3, [r3, #16]
 800604e:	2b00      	cmp	r3, #0
 8006050:	d109      	bne.n	8006066 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006058:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800605a:	f107 0208 	add.w	r2, r7, #8
 800605e:	4610      	mov	r0, r2
 8006060:	4798      	blx	r3
 8006062:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006064:	e029      	b.n	80060ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006066:	6839      	ldr	r1, [r7, #0]
 8006068:	6878      	ldr	r0, [r7, #4]
 800606a:	f000 fa2a 	bl	80064c2 <USBD_CtlError>
        err++;
 800606e:	7afb      	ldrb	r3, [r7, #11]
 8006070:	3301      	adds	r3, #1
 8006072:	72fb      	strb	r3, [r7, #11]
      break;
 8006074:	e021      	b.n	80060ba <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	7c1b      	ldrb	r3, [r3, #16]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10d      	bne.n	800609a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006086:	f107 0208 	add.w	r2, r7, #8
 800608a:	4610      	mov	r0, r2
 800608c:	4798      	blx	r3
 800608e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	2207      	movs	r2, #7
 8006096:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006098:	e00f      	b.n	80060ba <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fa10 	bl	80064c2 <USBD_CtlError>
        err++;
 80060a2:	7afb      	ldrb	r3, [r7, #11]
 80060a4:	3301      	adds	r3, #1
 80060a6:	72fb      	strb	r3, [r7, #11]
      break;
 80060a8:	e007      	b.n	80060ba <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 fa08 	bl	80064c2 <USBD_CtlError>
      err++;
 80060b2:	7afb      	ldrb	r3, [r7, #11]
 80060b4:	3301      	adds	r3, #1
 80060b6:	72fb      	strb	r3, [r7, #11]
      break;
 80060b8:	bf00      	nop
  }

  if (err != 0U)
 80060ba:	7afb      	ldrb	r3, [r7, #11]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d11e      	bne.n	80060fe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	88db      	ldrh	r3, [r3, #6]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d016      	beq.n	80060f6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80060c8:	893b      	ldrh	r3, [r7, #8]
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d00e      	beq.n	80060ec <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	88da      	ldrh	r2, [r3, #6]
 80060d2:	893b      	ldrh	r3, [r7, #8]
 80060d4:	4293      	cmp	r3, r2
 80060d6:	bf28      	it	cs
 80060d8:	4613      	movcs	r3, r2
 80060da:	b29b      	uxth	r3, r3
 80060dc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80060de:	893b      	ldrh	r3, [r7, #8]
 80060e0:	461a      	mov	r2, r3
 80060e2:	68f9      	ldr	r1, [r7, #12]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f000 fa5d 	bl	80065a4 <USBD_CtlSendData>
 80060ea:	e009      	b.n	8006100 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80060ec:	6839      	ldr	r1, [r7, #0]
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f000 f9e7 	bl	80064c2 <USBD_CtlError>
 80060f4:	e004      	b.n	8006100 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f000 faae 	bl	8006658 <USBD_CtlSendStatus>
 80060fc:	e000      	b.n	8006100 <USBD_GetDescriptor+0x2cc>
    return;
 80060fe:	bf00      	nop
  }
}
 8006100:	3710      	adds	r7, #16
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop

08006108 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006108:	b580      	push	{r7, lr}
 800610a:	b084      	sub	sp, #16
 800610c:	af00      	add	r7, sp, #0
 800610e:	6078      	str	r0, [r7, #4]
 8006110:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	889b      	ldrh	r3, [r3, #4]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d131      	bne.n	800617e <USBD_SetAddress+0x76>
 800611a:	683b      	ldr	r3, [r7, #0]
 800611c:	88db      	ldrh	r3, [r3, #6]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d12d      	bne.n	800617e <USBD_SetAddress+0x76>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	885b      	ldrh	r3, [r3, #2]
 8006126:	2b7f      	cmp	r3, #127	; 0x7f
 8006128:	d829      	bhi.n	800617e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	885b      	ldrh	r3, [r3, #2]
 800612e:	b2db      	uxtb	r3, r3
 8006130:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006134:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800613c:	b2db      	uxtb	r3, r3
 800613e:	2b03      	cmp	r3, #3
 8006140:	d104      	bne.n	800614c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f000 f9bc 	bl	80064c2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800614a:	e01d      	b.n	8006188 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	7bfa      	ldrb	r2, [r7, #15]
 8006150:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006154:	7bfb      	ldrb	r3, [r7, #15]
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f000 ff1b 	bl	8006f94 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f000 fa7a 	bl	8006658 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006164:	7bfb      	ldrb	r3, [r7, #15]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d004      	beq.n	8006174 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2202      	movs	r2, #2
 800616e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006172:	e009      	b.n	8006188 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2201      	movs	r2, #1
 8006178:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800617c:	e004      	b.n	8006188 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800617e:	6839      	ldr	r1, [r7, #0]
 8006180:	6878      	ldr	r0, [r7, #4]
 8006182:	f000 f99e 	bl	80064c2 <USBD_CtlError>
  }
}
 8006186:	bf00      	nop
 8006188:	bf00      	nop
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006190:	b580      	push	{r7, lr}
 8006192:	b084      	sub	sp, #16
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
 8006198:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800619a:	2300      	movs	r3, #0
 800619c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	885b      	ldrh	r3, [r3, #2]
 80061a2:	b2da      	uxtb	r2, r3
 80061a4:	4b4e      	ldr	r3, [pc, #312]	; (80062e0 <USBD_SetConfig+0x150>)
 80061a6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80061a8:	4b4d      	ldr	r3, [pc, #308]	; (80062e0 <USBD_SetConfig+0x150>)
 80061aa:	781b      	ldrb	r3, [r3, #0]
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d905      	bls.n	80061bc <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 f985 	bl	80064c2 <USBD_CtlError>
    return USBD_FAIL;
 80061b8:	2303      	movs	r3, #3
 80061ba:	e08c      	b.n	80062d6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061c2:	b2db      	uxtb	r3, r3
 80061c4:	2b02      	cmp	r3, #2
 80061c6:	d002      	beq.n	80061ce <USBD_SetConfig+0x3e>
 80061c8:	2b03      	cmp	r3, #3
 80061ca:	d029      	beq.n	8006220 <USBD_SetConfig+0x90>
 80061cc:	e075      	b.n	80062ba <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80061ce:	4b44      	ldr	r3, [pc, #272]	; (80062e0 <USBD_SetConfig+0x150>)
 80061d0:	781b      	ldrb	r3, [r3, #0]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d020      	beq.n	8006218 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80061d6:	4b42      	ldr	r3, [pc, #264]	; (80062e0 <USBD_SetConfig+0x150>)
 80061d8:	781b      	ldrb	r3, [r3, #0]
 80061da:	461a      	mov	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80061e0:	4b3f      	ldr	r3, [pc, #252]	; (80062e0 <USBD_SetConfig+0x150>)
 80061e2:	781b      	ldrb	r3, [r3, #0]
 80061e4:	4619      	mov	r1, r3
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	f7fe ffe7 	bl	80051ba <USBD_SetClassConfig>
 80061ec:	4603      	mov	r3, r0
 80061ee:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80061f0:	7bfb      	ldrb	r3, [r7, #15]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d008      	beq.n	8006208 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80061f6:	6839      	ldr	r1, [r7, #0]
 80061f8:	6878      	ldr	r0, [r7, #4]
 80061fa:	f000 f962 	bl	80064c2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2202      	movs	r2, #2
 8006202:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006206:	e065      	b.n	80062d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f000 fa25 	bl	8006658 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2203      	movs	r2, #3
 8006212:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006216:	e05d      	b.n	80062d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006218:	6878      	ldr	r0, [r7, #4]
 800621a:	f000 fa1d 	bl	8006658 <USBD_CtlSendStatus>
      break;
 800621e:	e059      	b.n	80062d4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006220:	4b2f      	ldr	r3, [pc, #188]	; (80062e0 <USBD_SetConfig+0x150>)
 8006222:	781b      	ldrb	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d112      	bne.n	800624e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	2202      	movs	r2, #2
 800622c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006230:	4b2b      	ldr	r3, [pc, #172]	; (80062e0 <USBD_SetConfig+0x150>)
 8006232:	781b      	ldrb	r3, [r3, #0]
 8006234:	461a      	mov	r2, r3
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800623a:	4b29      	ldr	r3, [pc, #164]	; (80062e0 <USBD_SetConfig+0x150>)
 800623c:	781b      	ldrb	r3, [r3, #0]
 800623e:	4619      	mov	r1, r3
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f7fe ffd6 	bl	80051f2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 fa06 	bl	8006658 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800624c:	e042      	b.n	80062d4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800624e:	4b24      	ldr	r3, [pc, #144]	; (80062e0 <USBD_SetConfig+0x150>)
 8006250:	781b      	ldrb	r3, [r3, #0]
 8006252:	461a      	mov	r2, r3
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	429a      	cmp	r2, r3
 800625a:	d02a      	beq.n	80062b2 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	b2db      	uxtb	r3, r3
 8006262:	4619      	mov	r1, r3
 8006264:	6878      	ldr	r0, [r7, #4]
 8006266:	f7fe ffc4 	bl	80051f2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <USBD_SetConfig+0x150>)
 800626c:	781b      	ldrb	r3, [r3, #0]
 800626e:	461a      	mov	r2, r3
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006274:	4b1a      	ldr	r3, [pc, #104]	; (80062e0 <USBD_SetConfig+0x150>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	4619      	mov	r1, r3
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fe ff9d 	bl	80051ba <USBD_SetClassConfig>
 8006280:	4603      	mov	r3, r0
 8006282:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006284:	7bfb      	ldrb	r3, [r7, #15]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d00f      	beq.n	80062aa <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800628a:	6839      	ldr	r1, [r7, #0]
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f000 f918 	bl	80064c2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	685b      	ldr	r3, [r3, #4]
 8006296:	b2db      	uxtb	r3, r3
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f7fe ffa9 	bl	80051f2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	2202      	movs	r2, #2
 80062a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80062a8:	e014      	b.n	80062d4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 f9d4 	bl	8006658 <USBD_CtlSendStatus>
      break;
 80062b0:	e010      	b.n	80062d4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80062b2:	6878      	ldr	r0, [r7, #4]
 80062b4:	f000 f9d0 	bl	8006658 <USBD_CtlSendStatus>
      break;
 80062b8:	e00c      	b.n	80062d4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f900 	bl	80064c2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80062c2:	4b07      	ldr	r3, [pc, #28]	; (80062e0 <USBD_SetConfig+0x150>)
 80062c4:	781b      	ldrb	r3, [r3, #0]
 80062c6:	4619      	mov	r1, r3
 80062c8:	6878      	ldr	r0, [r7, #4]
 80062ca:	f7fe ff92 	bl	80051f2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80062ce:	2303      	movs	r3, #3
 80062d0:	73fb      	strb	r3, [r7, #15]
      break;
 80062d2:	bf00      	nop
  }

  return ret;
 80062d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3710      	adds	r7, #16
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	200001f0 	.word	0x200001f0

080062e4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b082      	sub	sp, #8
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80062ee:	683b      	ldr	r3, [r7, #0]
 80062f0:	88db      	ldrh	r3, [r3, #6]
 80062f2:	2b01      	cmp	r3, #1
 80062f4:	d004      	beq.n	8006300 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f8e2 	bl	80064c2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80062fe:	e023      	b.n	8006348 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006306:	b2db      	uxtb	r3, r3
 8006308:	2b02      	cmp	r3, #2
 800630a:	dc02      	bgt.n	8006312 <USBD_GetConfig+0x2e>
 800630c:	2b00      	cmp	r3, #0
 800630e:	dc03      	bgt.n	8006318 <USBD_GetConfig+0x34>
 8006310:	e015      	b.n	800633e <USBD_GetConfig+0x5a>
 8006312:	2b03      	cmp	r3, #3
 8006314:	d00b      	beq.n	800632e <USBD_GetConfig+0x4a>
 8006316:	e012      	b.n	800633e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	3308      	adds	r3, #8
 8006322:	2201      	movs	r2, #1
 8006324:	4619      	mov	r1, r3
 8006326:	6878      	ldr	r0, [r7, #4]
 8006328:	f000 f93c 	bl	80065a4 <USBD_CtlSendData>
        break;
 800632c:	e00c      	b.n	8006348 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	3304      	adds	r3, #4
 8006332:	2201      	movs	r2, #1
 8006334:	4619      	mov	r1, r3
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f934 	bl	80065a4 <USBD_CtlSendData>
        break;
 800633c:	e004      	b.n	8006348 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800633e:	6839      	ldr	r1, [r7, #0]
 8006340:	6878      	ldr	r0, [r7, #4]
 8006342:	f000 f8be 	bl	80064c2 <USBD_CtlError>
        break;
 8006346:	bf00      	nop
}
 8006348:	bf00      	nop
 800634a:	3708      	adds	r7, #8
 800634c:	46bd      	mov	sp, r7
 800634e:	bd80      	pop	{r7, pc}

08006350 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
 8006358:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006360:	b2db      	uxtb	r3, r3
 8006362:	3b01      	subs	r3, #1
 8006364:	2b02      	cmp	r3, #2
 8006366:	d81e      	bhi.n	80063a6 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	88db      	ldrh	r3, [r3, #6]
 800636c:	2b02      	cmp	r3, #2
 800636e:	d004      	beq.n	800637a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f8a5 	bl	80064c2 <USBD_CtlError>
        break;
 8006378:	e01a      	b.n	80063b0 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2201      	movs	r2, #1
 800637e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006386:	2b00      	cmp	r3, #0
 8006388:	d005      	beq.n	8006396 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	68db      	ldr	r3, [r3, #12]
 800638e:	f043 0202 	orr.w	r2, r3, #2
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	330c      	adds	r3, #12
 800639a:	2202      	movs	r2, #2
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f900 	bl	80065a4 <USBD_CtlSendData>
      break;
 80063a4:	e004      	b.n	80063b0 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80063a6:	6839      	ldr	r1, [r7, #0]
 80063a8:	6878      	ldr	r0, [r7, #4]
 80063aa:	f000 f88a 	bl	80064c2 <USBD_CtlError>
      break;
 80063ae:	bf00      	nop
  }
}
 80063b0:	bf00      	nop
 80063b2:	3708      	adds	r7, #8
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	885b      	ldrh	r3, [r3, #2]
 80063c6:	2b01      	cmp	r3, #1
 80063c8:	d107      	bne.n	80063da <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f940 	bl	8006658 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80063d8:	e013      	b.n	8006402 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	885b      	ldrh	r3, [r3, #2]
 80063de:	2b02      	cmp	r3, #2
 80063e0:	d10b      	bne.n	80063fa <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80063e2:	683b      	ldr	r3, [r7, #0]
 80063e4:	889b      	ldrh	r3, [r3, #4]
 80063e6:	0a1b      	lsrs	r3, r3, #8
 80063e8:	b29b      	uxth	r3, r3
 80063ea:	b2da      	uxtb	r2, r3
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f000 f930 	bl	8006658 <USBD_CtlSendStatus>
}
 80063f8:	e003      	b.n	8006402 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80063fa:	6839      	ldr	r1, [r7, #0]
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f000 f860 	bl	80064c2 <USBD_CtlError>
}
 8006402:	bf00      	nop
 8006404:	3708      	adds	r7, #8
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b082      	sub	sp, #8
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
 8006412:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800641a:	b2db      	uxtb	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	2b02      	cmp	r3, #2
 8006420:	d80b      	bhi.n	800643a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006422:	683b      	ldr	r3, [r7, #0]
 8006424:	885b      	ldrh	r3, [r3, #2]
 8006426:	2b01      	cmp	r3, #1
 8006428:	d10c      	bne.n	8006444 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	2200      	movs	r2, #0
 800642e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006432:	6878      	ldr	r0, [r7, #4]
 8006434:	f000 f910 	bl	8006658 <USBD_CtlSendStatus>
      }
      break;
 8006438:	e004      	b.n	8006444 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800643a:	6839      	ldr	r1, [r7, #0]
 800643c:	6878      	ldr	r0, [r7, #4]
 800643e:	f000 f840 	bl	80064c2 <USBD_CtlError>
      break;
 8006442:	e000      	b.n	8006446 <USBD_ClrFeature+0x3c>
      break;
 8006444:	bf00      	nop
  }
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}

0800644e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800644e:	b580      	push	{r7, lr}
 8006450:	b084      	sub	sp, #16
 8006452:	af00      	add	r7, sp, #0
 8006454:	6078      	str	r0, [r7, #4]
 8006456:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	781a      	ldrb	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	3301      	adds	r3, #1
 8006468:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	781a      	ldrb	r2, [r3, #0]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	3301      	adds	r3, #1
 8006476:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006478:	68f8      	ldr	r0, [r7, #12]
 800647a:	f7ff fa41 	bl	8005900 <SWAPBYTE>
 800647e:	4603      	mov	r3, r0
 8006480:	461a      	mov	r2, r3
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3301      	adds	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	f7ff fa34 	bl	8005900 <SWAPBYTE>
 8006498:	4603      	mov	r3, r0
 800649a:	461a      	mov	r2, r3
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	3301      	adds	r3, #1
 80064a4:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	3301      	adds	r3, #1
 80064aa:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80064ac:	68f8      	ldr	r0, [r7, #12]
 80064ae:	f7ff fa27 	bl	8005900 <SWAPBYTE>
 80064b2:	4603      	mov	r3, r0
 80064b4:	461a      	mov	r2, r3
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	80da      	strh	r2, [r3, #6]
}
 80064ba:	bf00      	nop
 80064bc:	3710      	adds	r7, #16
 80064be:	46bd      	mov	sp, r7
 80064c0:	bd80      	pop	{r7, pc}

080064c2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c2:	b580      	push	{r7, lr}
 80064c4:	b082      	sub	sp, #8
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
 80064ca:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80064cc:	2180      	movs	r1, #128	; 0x80
 80064ce:	6878      	ldr	r0, [r7, #4]
 80064d0:	f000 fcf6 	bl	8006ec0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80064d4:	2100      	movs	r1, #0
 80064d6:	6878      	ldr	r0, [r7, #4]
 80064d8:	f000 fcf2 	bl	8006ec0 <USBD_LL_StallEP>
}
 80064dc:	bf00      	nop
 80064de:	3708      	adds	r7, #8
 80064e0:	46bd      	mov	sp, r7
 80064e2:	bd80      	pop	{r7, pc}

080064e4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b086      	sub	sp, #24
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	60f8      	str	r0, [r7, #12]
 80064ec:	60b9      	str	r1, [r7, #8]
 80064ee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80064f0:	2300      	movs	r3, #0
 80064f2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d036      	beq.n	8006568 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80064fe:	6938      	ldr	r0, [r7, #16]
 8006500:	f000 f836 	bl	8006570 <USBD_GetLen>
 8006504:	4603      	mov	r3, r0
 8006506:	3301      	adds	r3, #1
 8006508:	b29b      	uxth	r3, r3
 800650a:	005b      	lsls	r3, r3, #1
 800650c:	b29a      	uxth	r2, r3
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006512:	7dfb      	ldrb	r3, [r7, #23]
 8006514:	68ba      	ldr	r2, [r7, #8]
 8006516:	4413      	add	r3, r2
 8006518:	687a      	ldr	r2, [r7, #4]
 800651a:	7812      	ldrb	r2, [r2, #0]
 800651c:	701a      	strb	r2, [r3, #0]
  idx++;
 800651e:	7dfb      	ldrb	r3, [r7, #23]
 8006520:	3301      	adds	r3, #1
 8006522:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006524:	7dfb      	ldrb	r3, [r7, #23]
 8006526:	68ba      	ldr	r2, [r7, #8]
 8006528:	4413      	add	r3, r2
 800652a:	2203      	movs	r2, #3
 800652c:	701a      	strb	r2, [r3, #0]
  idx++;
 800652e:	7dfb      	ldrb	r3, [r7, #23]
 8006530:	3301      	adds	r3, #1
 8006532:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006534:	e013      	b.n	800655e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	68ba      	ldr	r2, [r7, #8]
 800653a:	4413      	add	r3, r2
 800653c:	693a      	ldr	r2, [r7, #16]
 800653e:	7812      	ldrb	r2, [r2, #0]
 8006540:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	3301      	adds	r3, #1
 8006546:	613b      	str	r3, [r7, #16]
    idx++;
 8006548:	7dfb      	ldrb	r3, [r7, #23]
 800654a:	3301      	adds	r3, #1
 800654c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
 8006550:	68ba      	ldr	r2, [r7, #8]
 8006552:	4413      	add	r3, r2
 8006554:	2200      	movs	r2, #0
 8006556:	701a      	strb	r2, [r3, #0]
    idx++;
 8006558:	7dfb      	ldrb	r3, [r7, #23]
 800655a:	3301      	adds	r3, #1
 800655c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	781b      	ldrb	r3, [r3, #0]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d1e7      	bne.n	8006536 <USBD_GetString+0x52>
 8006566:	e000      	b.n	800656a <USBD_GetString+0x86>
    return;
 8006568:	bf00      	nop
  }
}
 800656a:	3718      	adds	r7, #24
 800656c:	46bd      	mov	sp, r7
 800656e:	bd80      	pop	{r7, pc}

08006570 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006578:	2300      	movs	r3, #0
 800657a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006580:	e005      	b.n	800658e <USBD_GetLen+0x1e>
  {
    len++;
 8006582:	7bfb      	ldrb	r3, [r7, #15]
 8006584:	3301      	adds	r3, #1
 8006586:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006588:	68bb      	ldr	r3, [r7, #8]
 800658a:	3301      	adds	r3, #1
 800658c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800658e:	68bb      	ldr	r3, [r7, #8]
 8006590:	781b      	ldrb	r3, [r3, #0]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d1f5      	bne.n	8006582 <USBD_GetLen+0x12>
  }

  return len;
 8006596:	7bfb      	ldrb	r3, [r7, #15]
}
 8006598:	4618      	mov	r0, r3
 800659a:	3714      	adds	r7, #20
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80065a4:	b580      	push	{r7, lr}
 80065a6:	b084      	sub	sp, #16
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	60f8      	str	r0, [r7, #12]
 80065ac:	60b9      	str	r1, [r7, #8]
 80065ae:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	2202      	movs	r2, #2
 80065b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	687a      	ldr	r2, [r7, #4]
 80065bc:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	687a      	ldr	r2, [r7, #4]
 80065c2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	68ba      	ldr	r2, [r7, #8]
 80065c8:	2100      	movs	r1, #0
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f000 fd01 	bl	8006fd2 <USBD_LL_Transmit>

  return USBD_OK;
 80065d0:	2300      	movs	r3, #0
}
 80065d2:	4618      	mov	r0, r3
 80065d4:	3710      	adds	r7, #16
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}

080065da <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80065da:	b580      	push	{r7, lr}
 80065dc:	b084      	sub	sp, #16
 80065de:	af00      	add	r7, sp, #0
 80065e0:	60f8      	str	r0, [r7, #12]
 80065e2:	60b9      	str	r1, [r7, #8]
 80065e4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	68ba      	ldr	r2, [r7, #8]
 80065ea:	2100      	movs	r1, #0
 80065ec:	68f8      	ldr	r0, [r7, #12]
 80065ee:	f000 fcf0 	bl	8006fd2 <USBD_LL_Transmit>

  return USBD_OK;
 80065f2:	2300      	movs	r3, #0
}
 80065f4:	4618      	mov	r0, r3
 80065f6:	3710      	adds	r7, #16
 80065f8:	46bd      	mov	sp, r7
 80065fa:	bd80      	pop	{r7, pc}

080065fc <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	60f8      	str	r0, [r7, #12]
 8006604:	60b9      	str	r1, [r7, #8]
 8006606:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	2203      	movs	r2, #3
 800660c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	687a      	ldr	r2, [r7, #4]
 8006614:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	687a      	ldr	r2, [r7, #4]
 800661c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	68ba      	ldr	r2, [r7, #8]
 8006624:	2100      	movs	r1, #0
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	f000 fcf4 	bl	8007014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3710      	adds	r7, #16
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}

08006636 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006636:	b580      	push	{r7, lr}
 8006638:	b084      	sub	sp, #16
 800663a:	af00      	add	r7, sp, #0
 800663c:	60f8      	str	r0, [r7, #12]
 800663e:	60b9      	str	r1, [r7, #8]
 8006640:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68ba      	ldr	r2, [r7, #8]
 8006646:	2100      	movs	r1, #0
 8006648:	68f8      	ldr	r0, [r7, #12]
 800664a:	f000 fce3 	bl	8007014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800664e:	2300      	movs	r3, #0
}
 8006650:	4618      	mov	r0, r3
 8006652:	3710      	adds	r7, #16
 8006654:	46bd      	mov	sp, r7
 8006656:	bd80      	pop	{r7, pc}

08006658 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2204      	movs	r2, #4
 8006664:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006668:	2300      	movs	r3, #0
 800666a:	2200      	movs	r2, #0
 800666c:	2100      	movs	r1, #0
 800666e:	6878      	ldr	r0, [r7, #4]
 8006670:	f000 fcaf 	bl	8006fd2 <USBD_LL_Transmit>

  return USBD_OK;
 8006674:	2300      	movs	r3, #0
}
 8006676:	4618      	mov	r0, r3
 8006678:	3708      	adds	r7, #8
 800667a:	46bd      	mov	sp, r7
 800667c:	bd80      	pop	{r7, pc}

0800667e <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800667e:	b580      	push	{r7, lr}
 8006680:	b082      	sub	sp, #8
 8006682:	af00      	add	r7, sp, #0
 8006684:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2205      	movs	r2, #5
 800668a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800668e:	2300      	movs	r3, #0
 8006690:	2200      	movs	r2, #0
 8006692:	2100      	movs	r1, #0
 8006694:	6878      	ldr	r0, [r7, #4]
 8006696:	f000 fcbd 	bl	8007014 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800669a:	2300      	movs	r3, #0
}
 800669c:	4618      	mov	r0, r3
 800669e:	3708      	adds	r7, #8
 80066a0:	46bd      	mov	sp, r7
 80066a2:	bd80      	pop	{r7, pc}

080066a4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80066a8:	2200      	movs	r2, #0
 80066aa:	4912      	ldr	r1, [pc, #72]	; (80066f4 <MX_USB_DEVICE_Init+0x50>)
 80066ac:	4812      	ldr	r0, [pc, #72]	; (80066f8 <MX_USB_DEVICE_Init+0x54>)
 80066ae:	f7fe fd07 	bl	80050c0 <USBD_Init>
 80066b2:	4603      	mov	r3, r0
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d001      	beq.n	80066bc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80066b8:	f7fa f8a8 	bl	800080c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80066bc:	490f      	ldr	r1, [pc, #60]	; (80066fc <MX_USB_DEVICE_Init+0x58>)
 80066be:	480e      	ldr	r0, [pc, #56]	; (80066f8 <MX_USB_DEVICE_Init+0x54>)
 80066c0:	f7fe fd2e 	bl	8005120 <USBD_RegisterClass>
 80066c4:	4603      	mov	r3, r0
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d001      	beq.n	80066ce <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80066ca:	f7fa f89f 	bl	800080c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 80066ce:	490c      	ldr	r1, [pc, #48]	; (8006700 <MX_USB_DEVICE_Init+0x5c>)
 80066d0:	4809      	ldr	r0, [pc, #36]	; (80066f8 <MX_USB_DEVICE_Init+0x54>)
 80066d2:	f7fe fc1f 	bl	8004f14 <USBD_CDC_RegisterInterface>
 80066d6:	4603      	mov	r3, r0
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d001      	beq.n	80066e0 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 80066dc:	f7fa f896 	bl	800080c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80066e0:	4805      	ldr	r0, [pc, #20]	; (80066f8 <MX_USB_DEVICE_Init+0x54>)
 80066e2:	f7fe fd53 	bl	800518c <USBD_Start>
 80066e6:	4603      	mov	r3, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	d001      	beq.n	80066f0 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 80066ec:	f7fa f88e 	bl	800080c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80066f0:	bf00      	nop
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	200000ac 	.word	0x200000ac
 80066f8:	200001f4 	.word	0x200001f4
 80066fc:	20000018 	.word	0x20000018
 8006700:	20000098 	.word	0x20000098

08006704 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006708:	2200      	movs	r2, #0
 800670a:	4905      	ldr	r1, [pc, #20]	; (8006720 <CDC_Init_FS+0x1c>)
 800670c:	4805      	ldr	r0, [pc, #20]	; (8006724 <CDC_Init_FS+0x20>)
 800670e:	f7fe fc1b 	bl	8004f48 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8006712:	4905      	ldr	r1, [pc, #20]	; (8006728 <CDC_Init_FS+0x24>)
 8006714:	4803      	ldr	r0, [pc, #12]	; (8006724 <CDC_Init_FS+0x20>)
 8006716:	f7fe fc39 	bl	8004f8c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800671a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800671c:	4618      	mov	r0, r3
 800671e:	bd80      	pop	{r7, pc}
 8006720:	20000cd0 	.word	0x20000cd0
 8006724:	200001f4 	.word	0x200001f4
 8006728:	200004d0 	.word	0x200004d0

0800672c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800672c:	b480      	push	{r7}
 800672e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8006730:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8006732:	4618      	mov	r0, r3
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr

0800673c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800673c:	b480      	push	{r7}
 800673e:	b083      	sub	sp, #12
 8006740:	af00      	add	r7, sp, #0
 8006742:	4603      	mov	r3, r0
 8006744:	6039      	str	r1, [r7, #0]
 8006746:	71fb      	strb	r3, [r7, #7]
 8006748:	4613      	mov	r3, r2
 800674a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800674c:	79fb      	ldrb	r3, [r7, #7]
 800674e:	2b23      	cmp	r3, #35	; 0x23
 8006750:	d84a      	bhi.n	80067e8 <CDC_Control_FS+0xac>
 8006752:	a201      	add	r2, pc, #4	; (adr r2, 8006758 <CDC_Control_FS+0x1c>)
 8006754:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006758:	080067e9 	.word	0x080067e9
 800675c:	080067e9 	.word	0x080067e9
 8006760:	080067e9 	.word	0x080067e9
 8006764:	080067e9 	.word	0x080067e9
 8006768:	080067e9 	.word	0x080067e9
 800676c:	080067e9 	.word	0x080067e9
 8006770:	080067e9 	.word	0x080067e9
 8006774:	080067e9 	.word	0x080067e9
 8006778:	080067e9 	.word	0x080067e9
 800677c:	080067e9 	.word	0x080067e9
 8006780:	080067e9 	.word	0x080067e9
 8006784:	080067e9 	.word	0x080067e9
 8006788:	080067e9 	.word	0x080067e9
 800678c:	080067e9 	.word	0x080067e9
 8006790:	080067e9 	.word	0x080067e9
 8006794:	080067e9 	.word	0x080067e9
 8006798:	080067e9 	.word	0x080067e9
 800679c:	080067e9 	.word	0x080067e9
 80067a0:	080067e9 	.word	0x080067e9
 80067a4:	080067e9 	.word	0x080067e9
 80067a8:	080067e9 	.word	0x080067e9
 80067ac:	080067e9 	.word	0x080067e9
 80067b0:	080067e9 	.word	0x080067e9
 80067b4:	080067e9 	.word	0x080067e9
 80067b8:	080067e9 	.word	0x080067e9
 80067bc:	080067e9 	.word	0x080067e9
 80067c0:	080067e9 	.word	0x080067e9
 80067c4:	080067e9 	.word	0x080067e9
 80067c8:	080067e9 	.word	0x080067e9
 80067cc:	080067e9 	.word	0x080067e9
 80067d0:	080067e9 	.word	0x080067e9
 80067d4:	080067e9 	.word	0x080067e9
 80067d8:	080067e9 	.word	0x080067e9
 80067dc:	080067e9 	.word	0x080067e9
 80067e0:	080067e9 	.word	0x080067e9
 80067e4:	080067e9 	.word	0x080067e9
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80067e8:	bf00      	nop
  }

  return (USBD_OK);
 80067ea:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80067ec:	4618      	mov	r0, r3
 80067ee:	370c      	adds	r7, #12
 80067f0:	46bd      	mov	sp, r7
 80067f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f6:	4770      	bx	lr

080067f8 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b084      	sub	sp, #16
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
 8006800:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8006802:	6879      	ldr	r1, [r7, #4]
 8006804:	480f      	ldr	r0, [pc, #60]	; (8006844 <CDC_Receive_FS+0x4c>)
 8006806:	f7fe fbc1 	bl	8004f8c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800680a:	480e      	ldr	r0, [pc, #56]	; (8006844 <CDC_Receive_FS+0x4c>)
 800680c:	f7fe fc22 	bl	8005054 <USBD_CDC_ReceivePacket>
  
  for (int i = 0; i < *Len; i++)
 8006810:	2300      	movs	r3, #0
 8006812:	60fb      	str	r3, [r7, #12]
 8006814:	e00b      	b.n	800682e <CDC_Receive_FS+0x36>
  {
	  buffer[i] = Buf[i];
 8006816:	68fb      	ldr	r3, [r7, #12]
 8006818:	687a      	ldr	r2, [r7, #4]
 800681a:	4413      	add	r3, r2
 800681c:	7819      	ldrb	r1, [r3, #0]
 800681e:	4a0a      	ldr	r2, [pc, #40]	; (8006848 <CDC_Receive_FS+0x50>)
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	4413      	add	r3, r2
 8006824:	460a      	mov	r2, r1
 8006826:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < *Len; i++)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	3301      	adds	r3, #1
 800682c:	60fb      	str	r3, [r7, #12]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	429a      	cmp	r2, r3
 8006836:	d8ee      	bhi.n	8006816 <CDC_Receive_FS+0x1e>
  }
  
  return (USBD_OK);
 8006838:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	200001f4 	.word	0x200001f4
 8006848:	2000017c 	.word	0x2000017c

0800684c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b084      	sub	sp, #16
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
 8006854:	460b      	mov	r3, r1
 8006856:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8006858:	2300      	movs	r3, #0
 800685a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800685c:	4b0d      	ldr	r3, [pc, #52]	; (8006894 <CDC_Transmit_FS+0x48>)
 800685e:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 8006862:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8006864:	68bb      	ldr	r3, [r7, #8]
 8006866:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800686a:	2b00      	cmp	r3, #0
 800686c:	d001      	beq.n	8006872 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800686e:	2301      	movs	r3, #1
 8006870:	e00b      	b.n	800688a <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8006872:	887b      	ldrh	r3, [r7, #2]
 8006874:	461a      	mov	r2, r3
 8006876:	6879      	ldr	r1, [r7, #4]
 8006878:	4806      	ldr	r0, [pc, #24]	; (8006894 <CDC_Transmit_FS+0x48>)
 800687a:	f7fe fb65 	bl	8004f48 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800687e:	4805      	ldr	r0, [pc, #20]	; (8006894 <CDC_Transmit_FS+0x48>)
 8006880:	f7fe fba2 	bl	8004fc8 <USBD_CDC_TransmitPacket>
 8006884:	4603      	mov	r3, r0
 8006886:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8006888:	7bfb      	ldrb	r3, [r7, #15]
}
 800688a:	4618      	mov	r0, r3
 800688c:	3710      	adds	r7, #16
 800688e:	46bd      	mov	sp, r7
 8006890:	bd80      	pop	{r7, pc}
 8006892:	bf00      	nop
 8006894:	200001f4 	.word	0x200001f4

08006898 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8006898:	b480      	push	{r7}
 800689a:	b087      	sub	sp, #28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	4613      	mov	r3, r2
 80068a4:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80068a6:	2300      	movs	r3, #0
 80068a8:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80068aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80068ae:	4618      	mov	r0, r3
 80068b0:	371c      	adds	r7, #28
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068bc:	b480      	push	{r7}
 80068be:	b083      	sub	sp, #12
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	4603      	mov	r3, r0
 80068c4:	6039      	str	r1, [r7, #0]
 80068c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80068c8:	683b      	ldr	r3, [r7, #0]
 80068ca:	2212      	movs	r2, #18
 80068cc:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80068ce:	4b03      	ldr	r3, [pc, #12]	; (80068dc <USBD_FS_DeviceDescriptor+0x20>)
}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr
 80068dc:	200000c8 	.word	0x200000c8

080068e0 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	4603      	mov	r3, r0
 80068e8:	6039      	str	r1, [r7, #0]
 80068ea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	2204      	movs	r2, #4
 80068f0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80068f2:	4b03      	ldr	r3, [pc, #12]	; (8006900 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	200000dc 	.word	0x200000dc

08006904 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	4603      	mov	r3, r0
 800690c:	6039      	str	r1, [r7, #0]
 800690e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006910:	79fb      	ldrb	r3, [r7, #7]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d105      	bne.n	8006922 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	4907      	ldr	r1, [pc, #28]	; (8006938 <USBD_FS_ProductStrDescriptor+0x34>)
 800691a:	4808      	ldr	r0, [pc, #32]	; (800693c <USBD_FS_ProductStrDescriptor+0x38>)
 800691c:	f7ff fde2 	bl	80064e4 <USBD_GetString>
 8006920:	e004      	b.n	800692c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	4904      	ldr	r1, [pc, #16]	; (8006938 <USBD_FS_ProductStrDescriptor+0x34>)
 8006926:	4805      	ldr	r0, [pc, #20]	; (800693c <USBD_FS_ProductStrDescriptor+0x38>)
 8006928:	f7ff fddc 	bl	80064e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800692c:	4b02      	ldr	r3, [pc, #8]	; (8006938 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800692e:	4618      	mov	r0, r3
 8006930:	3708      	adds	r7, #8
 8006932:	46bd      	mov	sp, r7
 8006934:	bd80      	pop	{r7, pc}
 8006936:	bf00      	nop
 8006938:	200014d0 	.word	0x200014d0
 800693c:	08007a88 	.word	0x08007a88

08006940 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b082      	sub	sp, #8
 8006944:	af00      	add	r7, sp, #0
 8006946:	4603      	mov	r3, r0
 8006948:	6039      	str	r1, [r7, #0]
 800694a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	4904      	ldr	r1, [pc, #16]	; (8006960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006950:	4804      	ldr	r0, [pc, #16]	; (8006964 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006952:	f7ff fdc7 	bl	80064e4 <USBD_GetString>
  return USBD_StrDesc;
 8006956:	4b02      	ldr	r3, [pc, #8]	; (8006960 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006958:	4618      	mov	r0, r3
 800695a:	3708      	adds	r7, #8
 800695c:	46bd      	mov	sp, r7
 800695e:	bd80      	pop	{r7, pc}
 8006960:	200014d0 	.word	0x200014d0
 8006964:	08007aa0 	.word	0x08007aa0

08006968 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b082      	sub	sp, #8
 800696c:	af00      	add	r7, sp, #0
 800696e:	4603      	mov	r3, r0
 8006970:	6039      	str	r1, [r7, #0]
 8006972:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	221a      	movs	r2, #26
 8006978:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800697a:	f000 f843 	bl	8006a04 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800697e:	4b02      	ldr	r3, [pc, #8]	; (8006988 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006980:	4618      	mov	r0, r3
 8006982:	3708      	adds	r7, #8
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	200000e0 	.word	0x200000e0

0800698c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b082      	sub	sp, #8
 8006990:	af00      	add	r7, sp, #0
 8006992:	4603      	mov	r3, r0
 8006994:	6039      	str	r1, [r7, #0]
 8006996:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006998:	79fb      	ldrb	r3, [r7, #7]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d105      	bne.n	80069aa <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800699e:	683a      	ldr	r2, [r7, #0]
 80069a0:	4907      	ldr	r1, [pc, #28]	; (80069c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069a2:	4808      	ldr	r0, [pc, #32]	; (80069c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069a4:	f7ff fd9e 	bl	80064e4 <USBD_GetString>
 80069a8:	e004      	b.n	80069b4 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	4904      	ldr	r1, [pc, #16]	; (80069c0 <USBD_FS_ConfigStrDescriptor+0x34>)
 80069ae:	4805      	ldr	r0, [pc, #20]	; (80069c4 <USBD_FS_ConfigStrDescriptor+0x38>)
 80069b0:	f7ff fd98 	bl	80064e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069b4:	4b02      	ldr	r3, [pc, #8]	; (80069c0 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80069b6:	4618      	mov	r0, r3
 80069b8:	3708      	adds	r7, #8
 80069ba:	46bd      	mov	sp, r7
 80069bc:	bd80      	pop	{r7, pc}
 80069be:	bf00      	nop
 80069c0:	200014d0 	.word	0x200014d0
 80069c4:	08007ab4 	.word	0x08007ab4

080069c8 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b082      	sub	sp, #8
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	4603      	mov	r3, r0
 80069d0:	6039      	str	r1, [r7, #0]
 80069d2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80069d4:	79fb      	ldrb	r3, [r7, #7]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d105      	bne.n	80069e6 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069da:	683a      	ldr	r2, [r7, #0]
 80069dc:	4907      	ldr	r1, [pc, #28]	; (80069fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069de:	4808      	ldr	r0, [pc, #32]	; (8006a00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069e0:	f7ff fd80 	bl	80064e4 <USBD_GetString>
 80069e4:	e004      	b.n	80069f0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80069e6:	683a      	ldr	r2, [r7, #0]
 80069e8:	4904      	ldr	r1, [pc, #16]	; (80069fc <USBD_FS_InterfaceStrDescriptor+0x34>)
 80069ea:	4805      	ldr	r0, [pc, #20]	; (8006a00 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80069ec:	f7ff fd7a 	bl	80064e4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80069f0:	4b02      	ldr	r3, [pc, #8]	; (80069fc <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3708      	adds	r7, #8
 80069f6:	46bd      	mov	sp, r7
 80069f8:	bd80      	pop	{r7, pc}
 80069fa:	bf00      	nop
 80069fc:	200014d0 	.word	0x200014d0
 8006a00:	08007ac0 	.word	0x08007ac0

08006a04 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006a04:	b580      	push	{r7, lr}
 8006a06:	b084      	sub	sp, #16
 8006a08:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006a0a:	4b0f      	ldr	r3, [pc, #60]	; (8006a48 <Get_SerialNum+0x44>)
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006a10:	4b0e      	ldr	r3, [pc, #56]	; (8006a4c <Get_SerialNum+0x48>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006a16:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <Get_SerialNum+0x4c>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006a1c:	68fa      	ldr	r2, [r7, #12]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	4413      	add	r3, r2
 8006a22:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d009      	beq.n	8006a3e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006a2a:	2208      	movs	r2, #8
 8006a2c:	4909      	ldr	r1, [pc, #36]	; (8006a54 <Get_SerialNum+0x50>)
 8006a2e:	68f8      	ldr	r0, [r7, #12]
 8006a30:	f000 f814 	bl	8006a5c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006a34:	2204      	movs	r2, #4
 8006a36:	4908      	ldr	r1, [pc, #32]	; (8006a58 <Get_SerialNum+0x54>)
 8006a38:	68b8      	ldr	r0, [r7, #8]
 8006a3a:	f000 f80f 	bl	8006a5c <IntToUnicode>
  }
}
 8006a3e:	bf00      	nop
 8006a40:	3710      	adds	r7, #16
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	1fff7a10 	.word	0x1fff7a10
 8006a4c:	1fff7a14 	.word	0x1fff7a14
 8006a50:	1fff7a18 	.word	0x1fff7a18
 8006a54:	200000e2 	.word	0x200000e2
 8006a58:	200000f2 	.word	0x200000f2

08006a5c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b087      	sub	sp, #28
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	60f8      	str	r0, [r7, #12]
 8006a64:	60b9      	str	r1, [r7, #8]
 8006a66:	4613      	mov	r3, r2
 8006a68:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006a6a:	2300      	movs	r3, #0
 8006a6c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006a6e:	2300      	movs	r3, #0
 8006a70:	75fb      	strb	r3, [r7, #23]
 8006a72:	e027      	b.n	8006ac4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	0f1b      	lsrs	r3, r3, #28
 8006a78:	2b09      	cmp	r3, #9
 8006a7a:	d80b      	bhi.n	8006a94 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	0f1b      	lsrs	r3, r3, #28
 8006a80:	b2da      	uxtb	r2, r3
 8006a82:	7dfb      	ldrb	r3, [r7, #23]
 8006a84:	005b      	lsls	r3, r3, #1
 8006a86:	4619      	mov	r1, r3
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	440b      	add	r3, r1
 8006a8c:	3230      	adds	r2, #48	; 0x30
 8006a8e:	b2d2      	uxtb	r2, r2
 8006a90:	701a      	strb	r2, [r3, #0]
 8006a92:	e00a      	b.n	8006aaa <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	0f1b      	lsrs	r3, r3, #28
 8006a98:	b2da      	uxtb	r2, r3
 8006a9a:	7dfb      	ldrb	r3, [r7, #23]
 8006a9c:	005b      	lsls	r3, r3, #1
 8006a9e:	4619      	mov	r1, r3
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	440b      	add	r3, r1
 8006aa4:	3237      	adds	r2, #55	; 0x37
 8006aa6:	b2d2      	uxtb	r2, r2
 8006aa8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	011b      	lsls	r3, r3, #4
 8006aae:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006ab0:	7dfb      	ldrb	r3, [r7, #23]
 8006ab2:	005b      	lsls	r3, r3, #1
 8006ab4:	3301      	adds	r3, #1
 8006ab6:	68ba      	ldr	r2, [r7, #8]
 8006ab8:	4413      	add	r3, r2
 8006aba:	2200      	movs	r2, #0
 8006abc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006abe:	7dfb      	ldrb	r3, [r7, #23]
 8006ac0:	3301      	adds	r3, #1
 8006ac2:	75fb      	strb	r3, [r7, #23]
 8006ac4:	7dfa      	ldrb	r2, [r7, #23]
 8006ac6:	79fb      	ldrb	r3, [r7, #7]
 8006ac8:	429a      	cmp	r2, r3
 8006aca:	d3d3      	bcc.n	8006a74 <IntToUnicode+0x18>
  }
}
 8006acc:	bf00      	nop
 8006ace:	bf00      	nop
 8006ad0:	371c      	adds	r7, #28
 8006ad2:	46bd      	mov	sp, r7
 8006ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad8:	4770      	bx	lr
	...

08006adc <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006adc:	b580      	push	{r7, lr}
 8006ade:	b08a      	sub	sp, #40	; 0x28
 8006ae0:	af00      	add	r7, sp, #0
 8006ae2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ae4:	f107 0314 	add.w	r3, r7, #20
 8006ae8:	2200      	movs	r2, #0
 8006aea:	601a      	str	r2, [r3, #0]
 8006aec:	605a      	str	r2, [r3, #4]
 8006aee:	609a      	str	r2, [r3, #8]
 8006af0:	60da      	str	r2, [r3, #12]
 8006af2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006afc:	d13a      	bne.n	8006b74 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006afe:	2300      	movs	r3, #0
 8006b00:	613b      	str	r3, [r7, #16]
 8006b02:	4b1e      	ldr	r3, [pc, #120]	; (8006b7c <HAL_PCD_MspInit+0xa0>)
 8006b04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b06:	4a1d      	ldr	r2, [pc, #116]	; (8006b7c <HAL_PCD_MspInit+0xa0>)
 8006b08:	f043 0301 	orr.w	r3, r3, #1
 8006b0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b0e:	4b1b      	ldr	r3, [pc, #108]	; (8006b7c <HAL_PCD_MspInit+0xa0>)
 8006b10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b12:	f003 0301 	and.w	r3, r3, #1
 8006b16:	613b      	str	r3, [r7, #16]
 8006b18:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006b1a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b20:	2302      	movs	r3, #2
 8006b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b24:	2300      	movs	r3, #0
 8006b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006b2c:	230a      	movs	r3, #10
 8006b2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006b30:	f107 0314 	add.w	r3, r7, #20
 8006b34:	4619      	mov	r1, r3
 8006b36:	4812      	ldr	r0, [pc, #72]	; (8006b80 <HAL_PCD_MspInit+0xa4>)
 8006b38:	f7fa f8e4 	bl	8000d04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006b3c:	4b0f      	ldr	r3, [pc, #60]	; (8006b7c <HAL_PCD_MspInit+0xa0>)
 8006b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006b40:	4a0e      	ldr	r2, [pc, #56]	; (8006b7c <HAL_PCD_MspInit+0xa0>)
 8006b42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006b46:	6353      	str	r3, [r2, #52]	; 0x34
 8006b48:	2300      	movs	r3, #0
 8006b4a:	60fb      	str	r3, [r7, #12]
 8006b4c:	4b0b      	ldr	r3, [pc, #44]	; (8006b7c <HAL_PCD_MspInit+0xa0>)
 8006b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b50:	4a0a      	ldr	r2, [pc, #40]	; (8006b7c <HAL_PCD_MspInit+0xa0>)
 8006b52:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006b56:	6453      	str	r3, [r2, #68]	; 0x44
 8006b58:	4b08      	ldr	r3, [pc, #32]	; (8006b7c <HAL_PCD_MspInit+0xa0>)
 8006b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006b5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006b60:	60fb      	str	r3, [r7, #12]
 8006b62:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006b64:	2200      	movs	r2, #0
 8006b66:	2100      	movs	r1, #0
 8006b68:	2043      	movs	r0, #67	; 0x43
 8006b6a:	f7fa f894 	bl	8000c96 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006b6e:	2043      	movs	r0, #67	; 0x43
 8006b70:	f7fa f8ad 	bl	8000cce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006b74:	bf00      	nop
 8006b76:	3728      	adds	r7, #40	; 0x28
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	bd80      	pop	{r7, pc}
 8006b7c:	40023800 	.word	0x40023800
 8006b80:	40020000 	.word	0x40020000

08006b84 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b082      	sub	sp, #8
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b98:	4619      	mov	r1, r3
 8006b9a:	4610      	mov	r0, r2
 8006b9c:	f7fe fb43 	bl	8005226 <USBD_LL_SetupStage>
}
 8006ba0:	bf00      	nop
 8006ba2:	3708      	adds	r7, #8
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}

08006ba8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b082      	sub	sp, #8
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	460b      	mov	r3, r1
 8006bb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006bba:	78fa      	ldrb	r2, [r7, #3]
 8006bbc:	6879      	ldr	r1, [r7, #4]
 8006bbe:	4613      	mov	r3, r2
 8006bc0:	00db      	lsls	r3, r3, #3
 8006bc2:	4413      	add	r3, r2
 8006bc4:	009b      	lsls	r3, r3, #2
 8006bc6:	440b      	add	r3, r1
 8006bc8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006bcc:	681a      	ldr	r2, [r3, #0]
 8006bce:	78fb      	ldrb	r3, [r7, #3]
 8006bd0:	4619      	mov	r1, r3
 8006bd2:	f7fe fb7d 	bl	80052d0 <USBD_LL_DataOutStage>
}
 8006bd6:	bf00      	nop
 8006bd8:	3708      	adds	r7, #8
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}

08006bde <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006bde:	b580      	push	{r7, lr}
 8006be0:	b082      	sub	sp, #8
 8006be2:	af00      	add	r7, sp, #0
 8006be4:	6078      	str	r0, [r7, #4]
 8006be6:	460b      	mov	r3, r1
 8006be8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006bf0:	78fa      	ldrb	r2, [r7, #3]
 8006bf2:	6879      	ldr	r1, [r7, #4]
 8006bf4:	4613      	mov	r3, r2
 8006bf6:	00db      	lsls	r3, r3, #3
 8006bf8:	4413      	add	r3, r2
 8006bfa:	009b      	lsls	r3, r3, #2
 8006bfc:	440b      	add	r3, r1
 8006bfe:	334c      	adds	r3, #76	; 0x4c
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	78fb      	ldrb	r3, [r7, #3]
 8006c04:	4619      	mov	r1, r3
 8006c06:	f7fe fc16 	bl	8005436 <USBD_LL_DataInStage>
}
 8006c0a:	bf00      	nop
 8006c0c:	3708      	adds	r7, #8
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	bd80      	pop	{r7, pc}

08006c12 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c20:	4618      	mov	r0, r3
 8006c22:	f7fe fd4a 	bl	80056ba <USBD_LL_SOF>
}
 8006c26:	bf00      	nop
 8006c28:	3708      	adds	r7, #8
 8006c2a:	46bd      	mov	sp, r7
 8006c2c:	bd80      	pop	{r7, pc}

08006c2e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c2e:	b580      	push	{r7, lr}
 8006c30:	b084      	sub	sp, #16
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006c36:	2301      	movs	r3, #1
 8006c38:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d102      	bne.n	8006c48 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8006c42:	2300      	movs	r3, #0
 8006c44:	73fb      	strb	r3, [r7, #15]
 8006c46:	e008      	b.n	8006c5a <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	68db      	ldr	r3, [r3, #12]
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d102      	bne.n	8006c56 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8006c50:	2301      	movs	r3, #1
 8006c52:	73fb      	strb	r3, [r7, #15]
 8006c54:	e001      	b.n	8006c5a <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8006c56:	f7f9 fdd9 	bl	800080c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c60:	7bfa      	ldrb	r2, [r7, #15]
 8006c62:	4611      	mov	r1, r2
 8006c64:	4618      	mov	r0, r3
 8006c66:	f7fe fcea 	bl	800563e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c70:	4618      	mov	r0, r3
 8006c72:	f7fe fc92 	bl	800559a <USBD_LL_Reset>
}
 8006c76:	bf00      	nop
 8006c78:	3710      	adds	r7, #16
 8006c7a:	46bd      	mov	sp, r7
 8006c7c:	bd80      	pop	{r7, pc}
	...

08006c80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7fe fce5 	bl	800565e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	687a      	ldr	r2, [r7, #4]
 8006ca0:	6812      	ldr	r2, [r2, #0]
 8006ca2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ca6:	f043 0301 	orr.w	r3, r3, #1
 8006caa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	6a1b      	ldr	r3, [r3, #32]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d005      	beq.n	8006cc0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006cb4:	4b04      	ldr	r3, [pc, #16]	; (8006cc8 <HAL_PCD_SuspendCallback+0x48>)
 8006cb6:	691b      	ldr	r3, [r3, #16]
 8006cb8:	4a03      	ldr	r2, [pc, #12]	; (8006cc8 <HAL_PCD_SuspendCallback+0x48>)
 8006cba:	f043 0306 	orr.w	r3, r3, #6
 8006cbe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}
 8006cc8:	e000ed00 	.word	0xe000ed00

08006ccc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cda:	4618      	mov	r0, r3
 8006cdc:	f7fe fcd5 	bl	800568a <USBD_LL_Resume>
}
 8006ce0:	bf00      	nop
 8006ce2:	3708      	adds	r7, #8
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b082      	sub	sp, #8
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	460b      	mov	r3, r1
 8006cf2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cfa:	78fa      	ldrb	r2, [r7, #3]
 8006cfc:	4611      	mov	r1, r2
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f7fe fd2d 	bl	800575e <USBD_LL_IsoOUTIncomplete>
}
 8006d04:	bf00      	nop
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}

08006d0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d0c:	b580      	push	{r7, lr}
 8006d0e:	b082      	sub	sp, #8
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
 8006d14:	460b      	mov	r3, r1
 8006d16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d1e:	78fa      	ldrb	r2, [r7, #3]
 8006d20:	4611      	mov	r1, r2
 8006d22:	4618      	mov	r0, r3
 8006d24:	f7fe fce9 	bl	80056fa <USBD_LL_IsoINIncomplete>
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f7fe fd3f 	bl	80057c2 <USBD_LL_DevConnected>
}
 8006d44:	bf00      	nop
 8006d46:	3708      	adds	r7, #8
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	bd80      	pop	{r7, pc}

08006d4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	f7fe fd3c 	bl	80057d8 <USBD_LL_DevDisconnected>
}
 8006d60:	bf00      	nop
 8006d62:	3708      	adds	r7, #8
 8006d64:	46bd      	mov	sp, r7
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	781b      	ldrb	r3, [r3, #0]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d13c      	bne.n	8006df2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006d78:	4a20      	ldr	r2, [pc, #128]	; (8006dfc <USBD_LL_Init+0x94>)
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	4a1e      	ldr	r2, [pc, #120]	; (8006dfc <USBD_LL_Init+0x94>)
 8006d84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006d88:	4b1c      	ldr	r3, [pc, #112]	; (8006dfc <USBD_LL_Init+0x94>)
 8006d8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006d8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006d90:	4b1a      	ldr	r3, [pc, #104]	; (8006dfc <USBD_LL_Init+0x94>)
 8006d92:	2204      	movs	r2, #4
 8006d94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006d96:	4b19      	ldr	r3, [pc, #100]	; (8006dfc <USBD_LL_Init+0x94>)
 8006d98:	2202      	movs	r2, #2
 8006d9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006d9c:	4b17      	ldr	r3, [pc, #92]	; (8006dfc <USBD_LL_Init+0x94>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006da2:	4b16      	ldr	r3, [pc, #88]	; (8006dfc <USBD_LL_Init+0x94>)
 8006da4:	2202      	movs	r2, #2
 8006da6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006da8:	4b14      	ldr	r3, [pc, #80]	; (8006dfc <USBD_LL_Init+0x94>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006dae:	4b13      	ldr	r3, [pc, #76]	; (8006dfc <USBD_LL_Init+0x94>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006db4:	4b11      	ldr	r3, [pc, #68]	; (8006dfc <USBD_LL_Init+0x94>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006dba:	4b10      	ldr	r3, [pc, #64]	; (8006dfc <USBD_LL_Init+0x94>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006dc0:	4b0e      	ldr	r3, [pc, #56]	; (8006dfc <USBD_LL_Init+0x94>)
 8006dc2:	2200      	movs	r2, #0
 8006dc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006dc6:	480d      	ldr	r0, [pc, #52]	; (8006dfc <USBD_LL_Init+0x94>)
 8006dc8:	f7fa f969 	bl	800109e <HAL_PCD_Init>
 8006dcc:	4603      	mov	r3, r0
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d001      	beq.n	8006dd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006dd2:	f7f9 fd1b 	bl	800080c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006dd6:	2180      	movs	r1, #128	; 0x80
 8006dd8:	4808      	ldr	r0, [pc, #32]	; (8006dfc <USBD_LL_Init+0x94>)
 8006dda:	f7fb fbc0 	bl	800255e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006dde:	2240      	movs	r2, #64	; 0x40
 8006de0:	2100      	movs	r1, #0
 8006de2:	4806      	ldr	r0, [pc, #24]	; (8006dfc <USBD_LL_Init+0x94>)
 8006de4:	f7fb fb74 	bl	80024d0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006de8:	2280      	movs	r2, #128	; 0x80
 8006dea:	2101      	movs	r1, #1
 8006dec:	4803      	ldr	r0, [pc, #12]	; (8006dfc <USBD_LL_Init+0x94>)
 8006dee:	f7fb fb6f 	bl	80024d0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006df2:	2300      	movs	r3, #0
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3708      	adds	r7, #8
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	200016d0 	.word	0x200016d0

08006e00 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b084      	sub	sp, #16
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e08:	2300      	movs	r3, #0
 8006e0a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e0c:	2300      	movs	r3, #0
 8006e0e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e16:	4618      	mov	r0, r3
 8006e18:	f7fa fa5e 	bl	80012d8 <HAL_PCD_Start>
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e20:	7bfb      	ldrb	r3, [r7, #15]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f000 f942 	bl	80070ac <USBD_Get_USB_Status>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e2c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3710      	adds	r7, #16
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}

08006e36 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006e36:	b580      	push	{r7, lr}
 8006e38:	b084      	sub	sp, #16
 8006e3a:	af00      	add	r7, sp, #0
 8006e3c:	6078      	str	r0, [r7, #4]
 8006e3e:	4608      	mov	r0, r1
 8006e40:	4611      	mov	r1, r2
 8006e42:	461a      	mov	r2, r3
 8006e44:	4603      	mov	r3, r0
 8006e46:	70fb      	strb	r3, [r7, #3]
 8006e48:	460b      	mov	r3, r1
 8006e4a:	70bb      	strb	r3, [r7, #2]
 8006e4c:	4613      	mov	r3, r2
 8006e4e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e50:	2300      	movs	r3, #0
 8006e52:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e54:	2300      	movs	r3, #0
 8006e56:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006e5e:	78bb      	ldrb	r3, [r7, #2]
 8006e60:	883a      	ldrh	r2, [r7, #0]
 8006e62:	78f9      	ldrb	r1, [r7, #3]
 8006e64:	f7fa ff2f 	bl	8001cc6 <HAL_PCD_EP_Open>
 8006e68:	4603      	mov	r3, r0
 8006e6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e6c:	7bfb      	ldrb	r3, [r7, #15]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f000 f91c 	bl	80070ac <USBD_Get_USB_Status>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e7a:	4618      	mov	r0, r3
 8006e7c:	3710      	adds	r7, #16
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	bd80      	pop	{r7, pc}

08006e82 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e82:	b580      	push	{r7, lr}
 8006e84:	b084      	sub	sp, #16
 8006e86:	af00      	add	r7, sp, #0
 8006e88:	6078      	str	r0, [r7, #4]
 8006e8a:	460b      	mov	r3, r1
 8006e8c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e8e:	2300      	movs	r3, #0
 8006e90:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e92:	2300      	movs	r3, #0
 8006e94:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e9c:	78fa      	ldrb	r2, [r7, #3]
 8006e9e:	4611      	mov	r1, r2
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	f7fa ff78 	bl	8001d96 <HAL_PCD_EP_Close>
 8006ea6:	4603      	mov	r3, r0
 8006ea8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006eaa:	7bfb      	ldrb	r3, [r7, #15]
 8006eac:	4618      	mov	r0, r3
 8006eae:	f000 f8fd 	bl	80070ac <USBD_Get_USB_Status>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006eb6:	7bbb      	ldrb	r3, [r7, #14]
}
 8006eb8:	4618      	mov	r0, r3
 8006eba:	3710      	adds	r7, #16
 8006ebc:	46bd      	mov	sp, r7
 8006ebe:	bd80      	pop	{r7, pc}

08006ec0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b084      	sub	sp, #16
 8006ec4:	af00      	add	r7, sp, #0
 8006ec6:	6078      	str	r0, [r7, #4]
 8006ec8:	460b      	mov	r3, r1
 8006eca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006ecc:	2300      	movs	r3, #0
 8006ece:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eda:	78fa      	ldrb	r2, [r7, #3]
 8006edc:	4611      	mov	r1, r2
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f7fb f850 	bl	8001f84 <HAL_PCD_EP_SetStall>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ee8:	7bfb      	ldrb	r3, [r7, #15]
 8006eea:	4618      	mov	r0, r3
 8006eec:	f000 f8de 	bl	80070ac <USBD_Get_USB_Status>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	3710      	adds	r7, #16
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006efe:	b580      	push	{r7, lr}
 8006f00:	b084      	sub	sp, #16
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]
 8006f06:	460b      	mov	r3, r1
 8006f08:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f18:	78fa      	ldrb	r2, [r7, #3]
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	4618      	mov	r0, r3
 8006f1e:	f7fb f895 	bl	800204c <HAL_PCD_EP_ClrStall>
 8006f22:	4603      	mov	r3, r0
 8006f24:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f26:	7bfb      	ldrb	r3, [r7, #15]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 f8bf 	bl	80070ac <USBD_Get_USB_Status>
 8006f2e:	4603      	mov	r3, r0
 8006f30:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f32:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f34:	4618      	mov	r0, r3
 8006f36:	3710      	adds	r7, #16
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	bd80      	pop	{r7, pc}

08006f3c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b085      	sub	sp, #20
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
 8006f44:	460b      	mov	r3, r1
 8006f46:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f4e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006f50:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	da0b      	bge.n	8006f70 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006f58:	78fb      	ldrb	r3, [r7, #3]
 8006f5a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f5e:	68f9      	ldr	r1, [r7, #12]
 8006f60:	4613      	mov	r3, r2
 8006f62:	00db      	lsls	r3, r3, #3
 8006f64:	4413      	add	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	440b      	add	r3, r1
 8006f6a:	333e      	adds	r3, #62	; 0x3e
 8006f6c:	781b      	ldrb	r3, [r3, #0]
 8006f6e:	e00b      	b.n	8006f88 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006f70:	78fb      	ldrb	r3, [r7, #3]
 8006f72:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f76:	68f9      	ldr	r1, [r7, #12]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	00db      	lsls	r3, r3, #3
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006f86:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006f88:	4618      	mov	r0, r3
 8006f8a:	3714      	adds	r7, #20
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f92:	4770      	bx	lr

08006f94 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b084      	sub	sp, #16
 8006f98:	af00      	add	r7, sp, #0
 8006f9a:	6078      	str	r0, [r7, #4]
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006fae:	78fa      	ldrb	r2, [r7, #3]
 8006fb0:	4611      	mov	r1, r2
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fa fe62 	bl	8001c7c <HAL_PCD_SetAddress>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fbc:	7bfb      	ldrb	r3, [r7, #15]
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f000 f874 	bl	80070ac <USBD_Get_USB_Status>
 8006fc4:	4603      	mov	r3, r0
 8006fc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006fc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006fca:	4618      	mov	r0, r3
 8006fcc:	3710      	adds	r7, #16
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	bd80      	pop	{r7, pc}

08006fd2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006fd2:	b580      	push	{r7, lr}
 8006fd4:	b086      	sub	sp, #24
 8006fd6:	af00      	add	r7, sp, #0
 8006fd8:	60f8      	str	r0, [r7, #12]
 8006fda:	607a      	str	r2, [r7, #4]
 8006fdc:	603b      	str	r3, [r7, #0]
 8006fde:	460b      	mov	r3, r1
 8006fe0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006ff0:	7af9      	ldrb	r1, [r7, #11]
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	687a      	ldr	r2, [r7, #4]
 8006ff6:	f7fa ff7b 	bl	8001ef0 <HAL_PCD_EP_Transmit>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006ffe:	7dfb      	ldrb	r3, [r7, #23]
 8007000:	4618      	mov	r0, r3
 8007002:	f000 f853 	bl	80070ac <USBD_Get_USB_Status>
 8007006:	4603      	mov	r3, r0
 8007008:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800700a:	7dbb      	ldrb	r3, [r7, #22]
}
 800700c:	4618      	mov	r0, r3
 800700e:	3718      	adds	r7, #24
 8007010:	46bd      	mov	sp, r7
 8007012:	bd80      	pop	{r7, pc}

08007014 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007014:	b580      	push	{r7, lr}
 8007016:	b086      	sub	sp, #24
 8007018:	af00      	add	r7, sp, #0
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	607a      	str	r2, [r7, #4]
 800701e:	603b      	str	r3, [r7, #0]
 8007020:	460b      	mov	r3, r1
 8007022:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007024:	2300      	movs	r3, #0
 8007026:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007028:	2300      	movs	r3, #0
 800702a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007032:	7af9      	ldrb	r1, [r7, #11]
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	687a      	ldr	r2, [r7, #4]
 8007038:	f7fa fef7 	bl	8001e2a <HAL_PCD_EP_Receive>
 800703c:	4603      	mov	r3, r0
 800703e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007040:	7dfb      	ldrb	r3, [r7, #23]
 8007042:	4618      	mov	r0, r3
 8007044:	f000 f832 	bl	80070ac <USBD_Get_USB_Status>
 8007048:	4603      	mov	r3, r0
 800704a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800704c:	7dbb      	ldrb	r3, [r7, #22]
}
 800704e:	4618      	mov	r0, r3
 8007050:	3718      	adds	r7, #24
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b082      	sub	sp, #8
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
 800705e:	460b      	mov	r3, r1
 8007060:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007068:	78fa      	ldrb	r2, [r7, #3]
 800706a:	4611      	mov	r1, r2
 800706c:	4618      	mov	r0, r3
 800706e:	f7fa ff27 	bl	8001ec0 <HAL_PCD_EP_GetRxCount>
 8007072:	4603      	mov	r3, r0
}
 8007074:	4618      	mov	r0, r3
 8007076:	3708      	adds	r7, #8
 8007078:	46bd      	mov	sp, r7
 800707a:	bd80      	pop	{r7, pc}

0800707c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007084:	4b03      	ldr	r3, [pc, #12]	; (8007094 <USBD_static_malloc+0x18>)
}
 8007086:	4618      	mov	r0, r3
 8007088:	370c      	adds	r7, #12
 800708a:	46bd      	mov	sp, r7
 800708c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007090:	4770      	bx	lr
 8007092:	bf00      	nop
 8007094:	20001bdc 	.word	0x20001bdc

08007098 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]

}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80070ac:	b480      	push	{r7}
 80070ae:	b085      	sub	sp, #20
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	4603      	mov	r3, r0
 80070b4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070b6:	2300      	movs	r3, #0
 80070b8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80070ba:	79fb      	ldrb	r3, [r7, #7]
 80070bc:	2b03      	cmp	r3, #3
 80070be:	d817      	bhi.n	80070f0 <USBD_Get_USB_Status+0x44>
 80070c0:	a201      	add	r2, pc, #4	; (adr r2, 80070c8 <USBD_Get_USB_Status+0x1c>)
 80070c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070c6:	bf00      	nop
 80070c8:	080070d9 	.word	0x080070d9
 80070cc:	080070df 	.word	0x080070df
 80070d0:	080070e5 	.word	0x080070e5
 80070d4:	080070eb 	.word	0x080070eb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80070d8:	2300      	movs	r3, #0
 80070da:	73fb      	strb	r3, [r7, #15]
    break;
 80070dc:	e00b      	b.n	80070f6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80070de:	2303      	movs	r3, #3
 80070e0:	73fb      	strb	r3, [r7, #15]
    break;
 80070e2:	e008      	b.n	80070f6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80070e4:	2301      	movs	r3, #1
 80070e6:	73fb      	strb	r3, [r7, #15]
    break;
 80070e8:	e005      	b.n	80070f6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80070ea:	2303      	movs	r3, #3
 80070ec:	73fb      	strb	r3, [r7, #15]
    break;
 80070ee:	e002      	b.n	80070f6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80070f0:	2303      	movs	r3, #3
 80070f2:	73fb      	strb	r3, [r7, #15]
    break;
 80070f4:	bf00      	nop
  }
  return usb_status;
 80070f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3714      	adds	r7, #20
 80070fc:	46bd      	mov	sp, r7
 80070fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007102:	4770      	bx	lr

08007104 <__errno>:
 8007104:	4b01      	ldr	r3, [pc, #4]	; (800710c <__errno+0x8>)
 8007106:	6818      	ldr	r0, [r3, #0]
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	200000fc 	.word	0x200000fc

08007110 <__libc_init_array>:
 8007110:	b570      	push	{r4, r5, r6, lr}
 8007112:	4d0d      	ldr	r5, [pc, #52]	; (8007148 <__libc_init_array+0x38>)
 8007114:	4c0d      	ldr	r4, [pc, #52]	; (800714c <__libc_init_array+0x3c>)
 8007116:	1b64      	subs	r4, r4, r5
 8007118:	10a4      	asrs	r4, r4, #2
 800711a:	2600      	movs	r6, #0
 800711c:	42a6      	cmp	r6, r4
 800711e:	d109      	bne.n	8007134 <__libc_init_array+0x24>
 8007120:	4d0b      	ldr	r5, [pc, #44]	; (8007150 <__libc_init_array+0x40>)
 8007122:	4c0c      	ldr	r4, [pc, #48]	; (8007154 <__libc_init_array+0x44>)
 8007124:	f000 fca2 	bl	8007a6c <_init>
 8007128:	1b64      	subs	r4, r4, r5
 800712a:	10a4      	asrs	r4, r4, #2
 800712c:	2600      	movs	r6, #0
 800712e:	42a6      	cmp	r6, r4
 8007130:	d105      	bne.n	800713e <__libc_init_array+0x2e>
 8007132:	bd70      	pop	{r4, r5, r6, pc}
 8007134:	f855 3b04 	ldr.w	r3, [r5], #4
 8007138:	4798      	blx	r3
 800713a:	3601      	adds	r6, #1
 800713c:	e7ee      	b.n	800711c <__libc_init_array+0xc>
 800713e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007142:	4798      	blx	r3
 8007144:	3601      	adds	r6, #1
 8007146:	e7f2      	b.n	800712e <__libc_init_array+0x1e>
 8007148:	08007b1c 	.word	0x08007b1c
 800714c:	08007b1c 	.word	0x08007b1c
 8007150:	08007b1c 	.word	0x08007b1c
 8007154:	08007b20 	.word	0x08007b20

08007158 <memset>:
 8007158:	4402      	add	r2, r0
 800715a:	4603      	mov	r3, r0
 800715c:	4293      	cmp	r3, r2
 800715e:	d100      	bne.n	8007162 <memset+0xa>
 8007160:	4770      	bx	lr
 8007162:	f803 1b01 	strb.w	r1, [r3], #1
 8007166:	e7f9      	b.n	800715c <memset+0x4>

08007168 <sniprintf>:
 8007168:	b40c      	push	{r2, r3}
 800716a:	b530      	push	{r4, r5, lr}
 800716c:	4b17      	ldr	r3, [pc, #92]	; (80071cc <sniprintf+0x64>)
 800716e:	1e0c      	subs	r4, r1, #0
 8007170:	681d      	ldr	r5, [r3, #0]
 8007172:	b09d      	sub	sp, #116	; 0x74
 8007174:	da08      	bge.n	8007188 <sniprintf+0x20>
 8007176:	238b      	movs	r3, #139	; 0x8b
 8007178:	602b      	str	r3, [r5, #0]
 800717a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800717e:	b01d      	add	sp, #116	; 0x74
 8007180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007184:	b002      	add	sp, #8
 8007186:	4770      	bx	lr
 8007188:	f44f 7302 	mov.w	r3, #520	; 0x208
 800718c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007190:	bf14      	ite	ne
 8007192:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8007196:	4623      	moveq	r3, r4
 8007198:	9304      	str	r3, [sp, #16]
 800719a:	9307      	str	r3, [sp, #28]
 800719c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80071a0:	9002      	str	r0, [sp, #8]
 80071a2:	9006      	str	r0, [sp, #24]
 80071a4:	f8ad 3016 	strh.w	r3, [sp, #22]
 80071a8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80071aa:	ab21      	add	r3, sp, #132	; 0x84
 80071ac:	a902      	add	r1, sp, #8
 80071ae:	4628      	mov	r0, r5
 80071b0:	9301      	str	r3, [sp, #4]
 80071b2:	f000 f869 	bl	8007288 <_svfiprintf_r>
 80071b6:	1c43      	adds	r3, r0, #1
 80071b8:	bfbc      	itt	lt
 80071ba:	238b      	movlt	r3, #139	; 0x8b
 80071bc:	602b      	strlt	r3, [r5, #0]
 80071be:	2c00      	cmp	r4, #0
 80071c0:	d0dd      	beq.n	800717e <sniprintf+0x16>
 80071c2:	9b02      	ldr	r3, [sp, #8]
 80071c4:	2200      	movs	r2, #0
 80071c6:	701a      	strb	r2, [r3, #0]
 80071c8:	e7d9      	b.n	800717e <sniprintf+0x16>
 80071ca:	bf00      	nop
 80071cc:	200000fc 	.word	0x200000fc

080071d0 <__ssputs_r>:
 80071d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071d4:	688e      	ldr	r6, [r1, #8]
 80071d6:	429e      	cmp	r6, r3
 80071d8:	4682      	mov	sl, r0
 80071da:	460c      	mov	r4, r1
 80071dc:	4690      	mov	r8, r2
 80071de:	461f      	mov	r7, r3
 80071e0:	d838      	bhi.n	8007254 <__ssputs_r+0x84>
 80071e2:	898a      	ldrh	r2, [r1, #12]
 80071e4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80071e8:	d032      	beq.n	8007250 <__ssputs_r+0x80>
 80071ea:	6825      	ldr	r5, [r4, #0]
 80071ec:	6909      	ldr	r1, [r1, #16]
 80071ee:	eba5 0901 	sub.w	r9, r5, r1
 80071f2:	6965      	ldr	r5, [r4, #20]
 80071f4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80071f8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80071fc:	3301      	adds	r3, #1
 80071fe:	444b      	add	r3, r9
 8007200:	106d      	asrs	r5, r5, #1
 8007202:	429d      	cmp	r5, r3
 8007204:	bf38      	it	cc
 8007206:	461d      	movcc	r5, r3
 8007208:	0553      	lsls	r3, r2, #21
 800720a:	d531      	bpl.n	8007270 <__ssputs_r+0xa0>
 800720c:	4629      	mov	r1, r5
 800720e:	f000 fb63 	bl	80078d8 <_malloc_r>
 8007212:	4606      	mov	r6, r0
 8007214:	b950      	cbnz	r0, 800722c <__ssputs_r+0x5c>
 8007216:	230c      	movs	r3, #12
 8007218:	f8ca 3000 	str.w	r3, [sl]
 800721c:	89a3      	ldrh	r3, [r4, #12]
 800721e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007222:	81a3      	strh	r3, [r4, #12]
 8007224:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800722c:	6921      	ldr	r1, [r4, #16]
 800722e:	464a      	mov	r2, r9
 8007230:	f000 fabe 	bl	80077b0 <memcpy>
 8007234:	89a3      	ldrh	r3, [r4, #12]
 8007236:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800723a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800723e:	81a3      	strh	r3, [r4, #12]
 8007240:	6126      	str	r6, [r4, #16]
 8007242:	6165      	str	r5, [r4, #20]
 8007244:	444e      	add	r6, r9
 8007246:	eba5 0509 	sub.w	r5, r5, r9
 800724a:	6026      	str	r6, [r4, #0]
 800724c:	60a5      	str	r5, [r4, #8]
 800724e:	463e      	mov	r6, r7
 8007250:	42be      	cmp	r6, r7
 8007252:	d900      	bls.n	8007256 <__ssputs_r+0x86>
 8007254:	463e      	mov	r6, r7
 8007256:	6820      	ldr	r0, [r4, #0]
 8007258:	4632      	mov	r2, r6
 800725a:	4641      	mov	r1, r8
 800725c:	f000 fab6 	bl	80077cc <memmove>
 8007260:	68a3      	ldr	r3, [r4, #8]
 8007262:	1b9b      	subs	r3, r3, r6
 8007264:	60a3      	str	r3, [r4, #8]
 8007266:	6823      	ldr	r3, [r4, #0]
 8007268:	4433      	add	r3, r6
 800726a:	6023      	str	r3, [r4, #0]
 800726c:	2000      	movs	r0, #0
 800726e:	e7db      	b.n	8007228 <__ssputs_r+0x58>
 8007270:	462a      	mov	r2, r5
 8007272:	f000 fba5 	bl	80079c0 <_realloc_r>
 8007276:	4606      	mov	r6, r0
 8007278:	2800      	cmp	r0, #0
 800727a:	d1e1      	bne.n	8007240 <__ssputs_r+0x70>
 800727c:	6921      	ldr	r1, [r4, #16]
 800727e:	4650      	mov	r0, sl
 8007280:	f000 fabe 	bl	8007800 <_free_r>
 8007284:	e7c7      	b.n	8007216 <__ssputs_r+0x46>
	...

08007288 <_svfiprintf_r>:
 8007288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728c:	4698      	mov	r8, r3
 800728e:	898b      	ldrh	r3, [r1, #12]
 8007290:	061b      	lsls	r3, r3, #24
 8007292:	b09d      	sub	sp, #116	; 0x74
 8007294:	4607      	mov	r7, r0
 8007296:	460d      	mov	r5, r1
 8007298:	4614      	mov	r4, r2
 800729a:	d50e      	bpl.n	80072ba <_svfiprintf_r+0x32>
 800729c:	690b      	ldr	r3, [r1, #16]
 800729e:	b963      	cbnz	r3, 80072ba <_svfiprintf_r+0x32>
 80072a0:	2140      	movs	r1, #64	; 0x40
 80072a2:	f000 fb19 	bl	80078d8 <_malloc_r>
 80072a6:	6028      	str	r0, [r5, #0]
 80072a8:	6128      	str	r0, [r5, #16]
 80072aa:	b920      	cbnz	r0, 80072b6 <_svfiprintf_r+0x2e>
 80072ac:	230c      	movs	r3, #12
 80072ae:	603b      	str	r3, [r7, #0]
 80072b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80072b4:	e0d1      	b.n	800745a <_svfiprintf_r+0x1d2>
 80072b6:	2340      	movs	r3, #64	; 0x40
 80072b8:	616b      	str	r3, [r5, #20]
 80072ba:	2300      	movs	r3, #0
 80072bc:	9309      	str	r3, [sp, #36]	; 0x24
 80072be:	2320      	movs	r3, #32
 80072c0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80072c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80072c8:	2330      	movs	r3, #48	; 0x30
 80072ca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007474 <_svfiprintf_r+0x1ec>
 80072ce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80072d2:	f04f 0901 	mov.w	r9, #1
 80072d6:	4623      	mov	r3, r4
 80072d8:	469a      	mov	sl, r3
 80072da:	f813 2b01 	ldrb.w	r2, [r3], #1
 80072de:	b10a      	cbz	r2, 80072e4 <_svfiprintf_r+0x5c>
 80072e0:	2a25      	cmp	r2, #37	; 0x25
 80072e2:	d1f9      	bne.n	80072d8 <_svfiprintf_r+0x50>
 80072e4:	ebba 0b04 	subs.w	fp, sl, r4
 80072e8:	d00b      	beq.n	8007302 <_svfiprintf_r+0x7a>
 80072ea:	465b      	mov	r3, fp
 80072ec:	4622      	mov	r2, r4
 80072ee:	4629      	mov	r1, r5
 80072f0:	4638      	mov	r0, r7
 80072f2:	f7ff ff6d 	bl	80071d0 <__ssputs_r>
 80072f6:	3001      	adds	r0, #1
 80072f8:	f000 80aa 	beq.w	8007450 <_svfiprintf_r+0x1c8>
 80072fc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80072fe:	445a      	add	r2, fp
 8007300:	9209      	str	r2, [sp, #36]	; 0x24
 8007302:	f89a 3000 	ldrb.w	r3, [sl]
 8007306:	2b00      	cmp	r3, #0
 8007308:	f000 80a2 	beq.w	8007450 <_svfiprintf_r+0x1c8>
 800730c:	2300      	movs	r3, #0
 800730e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007312:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007316:	f10a 0a01 	add.w	sl, sl, #1
 800731a:	9304      	str	r3, [sp, #16]
 800731c:	9307      	str	r3, [sp, #28]
 800731e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007322:	931a      	str	r3, [sp, #104]	; 0x68
 8007324:	4654      	mov	r4, sl
 8007326:	2205      	movs	r2, #5
 8007328:	f814 1b01 	ldrb.w	r1, [r4], #1
 800732c:	4851      	ldr	r0, [pc, #324]	; (8007474 <_svfiprintf_r+0x1ec>)
 800732e:	f7f8 ff57 	bl	80001e0 <memchr>
 8007332:	9a04      	ldr	r2, [sp, #16]
 8007334:	b9d8      	cbnz	r0, 800736e <_svfiprintf_r+0xe6>
 8007336:	06d0      	lsls	r0, r2, #27
 8007338:	bf44      	itt	mi
 800733a:	2320      	movmi	r3, #32
 800733c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007340:	0711      	lsls	r1, r2, #28
 8007342:	bf44      	itt	mi
 8007344:	232b      	movmi	r3, #43	; 0x2b
 8007346:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800734a:	f89a 3000 	ldrb.w	r3, [sl]
 800734e:	2b2a      	cmp	r3, #42	; 0x2a
 8007350:	d015      	beq.n	800737e <_svfiprintf_r+0xf6>
 8007352:	9a07      	ldr	r2, [sp, #28]
 8007354:	4654      	mov	r4, sl
 8007356:	2000      	movs	r0, #0
 8007358:	f04f 0c0a 	mov.w	ip, #10
 800735c:	4621      	mov	r1, r4
 800735e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007362:	3b30      	subs	r3, #48	; 0x30
 8007364:	2b09      	cmp	r3, #9
 8007366:	d94e      	bls.n	8007406 <_svfiprintf_r+0x17e>
 8007368:	b1b0      	cbz	r0, 8007398 <_svfiprintf_r+0x110>
 800736a:	9207      	str	r2, [sp, #28]
 800736c:	e014      	b.n	8007398 <_svfiprintf_r+0x110>
 800736e:	eba0 0308 	sub.w	r3, r0, r8
 8007372:	fa09 f303 	lsl.w	r3, r9, r3
 8007376:	4313      	orrs	r3, r2
 8007378:	9304      	str	r3, [sp, #16]
 800737a:	46a2      	mov	sl, r4
 800737c:	e7d2      	b.n	8007324 <_svfiprintf_r+0x9c>
 800737e:	9b03      	ldr	r3, [sp, #12]
 8007380:	1d19      	adds	r1, r3, #4
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	9103      	str	r1, [sp, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	bfbb      	ittet	lt
 800738a:	425b      	neglt	r3, r3
 800738c:	f042 0202 	orrlt.w	r2, r2, #2
 8007390:	9307      	strge	r3, [sp, #28]
 8007392:	9307      	strlt	r3, [sp, #28]
 8007394:	bfb8      	it	lt
 8007396:	9204      	strlt	r2, [sp, #16]
 8007398:	7823      	ldrb	r3, [r4, #0]
 800739a:	2b2e      	cmp	r3, #46	; 0x2e
 800739c:	d10c      	bne.n	80073b8 <_svfiprintf_r+0x130>
 800739e:	7863      	ldrb	r3, [r4, #1]
 80073a0:	2b2a      	cmp	r3, #42	; 0x2a
 80073a2:	d135      	bne.n	8007410 <_svfiprintf_r+0x188>
 80073a4:	9b03      	ldr	r3, [sp, #12]
 80073a6:	1d1a      	adds	r2, r3, #4
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	9203      	str	r2, [sp, #12]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	bfb8      	it	lt
 80073b0:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80073b4:	3402      	adds	r4, #2
 80073b6:	9305      	str	r3, [sp, #20]
 80073b8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007484 <_svfiprintf_r+0x1fc>
 80073bc:	7821      	ldrb	r1, [r4, #0]
 80073be:	2203      	movs	r2, #3
 80073c0:	4650      	mov	r0, sl
 80073c2:	f7f8 ff0d 	bl	80001e0 <memchr>
 80073c6:	b140      	cbz	r0, 80073da <_svfiprintf_r+0x152>
 80073c8:	2340      	movs	r3, #64	; 0x40
 80073ca:	eba0 000a 	sub.w	r0, r0, sl
 80073ce:	fa03 f000 	lsl.w	r0, r3, r0
 80073d2:	9b04      	ldr	r3, [sp, #16]
 80073d4:	4303      	orrs	r3, r0
 80073d6:	3401      	adds	r4, #1
 80073d8:	9304      	str	r3, [sp, #16]
 80073da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073de:	4826      	ldr	r0, [pc, #152]	; (8007478 <_svfiprintf_r+0x1f0>)
 80073e0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80073e4:	2206      	movs	r2, #6
 80073e6:	f7f8 fefb 	bl	80001e0 <memchr>
 80073ea:	2800      	cmp	r0, #0
 80073ec:	d038      	beq.n	8007460 <_svfiprintf_r+0x1d8>
 80073ee:	4b23      	ldr	r3, [pc, #140]	; (800747c <_svfiprintf_r+0x1f4>)
 80073f0:	bb1b      	cbnz	r3, 800743a <_svfiprintf_r+0x1b2>
 80073f2:	9b03      	ldr	r3, [sp, #12]
 80073f4:	3307      	adds	r3, #7
 80073f6:	f023 0307 	bic.w	r3, r3, #7
 80073fa:	3308      	adds	r3, #8
 80073fc:	9303      	str	r3, [sp, #12]
 80073fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007400:	4433      	add	r3, r6
 8007402:	9309      	str	r3, [sp, #36]	; 0x24
 8007404:	e767      	b.n	80072d6 <_svfiprintf_r+0x4e>
 8007406:	fb0c 3202 	mla	r2, ip, r2, r3
 800740a:	460c      	mov	r4, r1
 800740c:	2001      	movs	r0, #1
 800740e:	e7a5      	b.n	800735c <_svfiprintf_r+0xd4>
 8007410:	2300      	movs	r3, #0
 8007412:	3401      	adds	r4, #1
 8007414:	9305      	str	r3, [sp, #20]
 8007416:	4619      	mov	r1, r3
 8007418:	f04f 0c0a 	mov.w	ip, #10
 800741c:	4620      	mov	r0, r4
 800741e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007422:	3a30      	subs	r2, #48	; 0x30
 8007424:	2a09      	cmp	r2, #9
 8007426:	d903      	bls.n	8007430 <_svfiprintf_r+0x1a8>
 8007428:	2b00      	cmp	r3, #0
 800742a:	d0c5      	beq.n	80073b8 <_svfiprintf_r+0x130>
 800742c:	9105      	str	r1, [sp, #20]
 800742e:	e7c3      	b.n	80073b8 <_svfiprintf_r+0x130>
 8007430:	fb0c 2101 	mla	r1, ip, r1, r2
 8007434:	4604      	mov	r4, r0
 8007436:	2301      	movs	r3, #1
 8007438:	e7f0      	b.n	800741c <_svfiprintf_r+0x194>
 800743a:	ab03      	add	r3, sp, #12
 800743c:	9300      	str	r3, [sp, #0]
 800743e:	462a      	mov	r2, r5
 8007440:	4b0f      	ldr	r3, [pc, #60]	; (8007480 <_svfiprintf_r+0x1f8>)
 8007442:	a904      	add	r1, sp, #16
 8007444:	4638      	mov	r0, r7
 8007446:	f3af 8000 	nop.w
 800744a:	1c42      	adds	r2, r0, #1
 800744c:	4606      	mov	r6, r0
 800744e:	d1d6      	bne.n	80073fe <_svfiprintf_r+0x176>
 8007450:	89ab      	ldrh	r3, [r5, #12]
 8007452:	065b      	lsls	r3, r3, #25
 8007454:	f53f af2c 	bmi.w	80072b0 <_svfiprintf_r+0x28>
 8007458:	9809      	ldr	r0, [sp, #36]	; 0x24
 800745a:	b01d      	add	sp, #116	; 0x74
 800745c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007460:	ab03      	add	r3, sp, #12
 8007462:	9300      	str	r3, [sp, #0]
 8007464:	462a      	mov	r2, r5
 8007466:	4b06      	ldr	r3, [pc, #24]	; (8007480 <_svfiprintf_r+0x1f8>)
 8007468:	a904      	add	r1, sp, #16
 800746a:	4638      	mov	r0, r7
 800746c:	f000 f87a 	bl	8007564 <_printf_i>
 8007470:	e7eb      	b.n	800744a <_svfiprintf_r+0x1c2>
 8007472:	bf00      	nop
 8007474:	08007ae0 	.word	0x08007ae0
 8007478:	08007aea 	.word	0x08007aea
 800747c:	00000000 	.word	0x00000000
 8007480:	080071d1 	.word	0x080071d1
 8007484:	08007ae6 	.word	0x08007ae6

08007488 <_printf_common>:
 8007488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800748c:	4616      	mov	r6, r2
 800748e:	4699      	mov	r9, r3
 8007490:	688a      	ldr	r2, [r1, #8]
 8007492:	690b      	ldr	r3, [r1, #16]
 8007494:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007498:	4293      	cmp	r3, r2
 800749a:	bfb8      	it	lt
 800749c:	4613      	movlt	r3, r2
 800749e:	6033      	str	r3, [r6, #0]
 80074a0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80074a4:	4607      	mov	r7, r0
 80074a6:	460c      	mov	r4, r1
 80074a8:	b10a      	cbz	r2, 80074ae <_printf_common+0x26>
 80074aa:	3301      	adds	r3, #1
 80074ac:	6033      	str	r3, [r6, #0]
 80074ae:	6823      	ldr	r3, [r4, #0]
 80074b0:	0699      	lsls	r1, r3, #26
 80074b2:	bf42      	ittt	mi
 80074b4:	6833      	ldrmi	r3, [r6, #0]
 80074b6:	3302      	addmi	r3, #2
 80074b8:	6033      	strmi	r3, [r6, #0]
 80074ba:	6825      	ldr	r5, [r4, #0]
 80074bc:	f015 0506 	ands.w	r5, r5, #6
 80074c0:	d106      	bne.n	80074d0 <_printf_common+0x48>
 80074c2:	f104 0a19 	add.w	sl, r4, #25
 80074c6:	68e3      	ldr	r3, [r4, #12]
 80074c8:	6832      	ldr	r2, [r6, #0]
 80074ca:	1a9b      	subs	r3, r3, r2
 80074cc:	42ab      	cmp	r3, r5
 80074ce:	dc26      	bgt.n	800751e <_printf_common+0x96>
 80074d0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80074d4:	1e13      	subs	r3, r2, #0
 80074d6:	6822      	ldr	r2, [r4, #0]
 80074d8:	bf18      	it	ne
 80074da:	2301      	movne	r3, #1
 80074dc:	0692      	lsls	r2, r2, #26
 80074de:	d42b      	bmi.n	8007538 <_printf_common+0xb0>
 80074e0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80074e4:	4649      	mov	r1, r9
 80074e6:	4638      	mov	r0, r7
 80074e8:	47c0      	blx	r8
 80074ea:	3001      	adds	r0, #1
 80074ec:	d01e      	beq.n	800752c <_printf_common+0xa4>
 80074ee:	6823      	ldr	r3, [r4, #0]
 80074f0:	68e5      	ldr	r5, [r4, #12]
 80074f2:	6832      	ldr	r2, [r6, #0]
 80074f4:	f003 0306 	and.w	r3, r3, #6
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	bf08      	it	eq
 80074fc:	1aad      	subeq	r5, r5, r2
 80074fe:	68a3      	ldr	r3, [r4, #8]
 8007500:	6922      	ldr	r2, [r4, #16]
 8007502:	bf0c      	ite	eq
 8007504:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007508:	2500      	movne	r5, #0
 800750a:	4293      	cmp	r3, r2
 800750c:	bfc4      	itt	gt
 800750e:	1a9b      	subgt	r3, r3, r2
 8007510:	18ed      	addgt	r5, r5, r3
 8007512:	2600      	movs	r6, #0
 8007514:	341a      	adds	r4, #26
 8007516:	42b5      	cmp	r5, r6
 8007518:	d11a      	bne.n	8007550 <_printf_common+0xc8>
 800751a:	2000      	movs	r0, #0
 800751c:	e008      	b.n	8007530 <_printf_common+0xa8>
 800751e:	2301      	movs	r3, #1
 8007520:	4652      	mov	r2, sl
 8007522:	4649      	mov	r1, r9
 8007524:	4638      	mov	r0, r7
 8007526:	47c0      	blx	r8
 8007528:	3001      	adds	r0, #1
 800752a:	d103      	bne.n	8007534 <_printf_common+0xac>
 800752c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007530:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007534:	3501      	adds	r5, #1
 8007536:	e7c6      	b.n	80074c6 <_printf_common+0x3e>
 8007538:	18e1      	adds	r1, r4, r3
 800753a:	1c5a      	adds	r2, r3, #1
 800753c:	2030      	movs	r0, #48	; 0x30
 800753e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007542:	4422      	add	r2, r4
 8007544:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007548:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800754c:	3302      	adds	r3, #2
 800754e:	e7c7      	b.n	80074e0 <_printf_common+0x58>
 8007550:	2301      	movs	r3, #1
 8007552:	4622      	mov	r2, r4
 8007554:	4649      	mov	r1, r9
 8007556:	4638      	mov	r0, r7
 8007558:	47c0      	blx	r8
 800755a:	3001      	adds	r0, #1
 800755c:	d0e6      	beq.n	800752c <_printf_common+0xa4>
 800755e:	3601      	adds	r6, #1
 8007560:	e7d9      	b.n	8007516 <_printf_common+0x8e>
	...

08007564 <_printf_i>:
 8007564:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007568:	7e0f      	ldrb	r7, [r1, #24]
 800756a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800756c:	2f78      	cmp	r7, #120	; 0x78
 800756e:	4691      	mov	r9, r2
 8007570:	4680      	mov	r8, r0
 8007572:	460c      	mov	r4, r1
 8007574:	469a      	mov	sl, r3
 8007576:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800757a:	d807      	bhi.n	800758c <_printf_i+0x28>
 800757c:	2f62      	cmp	r7, #98	; 0x62
 800757e:	d80a      	bhi.n	8007596 <_printf_i+0x32>
 8007580:	2f00      	cmp	r7, #0
 8007582:	f000 80d8 	beq.w	8007736 <_printf_i+0x1d2>
 8007586:	2f58      	cmp	r7, #88	; 0x58
 8007588:	f000 80a3 	beq.w	80076d2 <_printf_i+0x16e>
 800758c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007590:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007594:	e03a      	b.n	800760c <_printf_i+0xa8>
 8007596:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800759a:	2b15      	cmp	r3, #21
 800759c:	d8f6      	bhi.n	800758c <_printf_i+0x28>
 800759e:	a101      	add	r1, pc, #4	; (adr r1, 80075a4 <_printf_i+0x40>)
 80075a0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075a4:	080075fd 	.word	0x080075fd
 80075a8:	08007611 	.word	0x08007611
 80075ac:	0800758d 	.word	0x0800758d
 80075b0:	0800758d 	.word	0x0800758d
 80075b4:	0800758d 	.word	0x0800758d
 80075b8:	0800758d 	.word	0x0800758d
 80075bc:	08007611 	.word	0x08007611
 80075c0:	0800758d 	.word	0x0800758d
 80075c4:	0800758d 	.word	0x0800758d
 80075c8:	0800758d 	.word	0x0800758d
 80075cc:	0800758d 	.word	0x0800758d
 80075d0:	0800771d 	.word	0x0800771d
 80075d4:	08007641 	.word	0x08007641
 80075d8:	080076ff 	.word	0x080076ff
 80075dc:	0800758d 	.word	0x0800758d
 80075e0:	0800758d 	.word	0x0800758d
 80075e4:	0800773f 	.word	0x0800773f
 80075e8:	0800758d 	.word	0x0800758d
 80075ec:	08007641 	.word	0x08007641
 80075f0:	0800758d 	.word	0x0800758d
 80075f4:	0800758d 	.word	0x0800758d
 80075f8:	08007707 	.word	0x08007707
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	1d1a      	adds	r2, r3, #4
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	602a      	str	r2, [r5, #0]
 8007604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007608:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800760c:	2301      	movs	r3, #1
 800760e:	e0a3      	b.n	8007758 <_printf_i+0x1f4>
 8007610:	6820      	ldr	r0, [r4, #0]
 8007612:	6829      	ldr	r1, [r5, #0]
 8007614:	0606      	lsls	r6, r0, #24
 8007616:	f101 0304 	add.w	r3, r1, #4
 800761a:	d50a      	bpl.n	8007632 <_printf_i+0xce>
 800761c:	680e      	ldr	r6, [r1, #0]
 800761e:	602b      	str	r3, [r5, #0]
 8007620:	2e00      	cmp	r6, #0
 8007622:	da03      	bge.n	800762c <_printf_i+0xc8>
 8007624:	232d      	movs	r3, #45	; 0x2d
 8007626:	4276      	negs	r6, r6
 8007628:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800762c:	485e      	ldr	r0, [pc, #376]	; (80077a8 <_printf_i+0x244>)
 800762e:	230a      	movs	r3, #10
 8007630:	e019      	b.n	8007666 <_printf_i+0x102>
 8007632:	680e      	ldr	r6, [r1, #0]
 8007634:	602b      	str	r3, [r5, #0]
 8007636:	f010 0f40 	tst.w	r0, #64	; 0x40
 800763a:	bf18      	it	ne
 800763c:	b236      	sxthne	r6, r6
 800763e:	e7ef      	b.n	8007620 <_printf_i+0xbc>
 8007640:	682b      	ldr	r3, [r5, #0]
 8007642:	6820      	ldr	r0, [r4, #0]
 8007644:	1d19      	adds	r1, r3, #4
 8007646:	6029      	str	r1, [r5, #0]
 8007648:	0601      	lsls	r1, r0, #24
 800764a:	d501      	bpl.n	8007650 <_printf_i+0xec>
 800764c:	681e      	ldr	r6, [r3, #0]
 800764e:	e002      	b.n	8007656 <_printf_i+0xf2>
 8007650:	0646      	lsls	r6, r0, #25
 8007652:	d5fb      	bpl.n	800764c <_printf_i+0xe8>
 8007654:	881e      	ldrh	r6, [r3, #0]
 8007656:	4854      	ldr	r0, [pc, #336]	; (80077a8 <_printf_i+0x244>)
 8007658:	2f6f      	cmp	r7, #111	; 0x6f
 800765a:	bf0c      	ite	eq
 800765c:	2308      	moveq	r3, #8
 800765e:	230a      	movne	r3, #10
 8007660:	2100      	movs	r1, #0
 8007662:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007666:	6865      	ldr	r5, [r4, #4]
 8007668:	60a5      	str	r5, [r4, #8]
 800766a:	2d00      	cmp	r5, #0
 800766c:	bfa2      	ittt	ge
 800766e:	6821      	ldrge	r1, [r4, #0]
 8007670:	f021 0104 	bicge.w	r1, r1, #4
 8007674:	6021      	strge	r1, [r4, #0]
 8007676:	b90e      	cbnz	r6, 800767c <_printf_i+0x118>
 8007678:	2d00      	cmp	r5, #0
 800767a:	d04d      	beq.n	8007718 <_printf_i+0x1b4>
 800767c:	4615      	mov	r5, r2
 800767e:	fbb6 f1f3 	udiv	r1, r6, r3
 8007682:	fb03 6711 	mls	r7, r3, r1, r6
 8007686:	5dc7      	ldrb	r7, [r0, r7]
 8007688:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800768c:	4637      	mov	r7, r6
 800768e:	42bb      	cmp	r3, r7
 8007690:	460e      	mov	r6, r1
 8007692:	d9f4      	bls.n	800767e <_printf_i+0x11a>
 8007694:	2b08      	cmp	r3, #8
 8007696:	d10b      	bne.n	80076b0 <_printf_i+0x14c>
 8007698:	6823      	ldr	r3, [r4, #0]
 800769a:	07de      	lsls	r6, r3, #31
 800769c:	d508      	bpl.n	80076b0 <_printf_i+0x14c>
 800769e:	6923      	ldr	r3, [r4, #16]
 80076a0:	6861      	ldr	r1, [r4, #4]
 80076a2:	4299      	cmp	r1, r3
 80076a4:	bfde      	ittt	le
 80076a6:	2330      	movle	r3, #48	; 0x30
 80076a8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80076ac:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80076b0:	1b52      	subs	r2, r2, r5
 80076b2:	6122      	str	r2, [r4, #16]
 80076b4:	f8cd a000 	str.w	sl, [sp]
 80076b8:	464b      	mov	r3, r9
 80076ba:	aa03      	add	r2, sp, #12
 80076bc:	4621      	mov	r1, r4
 80076be:	4640      	mov	r0, r8
 80076c0:	f7ff fee2 	bl	8007488 <_printf_common>
 80076c4:	3001      	adds	r0, #1
 80076c6:	d14c      	bne.n	8007762 <_printf_i+0x1fe>
 80076c8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80076cc:	b004      	add	sp, #16
 80076ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076d2:	4835      	ldr	r0, [pc, #212]	; (80077a8 <_printf_i+0x244>)
 80076d4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80076d8:	6829      	ldr	r1, [r5, #0]
 80076da:	6823      	ldr	r3, [r4, #0]
 80076dc:	f851 6b04 	ldr.w	r6, [r1], #4
 80076e0:	6029      	str	r1, [r5, #0]
 80076e2:	061d      	lsls	r5, r3, #24
 80076e4:	d514      	bpl.n	8007710 <_printf_i+0x1ac>
 80076e6:	07df      	lsls	r7, r3, #31
 80076e8:	bf44      	itt	mi
 80076ea:	f043 0320 	orrmi.w	r3, r3, #32
 80076ee:	6023      	strmi	r3, [r4, #0]
 80076f0:	b91e      	cbnz	r6, 80076fa <_printf_i+0x196>
 80076f2:	6823      	ldr	r3, [r4, #0]
 80076f4:	f023 0320 	bic.w	r3, r3, #32
 80076f8:	6023      	str	r3, [r4, #0]
 80076fa:	2310      	movs	r3, #16
 80076fc:	e7b0      	b.n	8007660 <_printf_i+0xfc>
 80076fe:	6823      	ldr	r3, [r4, #0]
 8007700:	f043 0320 	orr.w	r3, r3, #32
 8007704:	6023      	str	r3, [r4, #0]
 8007706:	2378      	movs	r3, #120	; 0x78
 8007708:	4828      	ldr	r0, [pc, #160]	; (80077ac <_printf_i+0x248>)
 800770a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800770e:	e7e3      	b.n	80076d8 <_printf_i+0x174>
 8007710:	0659      	lsls	r1, r3, #25
 8007712:	bf48      	it	mi
 8007714:	b2b6      	uxthmi	r6, r6
 8007716:	e7e6      	b.n	80076e6 <_printf_i+0x182>
 8007718:	4615      	mov	r5, r2
 800771a:	e7bb      	b.n	8007694 <_printf_i+0x130>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	6826      	ldr	r6, [r4, #0]
 8007720:	6961      	ldr	r1, [r4, #20]
 8007722:	1d18      	adds	r0, r3, #4
 8007724:	6028      	str	r0, [r5, #0]
 8007726:	0635      	lsls	r5, r6, #24
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	d501      	bpl.n	8007730 <_printf_i+0x1cc>
 800772c:	6019      	str	r1, [r3, #0]
 800772e:	e002      	b.n	8007736 <_printf_i+0x1d2>
 8007730:	0670      	lsls	r0, r6, #25
 8007732:	d5fb      	bpl.n	800772c <_printf_i+0x1c8>
 8007734:	8019      	strh	r1, [r3, #0]
 8007736:	2300      	movs	r3, #0
 8007738:	6123      	str	r3, [r4, #16]
 800773a:	4615      	mov	r5, r2
 800773c:	e7ba      	b.n	80076b4 <_printf_i+0x150>
 800773e:	682b      	ldr	r3, [r5, #0]
 8007740:	1d1a      	adds	r2, r3, #4
 8007742:	602a      	str	r2, [r5, #0]
 8007744:	681d      	ldr	r5, [r3, #0]
 8007746:	6862      	ldr	r2, [r4, #4]
 8007748:	2100      	movs	r1, #0
 800774a:	4628      	mov	r0, r5
 800774c:	f7f8 fd48 	bl	80001e0 <memchr>
 8007750:	b108      	cbz	r0, 8007756 <_printf_i+0x1f2>
 8007752:	1b40      	subs	r0, r0, r5
 8007754:	6060      	str	r0, [r4, #4]
 8007756:	6863      	ldr	r3, [r4, #4]
 8007758:	6123      	str	r3, [r4, #16]
 800775a:	2300      	movs	r3, #0
 800775c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007760:	e7a8      	b.n	80076b4 <_printf_i+0x150>
 8007762:	6923      	ldr	r3, [r4, #16]
 8007764:	462a      	mov	r2, r5
 8007766:	4649      	mov	r1, r9
 8007768:	4640      	mov	r0, r8
 800776a:	47d0      	blx	sl
 800776c:	3001      	adds	r0, #1
 800776e:	d0ab      	beq.n	80076c8 <_printf_i+0x164>
 8007770:	6823      	ldr	r3, [r4, #0]
 8007772:	079b      	lsls	r3, r3, #30
 8007774:	d413      	bmi.n	800779e <_printf_i+0x23a>
 8007776:	68e0      	ldr	r0, [r4, #12]
 8007778:	9b03      	ldr	r3, [sp, #12]
 800777a:	4298      	cmp	r0, r3
 800777c:	bfb8      	it	lt
 800777e:	4618      	movlt	r0, r3
 8007780:	e7a4      	b.n	80076cc <_printf_i+0x168>
 8007782:	2301      	movs	r3, #1
 8007784:	4632      	mov	r2, r6
 8007786:	4649      	mov	r1, r9
 8007788:	4640      	mov	r0, r8
 800778a:	47d0      	blx	sl
 800778c:	3001      	adds	r0, #1
 800778e:	d09b      	beq.n	80076c8 <_printf_i+0x164>
 8007790:	3501      	adds	r5, #1
 8007792:	68e3      	ldr	r3, [r4, #12]
 8007794:	9903      	ldr	r1, [sp, #12]
 8007796:	1a5b      	subs	r3, r3, r1
 8007798:	42ab      	cmp	r3, r5
 800779a:	dcf2      	bgt.n	8007782 <_printf_i+0x21e>
 800779c:	e7eb      	b.n	8007776 <_printf_i+0x212>
 800779e:	2500      	movs	r5, #0
 80077a0:	f104 0619 	add.w	r6, r4, #25
 80077a4:	e7f5      	b.n	8007792 <_printf_i+0x22e>
 80077a6:	bf00      	nop
 80077a8:	08007af1 	.word	0x08007af1
 80077ac:	08007b02 	.word	0x08007b02

080077b0 <memcpy>:
 80077b0:	440a      	add	r2, r1
 80077b2:	4291      	cmp	r1, r2
 80077b4:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80077b8:	d100      	bne.n	80077bc <memcpy+0xc>
 80077ba:	4770      	bx	lr
 80077bc:	b510      	push	{r4, lr}
 80077be:	f811 4b01 	ldrb.w	r4, [r1], #1
 80077c2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80077c6:	4291      	cmp	r1, r2
 80077c8:	d1f9      	bne.n	80077be <memcpy+0xe>
 80077ca:	bd10      	pop	{r4, pc}

080077cc <memmove>:
 80077cc:	4288      	cmp	r0, r1
 80077ce:	b510      	push	{r4, lr}
 80077d0:	eb01 0402 	add.w	r4, r1, r2
 80077d4:	d902      	bls.n	80077dc <memmove+0x10>
 80077d6:	4284      	cmp	r4, r0
 80077d8:	4623      	mov	r3, r4
 80077da:	d807      	bhi.n	80077ec <memmove+0x20>
 80077dc:	1e43      	subs	r3, r0, #1
 80077de:	42a1      	cmp	r1, r4
 80077e0:	d008      	beq.n	80077f4 <memmove+0x28>
 80077e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ea:	e7f8      	b.n	80077de <memmove+0x12>
 80077ec:	4402      	add	r2, r0
 80077ee:	4601      	mov	r1, r0
 80077f0:	428a      	cmp	r2, r1
 80077f2:	d100      	bne.n	80077f6 <memmove+0x2a>
 80077f4:	bd10      	pop	{r4, pc}
 80077f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80077fe:	e7f7      	b.n	80077f0 <memmove+0x24>

08007800 <_free_r>:
 8007800:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007802:	2900      	cmp	r1, #0
 8007804:	d044      	beq.n	8007890 <_free_r+0x90>
 8007806:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800780a:	9001      	str	r0, [sp, #4]
 800780c:	2b00      	cmp	r3, #0
 800780e:	f1a1 0404 	sub.w	r4, r1, #4
 8007812:	bfb8      	it	lt
 8007814:	18e4      	addlt	r4, r4, r3
 8007816:	f000 f913 	bl	8007a40 <__malloc_lock>
 800781a:	4a1e      	ldr	r2, [pc, #120]	; (8007894 <_free_r+0x94>)
 800781c:	9801      	ldr	r0, [sp, #4]
 800781e:	6813      	ldr	r3, [r2, #0]
 8007820:	b933      	cbnz	r3, 8007830 <_free_r+0x30>
 8007822:	6063      	str	r3, [r4, #4]
 8007824:	6014      	str	r4, [r2, #0]
 8007826:	b003      	add	sp, #12
 8007828:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800782c:	f000 b90e 	b.w	8007a4c <__malloc_unlock>
 8007830:	42a3      	cmp	r3, r4
 8007832:	d908      	bls.n	8007846 <_free_r+0x46>
 8007834:	6825      	ldr	r5, [r4, #0]
 8007836:	1961      	adds	r1, r4, r5
 8007838:	428b      	cmp	r3, r1
 800783a:	bf01      	itttt	eq
 800783c:	6819      	ldreq	r1, [r3, #0]
 800783e:	685b      	ldreq	r3, [r3, #4]
 8007840:	1949      	addeq	r1, r1, r5
 8007842:	6021      	streq	r1, [r4, #0]
 8007844:	e7ed      	b.n	8007822 <_free_r+0x22>
 8007846:	461a      	mov	r2, r3
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	b10b      	cbz	r3, 8007850 <_free_r+0x50>
 800784c:	42a3      	cmp	r3, r4
 800784e:	d9fa      	bls.n	8007846 <_free_r+0x46>
 8007850:	6811      	ldr	r1, [r2, #0]
 8007852:	1855      	adds	r5, r2, r1
 8007854:	42a5      	cmp	r5, r4
 8007856:	d10b      	bne.n	8007870 <_free_r+0x70>
 8007858:	6824      	ldr	r4, [r4, #0]
 800785a:	4421      	add	r1, r4
 800785c:	1854      	adds	r4, r2, r1
 800785e:	42a3      	cmp	r3, r4
 8007860:	6011      	str	r1, [r2, #0]
 8007862:	d1e0      	bne.n	8007826 <_free_r+0x26>
 8007864:	681c      	ldr	r4, [r3, #0]
 8007866:	685b      	ldr	r3, [r3, #4]
 8007868:	6053      	str	r3, [r2, #4]
 800786a:	4421      	add	r1, r4
 800786c:	6011      	str	r1, [r2, #0]
 800786e:	e7da      	b.n	8007826 <_free_r+0x26>
 8007870:	d902      	bls.n	8007878 <_free_r+0x78>
 8007872:	230c      	movs	r3, #12
 8007874:	6003      	str	r3, [r0, #0]
 8007876:	e7d6      	b.n	8007826 <_free_r+0x26>
 8007878:	6825      	ldr	r5, [r4, #0]
 800787a:	1961      	adds	r1, r4, r5
 800787c:	428b      	cmp	r3, r1
 800787e:	bf04      	itt	eq
 8007880:	6819      	ldreq	r1, [r3, #0]
 8007882:	685b      	ldreq	r3, [r3, #4]
 8007884:	6063      	str	r3, [r4, #4]
 8007886:	bf04      	itt	eq
 8007888:	1949      	addeq	r1, r1, r5
 800788a:	6021      	streq	r1, [r4, #0]
 800788c:	6054      	str	r4, [r2, #4]
 800788e:	e7ca      	b.n	8007826 <_free_r+0x26>
 8007890:	b003      	add	sp, #12
 8007892:	bd30      	pop	{r4, r5, pc}
 8007894:	20001dfc 	.word	0x20001dfc

08007898 <sbrk_aligned>:
 8007898:	b570      	push	{r4, r5, r6, lr}
 800789a:	4e0e      	ldr	r6, [pc, #56]	; (80078d4 <sbrk_aligned+0x3c>)
 800789c:	460c      	mov	r4, r1
 800789e:	6831      	ldr	r1, [r6, #0]
 80078a0:	4605      	mov	r5, r0
 80078a2:	b911      	cbnz	r1, 80078aa <sbrk_aligned+0x12>
 80078a4:	f000 f8bc 	bl	8007a20 <_sbrk_r>
 80078a8:	6030      	str	r0, [r6, #0]
 80078aa:	4621      	mov	r1, r4
 80078ac:	4628      	mov	r0, r5
 80078ae:	f000 f8b7 	bl	8007a20 <_sbrk_r>
 80078b2:	1c43      	adds	r3, r0, #1
 80078b4:	d00a      	beq.n	80078cc <sbrk_aligned+0x34>
 80078b6:	1cc4      	adds	r4, r0, #3
 80078b8:	f024 0403 	bic.w	r4, r4, #3
 80078bc:	42a0      	cmp	r0, r4
 80078be:	d007      	beq.n	80078d0 <sbrk_aligned+0x38>
 80078c0:	1a21      	subs	r1, r4, r0
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f8ac 	bl	8007a20 <_sbrk_r>
 80078c8:	3001      	adds	r0, #1
 80078ca:	d101      	bne.n	80078d0 <sbrk_aligned+0x38>
 80078cc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80078d0:	4620      	mov	r0, r4
 80078d2:	bd70      	pop	{r4, r5, r6, pc}
 80078d4:	20001e00 	.word	0x20001e00

080078d8 <_malloc_r>:
 80078d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078dc:	1ccd      	adds	r5, r1, #3
 80078de:	f025 0503 	bic.w	r5, r5, #3
 80078e2:	3508      	adds	r5, #8
 80078e4:	2d0c      	cmp	r5, #12
 80078e6:	bf38      	it	cc
 80078e8:	250c      	movcc	r5, #12
 80078ea:	2d00      	cmp	r5, #0
 80078ec:	4607      	mov	r7, r0
 80078ee:	db01      	blt.n	80078f4 <_malloc_r+0x1c>
 80078f0:	42a9      	cmp	r1, r5
 80078f2:	d905      	bls.n	8007900 <_malloc_r+0x28>
 80078f4:	230c      	movs	r3, #12
 80078f6:	603b      	str	r3, [r7, #0]
 80078f8:	2600      	movs	r6, #0
 80078fa:	4630      	mov	r0, r6
 80078fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007900:	4e2e      	ldr	r6, [pc, #184]	; (80079bc <_malloc_r+0xe4>)
 8007902:	f000 f89d 	bl	8007a40 <__malloc_lock>
 8007906:	6833      	ldr	r3, [r6, #0]
 8007908:	461c      	mov	r4, r3
 800790a:	bb34      	cbnz	r4, 800795a <_malloc_r+0x82>
 800790c:	4629      	mov	r1, r5
 800790e:	4638      	mov	r0, r7
 8007910:	f7ff ffc2 	bl	8007898 <sbrk_aligned>
 8007914:	1c43      	adds	r3, r0, #1
 8007916:	4604      	mov	r4, r0
 8007918:	d14d      	bne.n	80079b6 <_malloc_r+0xde>
 800791a:	6834      	ldr	r4, [r6, #0]
 800791c:	4626      	mov	r6, r4
 800791e:	2e00      	cmp	r6, #0
 8007920:	d140      	bne.n	80079a4 <_malloc_r+0xcc>
 8007922:	6823      	ldr	r3, [r4, #0]
 8007924:	4631      	mov	r1, r6
 8007926:	4638      	mov	r0, r7
 8007928:	eb04 0803 	add.w	r8, r4, r3
 800792c:	f000 f878 	bl	8007a20 <_sbrk_r>
 8007930:	4580      	cmp	r8, r0
 8007932:	d13a      	bne.n	80079aa <_malloc_r+0xd2>
 8007934:	6821      	ldr	r1, [r4, #0]
 8007936:	3503      	adds	r5, #3
 8007938:	1a6d      	subs	r5, r5, r1
 800793a:	f025 0503 	bic.w	r5, r5, #3
 800793e:	3508      	adds	r5, #8
 8007940:	2d0c      	cmp	r5, #12
 8007942:	bf38      	it	cc
 8007944:	250c      	movcc	r5, #12
 8007946:	4629      	mov	r1, r5
 8007948:	4638      	mov	r0, r7
 800794a:	f7ff ffa5 	bl	8007898 <sbrk_aligned>
 800794e:	3001      	adds	r0, #1
 8007950:	d02b      	beq.n	80079aa <_malloc_r+0xd2>
 8007952:	6823      	ldr	r3, [r4, #0]
 8007954:	442b      	add	r3, r5
 8007956:	6023      	str	r3, [r4, #0]
 8007958:	e00e      	b.n	8007978 <_malloc_r+0xa0>
 800795a:	6822      	ldr	r2, [r4, #0]
 800795c:	1b52      	subs	r2, r2, r5
 800795e:	d41e      	bmi.n	800799e <_malloc_r+0xc6>
 8007960:	2a0b      	cmp	r2, #11
 8007962:	d916      	bls.n	8007992 <_malloc_r+0xba>
 8007964:	1961      	adds	r1, r4, r5
 8007966:	42a3      	cmp	r3, r4
 8007968:	6025      	str	r5, [r4, #0]
 800796a:	bf18      	it	ne
 800796c:	6059      	strne	r1, [r3, #4]
 800796e:	6863      	ldr	r3, [r4, #4]
 8007970:	bf08      	it	eq
 8007972:	6031      	streq	r1, [r6, #0]
 8007974:	5162      	str	r2, [r4, r5]
 8007976:	604b      	str	r3, [r1, #4]
 8007978:	4638      	mov	r0, r7
 800797a:	f104 060b 	add.w	r6, r4, #11
 800797e:	f000 f865 	bl	8007a4c <__malloc_unlock>
 8007982:	f026 0607 	bic.w	r6, r6, #7
 8007986:	1d23      	adds	r3, r4, #4
 8007988:	1af2      	subs	r2, r6, r3
 800798a:	d0b6      	beq.n	80078fa <_malloc_r+0x22>
 800798c:	1b9b      	subs	r3, r3, r6
 800798e:	50a3      	str	r3, [r4, r2]
 8007990:	e7b3      	b.n	80078fa <_malloc_r+0x22>
 8007992:	6862      	ldr	r2, [r4, #4]
 8007994:	42a3      	cmp	r3, r4
 8007996:	bf0c      	ite	eq
 8007998:	6032      	streq	r2, [r6, #0]
 800799a:	605a      	strne	r2, [r3, #4]
 800799c:	e7ec      	b.n	8007978 <_malloc_r+0xa0>
 800799e:	4623      	mov	r3, r4
 80079a0:	6864      	ldr	r4, [r4, #4]
 80079a2:	e7b2      	b.n	800790a <_malloc_r+0x32>
 80079a4:	4634      	mov	r4, r6
 80079a6:	6876      	ldr	r6, [r6, #4]
 80079a8:	e7b9      	b.n	800791e <_malloc_r+0x46>
 80079aa:	230c      	movs	r3, #12
 80079ac:	603b      	str	r3, [r7, #0]
 80079ae:	4638      	mov	r0, r7
 80079b0:	f000 f84c 	bl	8007a4c <__malloc_unlock>
 80079b4:	e7a1      	b.n	80078fa <_malloc_r+0x22>
 80079b6:	6025      	str	r5, [r4, #0]
 80079b8:	e7de      	b.n	8007978 <_malloc_r+0xa0>
 80079ba:	bf00      	nop
 80079bc:	20001dfc 	.word	0x20001dfc

080079c0 <_realloc_r>:
 80079c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079c4:	4680      	mov	r8, r0
 80079c6:	4614      	mov	r4, r2
 80079c8:	460e      	mov	r6, r1
 80079ca:	b921      	cbnz	r1, 80079d6 <_realloc_r+0x16>
 80079cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079d0:	4611      	mov	r1, r2
 80079d2:	f7ff bf81 	b.w	80078d8 <_malloc_r>
 80079d6:	b92a      	cbnz	r2, 80079e4 <_realloc_r+0x24>
 80079d8:	f7ff ff12 	bl	8007800 <_free_r>
 80079dc:	4625      	mov	r5, r4
 80079de:	4628      	mov	r0, r5
 80079e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80079e4:	f000 f838 	bl	8007a58 <_malloc_usable_size_r>
 80079e8:	4284      	cmp	r4, r0
 80079ea:	4607      	mov	r7, r0
 80079ec:	d802      	bhi.n	80079f4 <_realloc_r+0x34>
 80079ee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80079f2:	d812      	bhi.n	8007a1a <_realloc_r+0x5a>
 80079f4:	4621      	mov	r1, r4
 80079f6:	4640      	mov	r0, r8
 80079f8:	f7ff ff6e 	bl	80078d8 <_malloc_r>
 80079fc:	4605      	mov	r5, r0
 80079fe:	2800      	cmp	r0, #0
 8007a00:	d0ed      	beq.n	80079de <_realloc_r+0x1e>
 8007a02:	42bc      	cmp	r4, r7
 8007a04:	4622      	mov	r2, r4
 8007a06:	4631      	mov	r1, r6
 8007a08:	bf28      	it	cs
 8007a0a:	463a      	movcs	r2, r7
 8007a0c:	f7ff fed0 	bl	80077b0 <memcpy>
 8007a10:	4631      	mov	r1, r6
 8007a12:	4640      	mov	r0, r8
 8007a14:	f7ff fef4 	bl	8007800 <_free_r>
 8007a18:	e7e1      	b.n	80079de <_realloc_r+0x1e>
 8007a1a:	4635      	mov	r5, r6
 8007a1c:	e7df      	b.n	80079de <_realloc_r+0x1e>
	...

08007a20 <_sbrk_r>:
 8007a20:	b538      	push	{r3, r4, r5, lr}
 8007a22:	4d06      	ldr	r5, [pc, #24]	; (8007a3c <_sbrk_r+0x1c>)
 8007a24:	2300      	movs	r3, #0
 8007a26:	4604      	mov	r4, r0
 8007a28:	4608      	mov	r0, r1
 8007a2a:	602b      	str	r3, [r5, #0]
 8007a2c:	f7f8 ff50 	bl	80008d0 <_sbrk>
 8007a30:	1c43      	adds	r3, r0, #1
 8007a32:	d102      	bne.n	8007a3a <_sbrk_r+0x1a>
 8007a34:	682b      	ldr	r3, [r5, #0]
 8007a36:	b103      	cbz	r3, 8007a3a <_sbrk_r+0x1a>
 8007a38:	6023      	str	r3, [r4, #0]
 8007a3a:	bd38      	pop	{r3, r4, r5, pc}
 8007a3c:	20001e04 	.word	0x20001e04

08007a40 <__malloc_lock>:
 8007a40:	4801      	ldr	r0, [pc, #4]	; (8007a48 <__malloc_lock+0x8>)
 8007a42:	f000 b811 	b.w	8007a68 <__retarget_lock_acquire_recursive>
 8007a46:	bf00      	nop
 8007a48:	20001e08 	.word	0x20001e08

08007a4c <__malloc_unlock>:
 8007a4c:	4801      	ldr	r0, [pc, #4]	; (8007a54 <__malloc_unlock+0x8>)
 8007a4e:	f000 b80c 	b.w	8007a6a <__retarget_lock_release_recursive>
 8007a52:	bf00      	nop
 8007a54:	20001e08 	.word	0x20001e08

08007a58 <_malloc_usable_size_r>:
 8007a58:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a5c:	1f18      	subs	r0, r3, #4
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	bfbc      	itt	lt
 8007a62:	580b      	ldrlt	r3, [r1, r0]
 8007a64:	18c0      	addlt	r0, r0, r3
 8007a66:	4770      	bx	lr

08007a68 <__retarget_lock_acquire_recursive>:
 8007a68:	4770      	bx	lr

08007a6a <__retarget_lock_release_recursive>:
 8007a6a:	4770      	bx	lr

08007a6c <_init>:
 8007a6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a6e:	bf00      	nop
 8007a70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a72:	bc08      	pop	{r3}
 8007a74:	469e      	mov	lr, r3
 8007a76:	4770      	bx	lr

08007a78 <_fini>:
 8007a78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a7a:	bf00      	nop
 8007a7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a7e:	bc08      	pop	{r3}
 8007a80:	469e      	mov	lr, r3
 8007a82:	4770      	bx	lr
